generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlaylistType {
  PLAYLIST
  LIKED
}

enum PlaylistJobStatus {
  DRAFT
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model User {
  id            String        @id @default(uuid())
  slug          String        @unique
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  playlistJob   PlaylistJob[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model PlaylistJob {
  id          String            @id @default(cuid())
  userId      String
  prompt      String?
  status      PlaylistJobStatus @default(DRAFT)
  createdAt   DateTime          @default(now())
  completedAt DateTime?

  inputs PlaylistJobInput[]
  user   User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  resultPlaylistId   String?
  playlistJobResults PlaylistJobResult[]

  @@index([userId, status])
  @@map("playlist_job")
}

model PlaylistJobResult {
  id          String      @id @default(cuid())
  jobId       String
  playlistId  String
  name        String
  description String?
  totalTracks Int?
  job         PlaylistJob @relation(fields: [jobId], references: [id])

  @@index([playlistId, name, jobId])
  @@map("playlist_job_result")
}

model PlaylistJobInput {
  id          String       @id @default(cuid())
  jobId       String
  playlistId  String
  name        String
  image       String?
  type        PlaylistType @default(PLAYLIST)
  totalTracks Int?
  job         PlaylistJob  @relation(fields: [jobId], references: [id])

  @@index([playlistId, name, jobId])
  @@map("playlist_job_input")
}
