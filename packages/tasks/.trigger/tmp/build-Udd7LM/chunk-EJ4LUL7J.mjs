import {
  SpanStatusCode,
  logger,
  schemaTask,
  trace
} from "./chunk-PEGTRPBK.mjs";
import {
  __commonJS,
  __export,
  __reExport,
  __require,
  __toESM,
  init_esm
} from "./chunk-5YFNUNE7.mjs";

// ../prisma/generated/prisma/runtime/binary.js
var require_binary = __commonJS({
  "../prisma/generated/prisma/runtime/binary.js"(exports, module) {
    "use strict";
    init_esm();
    var mb = Object.create;
    var lo = Object.defineProperty;
    var yb = Object.getOwnPropertyDescriptor;
    var wb = Object.getOwnPropertyNames;
    var Db = Object.getPrototypeOf;
    var Rb = Object.prototype.hasOwnProperty;
    var zh = (t, e) => () => (t && (e = t(t = 0)), e);
    var C = (t, e) => () => (e || t((e = { exports: {} }).exports, e), e.exports);
    var Jn = (t, e) => {
      for (var r in e) lo(t, r, { get: e[r], enumerable: true });
    };
    var ef = (t, e, r, n) => {
      if (e && typeof e == "object" || typeof e == "function") for (let A of wb(e)) !Rb.call(t, A) && A !== r && lo(t, A, { get: () => e[A], enumerable: !(n = yb(e, A)) || n.enumerable });
      return t;
    };
    var G = (t, e, r) => (r = t != null ? mb(Db(t)) : {}, ef(e || !t || !t.__esModule ? lo(r, "default", { value: t, enumerable: true }) : r, t));
    var Sb = (t) => ef(lo({}, "__esModule", { value: true }), t);
    var Rf = C((A9, Df) => {
      "use strict";
      Df.exports = wf;
      wf.sync = dN;
      var mf = __require("node:fs");
      function EN(t, e) {
        var r = e.pathExt !== void 0 ? e.pathExt : process.env.PATHEXT;
        if (!r || (r = r.split(";"), r.indexOf("") !== -1)) return true;
        for (var n = 0; n < r.length; n++) {
          var A = r[n].toLowerCase();
          if (A && t.substr(-A.length).toLowerCase() === A) return true;
        }
        return false;
      }
      function yf(t, e, r) {
        return !t.isSymbolicLink() && !t.isFile() ? false : EN(e, r);
      }
      function wf(t, e, r) {
        mf.stat(t, function(n, A) {
          r(n, n ? false : yf(A, t, e));
        });
      }
      function dN(t, e) {
        return yf(mf.statSync(t), t, e);
      }
    });
    var Tf = C((i9, Ff) => {
      "use strict";
      Ff.exports = bf;
      bf.sync = hN;
      var Sf = __require("node:fs");
      function bf(t, e, r) {
        Sf.stat(t, function(n, A) {
          r(n, n ? false : Nf(A, e));
        });
      }
      function hN(t, e) {
        return Nf(Sf.statSync(t), e);
      }
      function Nf(t, e) {
        return t.isFile() && fN(t, e);
      }
      function fN(t, e) {
        var r = t.mode, n = t.uid, A = t.gid, i = e.uid !== void 0 ? e.uid : process.getuid && process.getuid(), s = e.gid !== void 0 ? e.gid : process.getgid && process.getgid(), o = parseInt("100", 8), a = parseInt("010", 8), c = parseInt("001", 8), l = o | a, u = r & c || r & a && A === s || r & o && n === i || r & l && i === 0;
        return u;
      }
    });
    var Uf = C((o9, xf) => {
      "use strict";
      var s9 = __require("node:fs"), mo;
      process.platform === "win32" || global.TESTING_WINDOWS ? mo = Rf() : mo = Tf();
      xf.exports = Wl;
      Wl.sync = QN;
      function Wl(t, e, r) {
        if (typeof e == "function" && (r = e, e = {}), !r) {
          if (typeof Promise != "function") throw new TypeError("callback not provided");
          return new Promise(function(n, A) {
            Wl(t, e || {}, function(i, s) {
              i ? A(i) : n(s);
            });
          });
        }
        mo(t, e || {}, function(n, A) {
          n && (n.code === "EACCES" || e && e.ignoreErrors) && (n = null, A = false), r(n, A);
        });
      }
      function QN(t, e) {
        try {
          return mo.sync(t, e || {});
        } catch (r) {
          if (e && e.ignoreErrors || r.code === "EACCES") return false;
          throw r;
        }
      }
    });
    var Gf = C((a9, Yf) => {
      "use strict";
      var _n = process.platform === "win32" || process.env.OSTYPE === "cygwin" || process.env.OSTYPE === "msys", kf = __require("node:path"), CN = _n ? ";" : ":", Mf = Uf(), Lf = (t) => Object.assign(new Error(`not found: ${t}`), { code: "ENOENT" }), vf = (t, e) => {
        let r = e.colon || CN, n = t.match(/\//) || _n && t.match(/\\/) ? [""] : [..._n ? [process.cwd()] : [], ...(e.path || process.env.PATH || "").split(r)], A = _n ? e.pathExt || process.env.PATHEXT || ".EXE;.CMD;.BAT;.COM" : "", i = _n ? A.split(r) : [""];
        return _n && t.indexOf(".") !== -1 && i[0] !== "" && i.unshift(""), { pathEnv: n, pathExt: i, pathExtExe: A };
      }, Pf = (t, e, r) => {
        typeof e == "function" && (r = e, e = {}), e || (e = {});
        let { pathEnv: n, pathExt: A, pathExtExe: i } = vf(t, e), s = [], o = (c) => new Promise((l, u) => {
          if (c === n.length) return e.all && s.length ? l(s) : u(Lf(t));
          let g = n[c], E = /^".*"$/.test(g) ? g.slice(1, -1) : g, h = kf.join(E, t), f = !E && /^\.[\\\/]/.test(t) ? t.slice(0, 2) + h : h;
          l(a(f, c, 0));
        }), a = (c, l, u) => new Promise((g, E) => {
          if (u === A.length) return g(o(l + 1));
          let h = A[u];
          Mf(c + h, { pathExt: i }, (f, B) => {
            if (!f && B) if (e.all) s.push(c + h);
            else return g(c + h);
            return g(a(c, l, u + 1));
          });
        });
        return r ? o(0).then((c) => r(null, c), r) : o(0);
      }, IN = (t, e) => {
        e = e || {};
        let { pathEnv: r, pathExt: n, pathExtExe: A } = vf(t, e), i = [];
        for (let s = 0; s < r.length; s++) {
          let o = r[s], a = /^".*"$/.test(o) ? o.slice(1, -1) : o, c = kf.join(a, t), l = !a && /^\.[\\\/]/.test(t) ? t.slice(0, 2) + c : c;
          for (let u = 0; u < n.length; u++) {
            let g = l + n[u];
            try {
              if (Mf.sync(g, { pathExt: A })) if (e.all) i.push(g);
              else return g;
            } catch {
            }
          }
        }
        if (e.all && i.length) return i;
        if (e.nothrow) return null;
        throw Lf(t);
      };
      Yf.exports = Pf;
      Pf.sync = IN;
    });
    var jl = C((c9, _l) => {
      "use strict";
      var Of = (t = {}) => {
        let e = t.env || process.env;
        return (t.platform || process.platform) !== "win32" ? "PATH" : Object.keys(e).reverse().find((n) => n.toUpperCase() === "PATH") || "Path";
      };
      _l.exports = Of;
      _l.exports.default = Of;
    });
    var Jf = C((l9, qf) => {
      "use strict";
      var Vf = __require("node:path"), BN = Gf(), pN = jl();
      function Hf(t, e) {
        let r = t.options.env || process.env, n = process.cwd(), A = t.options.cwd != null, i = A && process.chdir !== void 0 && !process.chdir.disabled;
        if (i) try {
          process.chdir(t.options.cwd);
        } catch {
        }
        let s;
        try {
          s = BN.sync(t.command, { path: r[pN({ env: r })], pathExt: e ? Vf.delimiter : void 0 });
        } catch {
        } finally {
          i && process.chdir(n);
        }
        return s && (s = Vf.resolve(A ? t.options.cwd : "", s)), s;
      }
      function mN(t) {
        return Hf(t) || Hf(t, true);
      }
      qf.exports = mN;
    });
    var Wf = C((u9, Xl) => {
      "use strict";
      var Zl = /([()\][%!^"`<>&|;, *?])/g;
      function yN(t) {
        return t = t.replace(Zl, "^$1"), t;
      }
      function wN(t, e) {
        return t = `${t}`, t = t.replace(/(\\*)"/g, '$1$1\\"'), t = t.replace(/(\\*)$/, "$1$1"), t = `"${t}"`, t = t.replace(Zl, "^$1"), e && (t = t.replace(Zl, "^$1")), t;
      }
      Xl.exports.command = yN;
      Xl.exports.argument = wN;
    });
    var jf = C((g9, _f) => {
      "use strict";
      _f.exports = /^#!(.*)/;
    });
    var Xf = C((E9, Zf) => {
      "use strict";
      var DN = jf();
      Zf.exports = (t = "") => {
        let e = t.match(DN);
        if (!e) return null;
        let [r, n] = e[0].replace(/#! ?/, "").split(" "), A = r.split("/").pop();
        return A === "env" ? n : n ? `${A} ${n}` : A;
      };
    });
    var Kf = C((d9, $f) => {
      "use strict";
      var $l = __require("node:fs"), RN = Xf();
      function SN(t) {
        let r = Buffer.alloc(150), n;
        try {
          n = $l.openSync(t, "r"), $l.readSync(n, r, 0, 150, 0), $l.closeSync(n);
        } catch {
        }
        return RN(r.toString());
      }
      $f.exports = SN;
    });
    var rQ = C((h9, tQ) => {
      "use strict";
      var bN = __require("node:path"), zf = Jf(), eQ = Wf(), NN = Kf(), FN = process.platform === "win32", TN = /\.(?:com|exe)$/i, xN = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;
      function UN(t) {
        t.file = zf(t);
        let e = t.file && NN(t.file);
        return e ? (t.args.unshift(t.file), t.command = e, zf(t)) : t.file;
      }
      function kN(t) {
        if (!FN) return t;
        let e = UN(t), r = !TN.test(e);
        if (t.options.forceShell || r) {
          let n = xN.test(e);
          t.command = bN.normalize(t.command), t.command = eQ.command(t.command), t.args = t.args.map((i) => eQ.argument(i, n));
          let A = [t.command].concat(t.args).join(" ");
          t.args = ["/d", "/s", "/c", `"${A}"`], t.command = process.env.comspec || "cmd.exe", t.options.windowsVerbatimArguments = true;
        }
        return t;
      }
      function MN(t, e, r) {
        e && !Array.isArray(e) && (r = e, e = null), e = e ? e.slice(0) : [], r = Object.assign({}, r);
        let n = { command: t, args: e, options: r, file: void 0, original: { command: t, args: e } };
        return r.shell ? n : kN(n);
      }
      tQ.exports = MN;
    });
    var iQ = C((f9, AQ) => {
      "use strict";
      var Kl = process.platform === "win32";
      function zl(t, e) {
        return Object.assign(new Error(`${e} ${t.command} ENOENT`), { code: "ENOENT", errno: "ENOENT", syscall: `${e} ${t.command}`, path: t.command, spawnargs: t.args });
      }
      function LN(t, e) {
        if (!Kl) return;
        let r = t.emit;
        t.emit = function(n, A) {
          if (n === "exit") {
            let i = nQ(A, e, "spawn");
            if (i) return r.call(t, "error", i);
          }
          return r.apply(t, arguments);
        };
      }
      function nQ(t, e) {
        return Kl && t === 1 && !e.file ? zl(e.original, "spawn") : null;
      }
      function vN(t, e) {
        return Kl && t === 1 && !e.file ? zl(e.original, "spawnSync") : null;
      }
      AQ.exports = { hookChildProcess: LN, verifyENOENT: nQ, verifyENOENTSync: vN, notFoundError: zl };
    });
    var aQ = C((Q9, jn) => {
      "use strict";
      var sQ = __require("node:child_process"), eu = rQ(), tu = iQ();
      function oQ(t, e, r) {
        let n = eu(t, e, r), A = sQ.spawn(n.command, n.args, n.options);
        return tu.hookChildProcess(A, n), A;
      }
      function PN(t, e, r) {
        let n = eu(t, e, r), A = sQ.spawnSync(n.command, n.args, n.options);
        return A.error = A.error || tu.verifyENOENTSync(A.status, n), A;
      }
      jn.exports = oQ;
      jn.exports.spawn = oQ;
      jn.exports.sync = PN;
      jn.exports._parse = eu;
      jn.exports._enoent = tu;
    });
    var lQ = C((C9, cQ) => {
      "use strict";
      cQ.exports = (t) => {
        let e = typeof t == "string" ? `
` : 10, r = typeof t == "string" ? "\r" : 13;
        return t[t.length - 1] === e && (t = t.slice(0, t.length - 1)), t[t.length - 1] === r && (t = t.slice(0, t.length - 1)), t;
      };
    });
    var EQ = C((I9, Bi) => {
      "use strict";
      var Ii = __require("node:path"), uQ = jl(), gQ = (t) => {
        t = { cwd: process.cwd(), path: process.env[uQ()], execPath: process.execPath, ...t };
        let e, r = Ii.resolve(t.cwd), n = [];
        for (; e !== r; ) n.push(Ii.join(r, "node_modules/.bin")), e = r, r = Ii.resolve(r, "..");
        let A = Ii.resolve(t.cwd, t.execPath, "..");
        return n.push(A), n.concat(t.path).join(Ii.delimiter);
      };
      Bi.exports = gQ;
      Bi.exports.default = gQ;
      Bi.exports.env = (t) => {
        t = { env: process.env, ...t };
        let e = { ...t.env }, r = uQ({ env: e });
        return t.path = e[r], e[r] = Bi.exports(t), e;
      };
    });
    var hQ = C((B9, ru) => {
      "use strict";
      var dQ = (t, e) => {
        for (let r of Reflect.ownKeys(e)) Object.defineProperty(t, r, Object.getOwnPropertyDescriptor(e, r));
        return t;
      };
      ru.exports = dQ;
      ru.exports.default = dQ;
    });
    var QQ = C((p9, wo) => {
      "use strict";
      var YN = hQ(), yo = /* @__PURE__ */ new WeakMap(), fQ = (t, e = {}) => {
        if (typeof t != "function") throw new TypeError("Expected a function");
        let r, n = 0, A = t.displayName || t.name || "<anonymous>", i = function(...s) {
          if (yo.set(i, ++n), n === 1) r = t.apply(this, s), t = null;
          else if (e.throw === true) throw new Error(`Function \`${A}\` can only be called once`);
          return r;
        };
        return YN(i, t), yo.set(i, n), i;
      };
      wo.exports = fQ;
      wo.exports.default = fQ;
      wo.exports.callCount = (t) => {
        if (!yo.has(t)) throw new Error(`The given function \`${t.name}\` is not wrapped by the \`onetime\` package`);
        return yo.get(t);
      };
    });
    var CQ = C((Do) => {
      "use strict";
      Object.defineProperty(Do, "__esModule", { value: true });
      Do.SIGNALS = void 0;
      var GN = [{ name: "SIGHUP", number: 1, action: "terminate", description: "Terminal closed", standard: "posix" }, { name: "SIGINT", number: 2, action: "terminate", description: "User interruption with CTRL-C", standard: "ansi" }, { name: "SIGQUIT", number: 3, action: "core", description: "User interruption with CTRL-\\", standard: "posix" }, { name: "SIGILL", number: 4, action: "core", description: "Invalid machine instruction", standard: "ansi" }, { name: "SIGTRAP", number: 5, action: "core", description: "Debugger breakpoint", standard: "posix" }, { name: "SIGABRT", number: 6, action: "core", description: "Aborted", standard: "ansi" }, { name: "SIGIOT", number: 6, action: "core", description: "Aborted", standard: "bsd" }, { name: "SIGBUS", number: 7, action: "core", description: "Bus error due to misaligned, non-existing address or paging error", standard: "bsd" }, { name: "SIGEMT", number: 7, action: "terminate", description: "Command should be emulated but is not implemented", standard: "other" }, { name: "SIGFPE", number: 8, action: "core", description: "Floating point arithmetic error", standard: "ansi" }, { name: "SIGKILL", number: 9, action: "terminate", description: "Forced termination", standard: "posix", forced: true }, { name: "SIGUSR1", number: 10, action: "terminate", description: "Application-specific signal", standard: "posix" }, { name: "SIGSEGV", number: 11, action: "core", description: "Segmentation fault", standard: "ansi" }, { name: "SIGUSR2", number: 12, action: "terminate", description: "Application-specific signal", standard: "posix" }, { name: "SIGPIPE", number: 13, action: "terminate", description: "Broken pipe or socket", standard: "posix" }, { name: "SIGALRM", number: 14, action: "terminate", description: "Timeout or timer", standard: "posix" }, { name: "SIGTERM", number: 15, action: "terminate", description: "Termination", standard: "ansi" }, { name: "SIGSTKFLT", number: 16, action: "terminate", description: "Stack is empty or overflowed", standard: "other" }, { name: "SIGCHLD", number: 17, action: "ignore", description: "Child process terminated, paused or unpaused", standard: "posix" }, { name: "SIGCLD", number: 17, action: "ignore", description: "Child process terminated, paused or unpaused", standard: "other" }, { name: "SIGCONT", number: 18, action: "unpause", description: "Unpaused", standard: "posix", forced: true }, { name: "SIGSTOP", number: 19, action: "pause", description: "Paused", standard: "posix", forced: true }, { name: "SIGTSTP", number: 20, action: "pause", description: 'Paused using CTRL-Z or "suspend"', standard: "posix" }, { name: "SIGTTIN", number: 21, action: "pause", description: "Background process cannot read terminal input", standard: "posix" }, { name: "SIGBREAK", number: 21, action: "terminate", description: "User interruption with CTRL-BREAK", standard: "other" }, { name: "SIGTTOU", number: 22, action: "pause", description: "Background process cannot write to terminal output", standard: "posix" }, { name: "SIGURG", number: 23, action: "ignore", description: "Socket received out-of-band data", standard: "bsd" }, { name: "SIGXCPU", number: 24, action: "core", description: "Process timed out", standard: "bsd" }, { name: "SIGXFSZ", number: 25, action: "core", description: "File too big", standard: "bsd" }, { name: "SIGVTALRM", number: 26, action: "terminate", description: "Timeout or timer", standard: "bsd" }, { name: "SIGPROF", number: 27, action: "terminate", description: "Timeout or timer", standard: "bsd" }, { name: "SIGWINCH", number: 28, action: "ignore", description: "Terminal window size changed", standard: "bsd" }, { name: "SIGIO", number: 29, action: "terminate", description: "I/O is available", standard: "other" }, { name: "SIGPOLL", number: 29, action: "terminate", description: "Watched event", standard: "other" }, { name: "SIGINFO", number: 29, action: "ignore", description: "Request for process information", standard: "other" }, { name: "SIGPWR", number: 30, action: "terminate", description: "Device running out of power", standard: "systemv" }, { name: "SIGSYS", number: 31, action: "core", description: "Invalid system call", standard: "other" }, { name: "SIGUNUSED", number: 31, action: "terminate", description: "Invalid system call", standard: "other" }];
      Do.SIGNALS = GN;
    });
    var nu = C((Zn) => {
      "use strict";
      Object.defineProperty(Zn, "__esModule", { value: true });
      Zn.SIGRTMAX = Zn.getRealtimeSignals = void 0;
      var ON = function() {
        let t = BQ - IQ + 1;
        return Array.from({ length: t }, VN);
      };
      Zn.getRealtimeSignals = ON;
      var VN = function(t, e) {
        return { name: `SIGRT${e + 1}`, number: IQ + e, action: "terminate", description: "Application-specific signal (realtime)", standard: "posix" };
      }, IQ = 34, BQ = 64;
      Zn.SIGRTMAX = BQ;
    });
    var pQ = C((Ro) => {
      "use strict";
      Object.defineProperty(Ro, "__esModule", { value: true });
      Ro.getSignals = void 0;
      var HN = __require("node:os"), qN = CQ(), JN = nu(), WN = function() {
        let t = (0, JN.getRealtimeSignals)();
        return [...qN.SIGNALS, ...t].map(_N);
      };
      Ro.getSignals = WN;
      var _N = function({ name: t, number: e, description: r, action: n, forced: A = false, standard: i }) {
        let { signals: { [t]: s } } = HN.constants, o = s !== void 0;
        return { name: t, number: o ? s : e, description: r, supported: o, action: n, forced: A, standard: i };
      };
    });
    var yQ = C((Xn) => {
      "use strict";
      Object.defineProperty(Xn, "__esModule", { value: true });
      Xn.signalsByNumber = Xn.signalsByName = void 0;
      var jN = __require("node:os"), mQ = pQ(), ZN = nu(), XN = function() {
        return (0, mQ.getSignals)().reduce($N, {});
      }, $N = function(t, { name: e, number: r, description: n, supported: A, action: i, forced: s, standard: o }) {
        return { ...t, [e]: { name: e, number: r, description: n, supported: A, action: i, forced: s, standard: o } };
      }, KN = XN();
      Xn.signalsByName = KN;
      var zN = function() {
        let t = (0, mQ.getSignals)(), e = ZN.SIGRTMAX + 1, r = Array.from({ length: e }, (n, A) => eF(A, t));
        return Object.assign({}, ...r);
      }, eF = function(t, e) {
        let r = tF(t, e);
        if (r === void 0) return {};
        let { name: n, description: A, supported: i, action: s, forced: o, standard: a } = r;
        return { [t]: { name: n, number: t, description: A, supported: i, action: s, forced: o, standard: a } };
      }, tF = function(t, e) {
        let r = e.find(({ name: n }) => jN.constants.signals[n] === t);
        return r !== void 0 ? r : e.find((n) => n.number === t);
      }, rF = zN();
      Xn.signalsByNumber = rF;
    });
    var DQ = C((R9, wQ) => {
      "use strict";
      var { signalsByName: nF } = yQ(), AF = ({ timedOut: t, timeout: e, errorCode: r, signal: n, signalDescription: A, exitCode: i, isCanceled: s }) => t ? `timed out after ${e} milliseconds` : s ? "was canceled" : r !== void 0 ? `failed with ${r}` : n !== void 0 ? `was killed with ${n} (${A})` : i !== void 0 ? `failed with exit code ${i}` : "failed", iF = ({ stdout: t, stderr: e, all: r, error: n, signal: A, exitCode: i, command: s, escapedCommand: o, timedOut: a, isCanceled: c, killed: l, parsed: { options: { timeout: u } } }) => {
        i = i === null ? void 0 : i, A = A === null ? void 0 : A;
        let g = A === void 0 ? void 0 : nF[A].description, E = n && n.code, f = `Command ${AF({ timedOut: a, timeout: u, errorCode: E, signal: A, signalDescription: g, exitCode: i, isCanceled: c })}: ${s}`, B = Object.prototype.toString.call(n) === "[object Error]", Q = B ? `${f}
${n.message}` : f, I = [Q, e, t].filter(Boolean).join(`
`);
        return B ? (n.originalMessage = n.message, n.message = I) : n = new Error(I), n.shortMessage = Q, n.command = s, n.escapedCommand = o, n.exitCode = i, n.signal = A, n.signalDescription = g, n.stdout = t, n.stderr = e, r !== void 0 && (n.all = r), "bufferedData" in n && delete n.bufferedData, n.failed = true, n.timedOut = !!a, n.isCanceled = c, n.killed = l && !a, n;
      };
      wQ.exports = iF;
    });
    var SQ = C((S9, Au) => {
      "use strict";
      var So = ["stdin", "stdout", "stderr"], sF = (t) => So.some((e) => t[e] !== void 0), RQ = (t) => {
        if (!t) return;
        let { stdio: e } = t;
        if (e === void 0) return So.map((n) => t[n]);
        if (sF(t)) throw new Error(`It's not possible to provide \`stdio\` in combination with one of ${So.map((n) => `\`${n}\``).join(", ")}`);
        if (typeof e == "string") return e;
        if (!Array.isArray(e)) throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof e}\``);
        let r = Math.max(e.length, So.length);
        return Array.from({ length: r }, (n, A) => e[A]);
      };
      Au.exports = RQ;
      Au.exports.node = (t) => {
        let e = RQ(t);
        return e === "ipc" ? "ipc" : e === void 0 || typeof e == "string" ? [e, e, e, "ipc"] : e.includes("ipc") ? e : [...e, "ipc"];
      };
    });
    var bQ = C((b9, bo) => {
      "use strict";
      bo.exports = ["SIGABRT", "SIGALRM", "SIGHUP", "SIGINT", "SIGTERM"];
      process.platform !== "win32" && bo.exports.push("SIGVTALRM", "SIGXCPU", "SIGXFSZ", "SIGUSR2", "SIGTRAP", "SIGSYS", "SIGQUIT", "SIGIOT");
      process.platform === "linux" && bo.exports.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT", "SIGUNUSED");
    });
    var UQ = C((N9, zn) => {
      "use strict";
      var ue = global.process, on = function(t) {
        return t && typeof t == "object" && typeof t.removeListener == "function" && typeof t.emit == "function" && typeof t.reallyExit == "function" && typeof t.listeners == "function" && typeof t.kill == "function" && typeof t.pid == "number" && typeof t.on == "function";
      };
      on(ue) ? (NQ = __require("node:assert"), $n = bQ(), FQ = /^win/i.test(ue.platform), pi = __require("node:events"), typeof pi != "function" && (pi = pi.EventEmitter), ue.__signal_exit_emitter__ ? we = ue.__signal_exit_emitter__ : (we = ue.__signal_exit_emitter__ = new pi(), we.count = 0, we.emitted = {}), we.infinite || (we.setMaxListeners(1 / 0), we.infinite = true), zn.exports = function(t, e) {
        if (!on(global.process)) return function() {
        };
        NQ.equal(typeof t, "function", "a callback must be provided for exit handler"), Kn === false && iu();
        var r = "exit";
        e && e.alwaysLast && (r = "afterexit");
        var n = function() {
          we.removeListener(r, t), we.listeners("exit").length === 0 && we.listeners("afterexit").length === 0 && No();
        };
        return we.on(r, t), n;
      }, No = function() {
        !Kn || !on(global.process) || (Kn = false, $n.forEach(function(e) {
          try {
            ue.removeListener(e, Fo[e]);
          } catch {
          }
        }), ue.emit = To, ue.reallyExit = su, we.count -= 1);
      }, zn.exports.unload = No, an = function(e, r, n) {
        we.emitted[e] || (we.emitted[e] = true, we.emit(e, r, n));
      }, Fo = {}, $n.forEach(function(t) {
        Fo[t] = function() {
          if (on(global.process)) {
            var r = ue.listeners(t);
            r.length === we.count && (No(), an("exit", null, t), an("afterexit", null, t), FQ && t === "SIGHUP" && (t = "SIGINT"), ue.kill(ue.pid, t));
          }
        };
      }), zn.exports.signals = function() {
        return $n;
      }, Kn = false, iu = function() {
        Kn || !on(global.process) || (Kn = true, we.count += 1, $n = $n.filter(function(e) {
          try {
            return ue.on(e, Fo[e]), true;
          } catch {
            return false;
          }
        }), ue.emit = xQ, ue.reallyExit = TQ);
      }, zn.exports.load = iu, su = ue.reallyExit, TQ = function(e) {
        on(global.process) && (ue.exitCode = e || 0, an("exit", ue.exitCode, null), an("afterexit", ue.exitCode, null), su.call(ue, ue.exitCode));
      }, To = ue.emit, xQ = function(e, r) {
        if (e === "exit" && on(global.process)) {
          r !== void 0 && (ue.exitCode = r);
          var n = To.apply(this, arguments);
          return an("exit", ue.exitCode, null), an("afterexit", ue.exitCode, null), n;
        } else return To.apply(this, arguments);
      }) : zn.exports = function() {
        return function() {
        };
      };
      var NQ, $n, FQ, pi, we, No, an, Fo, Kn, iu, su, TQ, To, xQ;
    });
    var MQ = C((F9, kQ) => {
      "use strict";
      var oF = __require("node:os"), aF = UQ(), cF = 1e3 * 5, lF = (t, e = "SIGTERM", r = {}) => {
        let n = t(e);
        return uF(t, e, r, n), n;
      }, uF = (t, e, r, n) => {
        if (!gF(e, r, n)) return;
        let A = dF(r), i = setTimeout(() => {
          t("SIGKILL");
        }, A);
        i.unref && i.unref();
      }, gF = (t, { forceKillAfterTimeout: e }, r) => EF(t) && e !== false && r, EF = (t) => t === oF.constants.signals.SIGTERM || typeof t == "string" && t.toUpperCase() === "SIGTERM", dF = ({ forceKillAfterTimeout: t = true }) => {
        if (t === true) return cF;
        if (!Number.isFinite(t) || t < 0) throw new TypeError(`Expected the \`forceKillAfterTimeout\` option to be a non-negative integer, got \`${t}\` (${typeof t})`);
        return t;
      }, hF = (t, e) => {
        t.kill() && (e.isCanceled = true);
      }, fF = (t, e, r) => {
        t.kill(e), r(Object.assign(new Error("Timed out"), { timedOut: true, signal: e }));
      }, QF = (t, { timeout: e, killSignal: r = "SIGTERM" }, n) => {
        if (e === 0 || e === void 0) return n;
        let A, i = new Promise((o, a) => {
          A = setTimeout(() => {
            fF(t, r, a);
          }, e);
        }), s = n.finally(() => {
          clearTimeout(A);
        });
        return Promise.race([i, s]);
      }, CF = ({ timeout: t }) => {
        if (t !== void 0 && (!Number.isFinite(t) || t < 0)) throw new TypeError(`Expected the \`timeout\` option to be a non-negative integer, got \`${t}\` (${typeof t})`);
      }, IF = async (t, { cleanup: e, detached: r }, n) => {
        if (!e || r) return n;
        let A = aF(() => {
          t.kill();
        });
        return n.finally(() => {
          A();
        });
      };
      kQ.exports = { spawnedKill: lF, spawnedCancel: hF, setupTimeout: QF, validateTimeout: CF, setExitHandler: IF };
    });
    var vQ = C((T9, LQ) => {
      "use strict";
      var Ut = (t) => t !== null && typeof t == "object" && typeof t.pipe == "function";
      Ut.writable = (t) => Ut(t) && t.writable !== false && typeof t._write == "function" && typeof t._writableState == "object";
      Ut.readable = (t) => Ut(t) && t.readable !== false && typeof t._read == "function" && typeof t._readableState == "object";
      Ut.duplex = (t) => Ut.writable(t) && Ut.readable(t);
      Ut.transform = (t) => Ut.duplex(t) && typeof t._transform == "function";
      LQ.exports = Ut;
    });
    var YQ = C((x9, PQ) => {
      "use strict";
      var { PassThrough: BF } = __require("node:stream");
      PQ.exports = (t) => {
        t = { ...t };
        let { array: e } = t, { encoding: r } = t, n = r === "buffer", A = false;
        e ? A = !(r || n) : r = r || "utf8", n && (r = null);
        let i = new BF({ objectMode: A });
        r && i.setEncoding(r);
        let s = 0, o = [];
        return i.on("data", (a) => {
          o.push(a), A ? s = o.length : s += a.length;
        }), i.getBufferedValue = () => e ? o : n ? Buffer.concat(o, s) : o.join(""), i.getBufferedLength = () => s, i;
      };
    });
    var au = C((U9, mi) => {
      "use strict";
      var { constants: pF } = __require("node:buffer"), mF = __require("node:stream"), { promisify: yF } = __require("node:util"), wF = YQ(), DF = yF(mF.pipeline), xo = class extends Error {
        constructor() {
          super("maxBuffer exceeded"), this.name = "MaxBufferError";
        }
      };
      async function ou(t, e) {
        if (!t) throw new Error("Expected a stream");
        e = { maxBuffer: 1 / 0, ...e };
        let { maxBuffer: r } = e, n = wF(e);
        return await new Promise((A, i) => {
          let s = (o) => {
            o && n.getBufferedLength() <= pF.MAX_LENGTH && (o.bufferedData = n.getBufferedValue()), i(o);
          };
          (async () => {
            try {
              await DF(t, n), A();
            } catch (o) {
              s(o);
            }
          })(), n.on("data", () => {
            n.getBufferedLength() > r && s(new xo());
          });
        }), n.getBufferedValue();
      }
      mi.exports = ou;
      mi.exports.buffer = (t, e) => ou(t, { ...e, encoding: "buffer" });
      mi.exports.array = (t, e) => ou(t, { ...e, array: true });
      mi.exports.MaxBufferError = xo;
    });
    var OQ = C((k9, GQ) => {
      "use strict";
      var { PassThrough: RF } = __require("node:stream");
      GQ.exports = function() {
        var t = [], e = new RF({ objectMode: true });
        return e.setMaxListeners(0), e.add = r, e.isEmpty = n, e.on("unpipe", A), Array.prototype.slice.call(arguments).forEach(r), e;
        function r(i) {
          return Array.isArray(i) ? (i.forEach(r), this) : (t.push(i), i.once("end", A.bind(null, i)), i.once("error", e.emit.bind(e, "error")), i.pipe(e, { end: false }), this);
        }
        function n() {
          return t.length == 0;
        }
        function A(i) {
          t = t.filter(function(s) {
            return s !== i;
          }), !t.length && e.readable && e.end();
        }
      };
    });
    var JQ = C((M9, qQ) => {
      "use strict";
      var HQ = vQ(), VQ = au(), SF = OQ(), bF = (t, e) => {
        e === void 0 || t.stdin === void 0 || (HQ(e) ? e.pipe(t.stdin) : t.stdin.end(e));
      }, NF = (t, { all: e }) => {
        if (!e || !t.stdout && !t.stderr) return;
        let r = SF();
        return t.stdout && r.add(t.stdout), t.stderr && r.add(t.stderr), r;
      }, cu = async (t, e) => {
        if (t) {
          t.destroy();
          try {
            return await e;
          } catch (r) {
            return r.bufferedData;
          }
        }
      }, lu = (t, { encoding: e, buffer: r, maxBuffer: n }) => {
        if (!(!t || !r)) return e ? VQ(t, { encoding: e, maxBuffer: n }) : VQ.buffer(t, { maxBuffer: n });
      }, FF = async ({ stdout: t, stderr: e, all: r }, { encoding: n, buffer: A, maxBuffer: i }, s) => {
        let o = lu(t, { encoding: n, buffer: A, maxBuffer: i }), a = lu(e, { encoding: n, buffer: A, maxBuffer: i }), c = lu(r, { encoding: n, buffer: A, maxBuffer: i * 2 });
        try {
          return await Promise.all([s, o, a, c]);
        } catch (l) {
          return Promise.all([{ error: l, signal: l.signal, timedOut: l.timedOut }, cu(t, o), cu(e, a), cu(r, c)]);
        }
      }, TF = ({ input: t }) => {
        if (HQ(t)) throw new TypeError("The `input` option cannot be a stream in sync mode");
      };
      qQ.exports = { handleInput: bF, makeAllStream: NF, getSpawnedResult: FF, validateInputSync: TF };
    });
    var _Q = C((L9, WQ) => {
      "use strict";
      var xF = (async () => {
      })().constructor.prototype, UF = ["then", "catch", "finally"].map((t) => [t, Reflect.getOwnPropertyDescriptor(xF, t)]), kF = (t, e) => {
        for (let [r, n] of UF) {
          let A = typeof e == "function" ? (...i) => Reflect.apply(n.value, e(), i) : n.value.bind(e);
          Reflect.defineProperty(t, r, { ...n, value: A });
        }
        return t;
      }, MF = (t) => new Promise((e, r) => {
        t.on("exit", (n, A) => {
          e({ exitCode: n, signal: A });
        }), t.on("error", (n) => {
          r(n);
        }), t.stdin && t.stdin.on("error", (n) => {
          r(n);
        });
      });
      WQ.exports = { mergePromise: kF, getSpawnedPromise: MF };
    });
    var XQ = C((v9, ZQ) => {
      "use strict";
      var jQ = (t, e = []) => Array.isArray(e) ? [t, ...e] : [t], LF = /^[\w.-]+$/, vF = /"/g, PF = (t) => typeof t != "string" || LF.test(t) ? t : `"${t.replace(vF, '\\"')}"`, YF = (t, e) => jQ(t, e).join(" "), GF = (t, e) => jQ(t, e).map((r) => PF(r)).join(" "), OF = / +/g, VF = (t) => {
        let e = [];
        for (let r of t.trim().split(OF)) {
          let n = e[e.length - 1];
          n && n.endsWith("\\") ? e[e.length - 1] = `${n.slice(0, -1)} ${r}` : e.push(r);
        }
        return e;
      };
      ZQ.exports = { joinCommand: YF, getEscapedCommand: GF, parseCommand: VF };
    });
    var nC = C((P9, eA) => {
      "use strict";
      var HF = __require("node:path"), uu = __require("node:child_process"), qF = aQ(), JF = lQ(), WF = EQ(), _F = QQ(), Uo = DQ(), KQ = SQ(), { spawnedKill: jF, spawnedCancel: ZF, setupTimeout: XF, validateTimeout: $F, setExitHandler: KF } = MQ(), { handleInput: zF, getSpawnedResult: eT, makeAllStream: tT, validateInputSync: rT } = JQ(), { mergePromise: $Q, getSpawnedPromise: nT } = _Q(), { joinCommand: zQ, parseCommand: eC, getEscapedCommand: tC } = XQ(), AT = 1e3 * 1e3 * 100, iT = ({ env: t, extendEnv: e, preferLocal: r, localDir: n, execPath: A }) => {
        let i = e ? { ...process.env, ...t } : t;
        return r ? WF.env({ env: i, cwd: n, execPath: A }) : i;
      }, rC = (t, e, r = {}) => {
        let n = qF._parse(t, e, r);
        return t = n.command, e = n.args, r = n.options, r = { maxBuffer: AT, buffer: true, stripFinalNewline: true, extendEnv: true, preferLocal: false, localDir: r.cwd || process.cwd(), execPath: process.execPath, encoding: "utf8", reject: true, cleanup: true, all: false, windowsHide: true, ...r }, r.env = iT(r), r.stdio = KQ(r), process.platform === "win32" && HF.basename(t, ".exe") === "cmd" && e.unshift("/q"), { file: t, args: e, options: r, parsed: n };
      }, yi = (t, e, r) => typeof e != "string" && !Buffer.isBuffer(e) ? r === void 0 ? void 0 : "" : t.stripFinalNewline ? JF(e) : e, ko = (t, e, r) => {
        let n = rC(t, e, r), A = zQ(t, e), i = tC(t, e);
        $F(n.options);
        let s;
        try {
          s = uu.spawn(n.file, n.args, n.options);
        } catch (E) {
          let h = new uu.ChildProcess(), f = Promise.reject(Uo({ error: E, stdout: "", stderr: "", all: "", command: A, escapedCommand: i, parsed: n, timedOut: false, isCanceled: false, killed: false }));
          return $Q(h, f);
        }
        let o = nT(s), a = XF(s, n.options, o), c = KF(s, n.options, a), l = { isCanceled: false };
        s.kill = jF.bind(null, s.kill.bind(s)), s.cancel = ZF.bind(null, s, l);
        let g = _F(async () => {
          let [{ error: E, exitCode: h, signal: f, timedOut: B }, Q, I, p] = await eT(s, n.options, c), w = yi(n.options, Q), D = yi(n.options, I), v = yi(n.options, p);
          if (E || h !== 0 || f !== null) {
            let $ = Uo({ error: E, exitCode: h, signal: f, stdout: w, stderr: D, all: v, command: A, escapedCommand: i, parsed: n, timedOut: B, isCanceled: l.isCanceled, killed: s.killed });
            if (!n.options.reject) return $;
            throw $;
          }
          return { command: A, escapedCommand: i, exitCode: 0, stdout: w, stderr: D, all: v, failed: false, timedOut: false, isCanceled: false, killed: false };
        });
        return zF(s, n.options.input), s.all = tT(s, n.options), $Q(s, g);
      };
      eA.exports = ko;
      eA.exports.sync = (t, e, r) => {
        let n = rC(t, e, r), A = zQ(t, e), i = tC(t, e);
        rT(n.options);
        let s;
        try {
          s = uu.spawnSync(n.file, n.args, n.options);
        } catch (c) {
          throw Uo({ error: c, stdout: "", stderr: "", all: "", command: A, escapedCommand: i, parsed: n, timedOut: false, isCanceled: false, killed: false });
        }
        let o = yi(n.options, s.stdout, s.error), a = yi(n.options, s.stderr, s.error);
        if (s.error || s.status !== 0 || s.signal !== null) {
          let c = Uo({ stdout: o, stderr: a, error: s.error, signal: s.signal, exitCode: s.status, command: A, escapedCommand: i, parsed: n, timedOut: s.error && s.error.code === "ETIMEDOUT", isCanceled: false, killed: s.signal !== null });
          if (!n.options.reject) return c;
          throw c;
        }
        return { command: A, escapedCommand: i, exitCode: 0, stdout: o, stderr: a, failed: false, timedOut: false, isCanceled: false, killed: false };
      };
      eA.exports.command = (t, e) => {
        let [r, ...n] = eC(t);
        return ko(r, n, e);
      };
      eA.exports.commandSync = (t, e) => {
        let [r, ...n] = eC(t);
        return ko.sync(r, n, e);
      };
      eA.exports.node = (t, e, r = {}) => {
        e && !Array.isArray(e) && typeof e == "object" && (r = e, e = []);
        let n = KQ.node(r), A = process.execArgv.filter((o) => !o.startsWith("--inspect")), { nodePath: i = process.execPath, nodeOptions: s = A } = r;
        return ko(i, [...s, t, ...Array.isArray(e) ? e : []], { ...r, stdin: void 0, stdout: void 0, stderr: void 0, stdio: n, shell: false });
      };
    });
    var AC = C((J9, sT) => {
      sT.exports = { name: "@prisma/internals", version: "6.12.0", description: "This package is intended for Prisma's internal use", main: "dist/index.js", types: "dist/index.d.ts", repository: { type: "git", url: "https://github.com/prisma/prisma.git", directory: "packages/internals" }, homepage: "https://www.prisma.io", author: "Tim Suchanek <suchanek@prisma.io>", bugs: "https://github.com/prisma/prisma/issues", license: "Apache-2.0", scripts: { dev: "DEV=true tsx helpers/build.ts", build: "tsx helpers/build.ts", test: "dotenv -e ../../.db.env -- jest --silent", prepublishOnly: "pnpm run build" }, files: ["README.md", "dist", "!**/libquery_engine*", "!dist/get-generators/engines/*", "scripts"], devDependencies: { "@babel/helper-validator-identifier": "7.25.9", "@opentelemetry/api": "1.9.0", "@swc/core": "1.11.5", "@swc/jest": "0.2.37", "@types/babel__helper-validator-identifier": "7.15.2", "@types/jest": "29.5.14", "@types/node": "18.19.76", "@types/resolve": "1.20.6", archiver: "6.0.2", "checkpoint-client": "1.1.33", "cli-truncate": "4.0.0", dotenv: "16.5.0", esbuild: "0.25.5", "escape-string-regexp": "5.0.0", execa: "5.1.1", "fast-glob": "3.3.3", "find-up": "7.0.0", "fp-ts": "2.16.9", "fs-extra": "11.3.0", "fs-jetpack": "5.1.0", "global-dirs": "4.0.0", globby: "11.1.0", "identifier-regex": "1.0.0", "indent-string": "4.0.0", "is-windows": "1.0.2", "is-wsl": "3.1.0", jest: "29.7.0", "jest-junit": "16.0.0", kleur: "4.1.5", "mock-stdin": "1.0.0", "new-github-issue-url": "0.2.1", "node-fetch": "3.3.2", "npm-packlist": "5.1.3", open: "7.4.2", "p-map": "4.0.0", "read-package-up": "11.0.0", resolve: "1.22.10", "string-width": "7.2.0", "strip-ansi": "6.0.1", "strip-indent": "4.0.0", "temp-dir": "2.0.0", tempy: "1.0.1", "terminal-link": "4.0.0", tmp: "0.2.3", "ts-node": "10.9.2", "ts-pattern": "5.6.2", "ts-toolbelt": "9.6.0", typescript: "5.4.5", yarn: "1.22.22" }, dependencies: { "@prisma/config": "workspace:*", "@prisma/debug": "workspace:*", "@prisma/dmmf": "workspace:*", "@prisma/driver-adapter-utils": "workspace:*", "@prisma/engines": "workspace:*", "@prisma/fetch-engine": "workspace:*", "@prisma/generator": "workspace:*", "@prisma/generator-helper": "workspace:*", "@prisma/get-platform": "workspace:*", "@prisma/prisma-schema-wasm": "6.12.0-15.8047c96bbd92db98a2abc7c9323ce77c02c89dbc", "@prisma/schema-engine-wasm": "6.12.0-15.8047c96bbd92db98a2abc7c9323ce77c02c89dbc", "@prisma/schema-files-loader": "workspace:*", arg: "5.0.2", prompts: "2.4.2" }, peerDependencies: { typescript: ">=5.1.0" }, peerDependenciesMeta: { typescript: { optional: true } }, sideEffects: false };
    });
    var du = C((j9, iC) => {
      "use strict";
      var lT = __require("node:fs"), uT = __require("node:os"), Eu = Symbol.for("__RESOLVED_TEMP_DIRECTORY__");
      global[Eu] || Object.defineProperty(global, Eu, { value: lT.realpathSync(uT.tmpdir()) });
      iC.exports = global[Eu];
    });
    var oC = C((Z9, sC) => {
      "use strict";
      function lt(t, e) {
        typeof e == "boolean" && (e = { forever: e }), this._originalTimeouts = JSON.parse(JSON.stringify(t)), this._timeouts = t, this._options = e || {}, this._maxRetryTime = e && e.maxRetryTime || 1 / 0, this._fn = null, this._errors = [], this._attempts = 1, this._operationTimeout = null, this._operationTimeoutCb = null, this._timeout = null, this._operationStart = null, this._timer = null, this._options.forever && (this._cachedTimeouts = this._timeouts.slice(0));
      }
      sC.exports = lt;
      lt.prototype.reset = function() {
        this._attempts = 1, this._timeouts = this._originalTimeouts.slice(0);
      };
      lt.prototype.stop = function() {
        this._timeout && clearTimeout(this._timeout), this._timer && clearTimeout(this._timer), this._timeouts = [], this._cachedTimeouts = null;
      };
      lt.prototype.retry = function(t) {
        if (this._timeout && clearTimeout(this._timeout), !t) return false;
        var e = (/* @__PURE__ */ new Date()).getTime();
        if (t && e - this._operationStart >= this._maxRetryTime) return this._errors.push(t), this._errors.unshift(new Error("RetryOperation timeout occurred")), false;
        this._errors.push(t);
        var r = this._timeouts.shift();
        if (r === void 0) if (this._cachedTimeouts) this._errors.splice(0, this._errors.length - 1), r = this._cachedTimeouts.slice(-1);
        else return false;
        var n = this;
        return this._timer = setTimeout(function() {
          n._attempts++, n._operationTimeoutCb && (n._timeout = setTimeout(function() {
            n._operationTimeoutCb(n._attempts);
          }, n._operationTimeout), n._options.unref && n._timeout.unref()), n._fn(n._attempts);
        }, r), this._options.unref && this._timer.unref(), true;
      };
      lt.prototype.attempt = function(t, e) {
        this._fn = t, e && (e.timeout && (this._operationTimeout = e.timeout), e.cb && (this._operationTimeoutCb = e.cb));
        var r = this;
        this._operationTimeoutCb && (this._timeout = setTimeout(function() {
          r._operationTimeoutCb();
        }, r._operationTimeout)), this._operationStart = (/* @__PURE__ */ new Date()).getTime(), this._fn(this._attempts);
      };
      lt.prototype.try = function(t) {
        console.log("Using RetryOperation.try() is deprecated"), this.attempt(t);
      };
      lt.prototype.start = function(t) {
        console.log("Using RetryOperation.start() is deprecated"), this.attempt(t);
      };
      lt.prototype.start = lt.prototype.try;
      lt.prototype.errors = function() {
        return this._errors;
      };
      lt.prototype.attempts = function() {
        return this._attempts;
      };
      lt.prototype.mainError = function() {
        if (this._errors.length === 0) return null;
        for (var t = {}, e = null, r = 0, n = 0; n < this._errors.length; n++) {
          var A = this._errors[n], i = A.message, s = (t[i] || 0) + 1;
          t[i] = s, s >= r && (e = A, r = s);
        }
        return e;
      };
    });
    var aC = C((cn) => {
      "use strict";
      var gT = oC();
      cn.operation = function(t) {
        var e = cn.timeouts(t);
        return new gT(e, { forever: t && (t.forever || t.retries === 1 / 0), unref: t && t.unref, maxRetryTime: t && t.maxRetryTime });
      };
      cn.timeouts = function(t) {
        if (t instanceof Array) return [].concat(t);
        var e = { retries: 10, factor: 2, minTimeout: 1 * 1e3, maxTimeout: 1 / 0, randomize: false };
        for (var r in t) e[r] = t[r];
        if (e.minTimeout > e.maxTimeout) throw new Error("minTimeout is greater than maxTimeout");
        for (var n = [], A = 0; A < e.retries; A++) n.push(this.createTimeout(A, e));
        return t && t.forever && !n.length && n.push(this.createTimeout(A, e)), n.sort(function(i, s) {
          return i - s;
        }), n;
      };
      cn.createTimeout = function(t, e) {
        var r = e.randomize ? Math.random() + 1 : 1, n = Math.round(r * Math.max(e.minTimeout, 1) * Math.pow(e.factor, t));
        return n = Math.min(n, e.maxTimeout), n;
      };
      cn.wrap = function(t, e, r) {
        if (e instanceof Array && (r = e, e = null), !r) {
          r = [];
          for (var n in t) typeof t[n] == "function" && r.push(n);
        }
        for (var A = 0; A < r.length; A++) {
          var i = r[A], s = t[i];
          t[i] = function(a) {
            var c = cn.operation(e), l = Array.prototype.slice.call(arguments, 1), u = l.pop();
            l.push(function(g) {
              c.retry(g) || (g && (arguments[0] = c.mainError()), u.apply(this, arguments));
            }), c.attempt(function() {
              a.apply(t, l);
            });
          }.bind(t, s), t[i].options = e;
        }
      };
    });
    var lC = C(($9, cC) => {
      "use strict";
      cC.exports = aC();
    });
    var gC = C((K9, Lo) => {
      "use strict";
      var ET = lC(), dT = ["Failed to fetch", "NetworkError when attempting to fetch resource.", "The Internet connection appears to be offline.", "Network request failed"], Mo = class extends Error {
        constructor(e) {
          super(), e instanceof Error ? (this.originalError = e, { message: e } = e) : (this.originalError = new Error(e), this.originalError.stack = this.stack), this.name = "AbortError", this.message = e;
        }
      }, hT = (t, e, r) => {
        let n = r.retries - (e - 1);
        return t.attemptNumber = e, t.retriesLeft = n, t;
      }, fT = (t) => dT.includes(t), uC = (t, e) => new Promise((r, n) => {
        e = { onFailedAttempt: () => {
        }, retries: 10, ...e };
        let A = ET.operation(e);
        A.attempt(async (i) => {
          try {
            r(await t(i));
          } catch (s) {
            if (!(s instanceof Error)) {
              n(new TypeError(`Non-error was thrown: "${s}". You should only throw errors.`));
              return;
            }
            if (s instanceof Mo) A.stop(), n(s.originalError);
            else if (s instanceof TypeError && !fT(s.message)) A.stop(), n(s);
            else {
              hT(s, i, e);
              try {
                await e.onFailedAttempt(s);
              } catch (o) {
                n(o);
                return;
              }
              A.retry(s) || n(A.mainError());
            }
          }
        });
      });
      Lo.exports = uC;
      Lo.exports.default = uC;
      Lo.exports.AbortError = Mo;
    });
    var hu = C((nj, QT) => {
      QT.exports = { name: "@prisma/engines-version", version: "6.12.0-15.8047c96bbd92db98a2abc7c9323ce77c02c89dbc", main: "index.js", types: "index.d.ts", license: "Apache-2.0", author: "Tim Suchanek <suchanek@prisma.io>", prisma: { enginesVersion: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc" }, repository: { type: "git", url: "https://github.com/prisma/engines-wrapper.git", directory: "packages/engines-version" }, devDependencies: { "@types/node": "18.19.76", typescript: "4.9.5" }, files: ["index.js", "index.d.ts"], scripts: { build: "tsc -d" } };
    });
    var Po = C((vo) => {
      "use strict";
      Object.defineProperty(vo, "__esModule", { value: true });
      vo.enginesVersion = void 0;
      vo.enginesVersion = hu().prisma.enginesVersion;
    });
    var fC = C((Ej, hC) => {
      "use strict";
      hC.exports = (t) => {
        let e = t.match(/^[ \t]*(?=\S)/gm);
        return e ? e.reduce((r, n) => Math.min(r, n.length), 1 / 0) : 0;
      };
    });
    var Bu = C((fj, IC) => {
      "use strict";
      IC.exports = (t, e = 1, r) => {
        if (r = { indent: " ", includeEmptyLines: false, ...r }, typeof t != "string") throw new TypeError(`Expected \`input\` to be a \`string\`, got \`${typeof t}\``);
        if (typeof e != "number") throw new TypeError(`Expected \`count\` to be a \`number\`, got \`${typeof e}\``);
        if (typeof r.indent != "string") throw new TypeError(`Expected \`options.indent\` to be a \`string\`, got \`${typeof r.indent}\``);
        if (e === 0) return t;
        let n = r.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;
        return t.replace(n, r.indent.repeat(e));
      };
    });
    var yC = C((Ij, mC) => {
      "use strict";
      mC.exports = ({ onlyFirst: t = false } = {}) => {
        let e = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");
        return new RegExp(e, t ? void 0 : "g");
      };
    });
    var wu = C((Bj, wC) => {
      "use strict";
      var ST = yC();
      wC.exports = (t) => typeof t == "string" ? t.replace(ST(), "") : t;
    });
    var RC = C((wj, FT) => {
      FT.exports = { name: "dotenv", version: "16.5.0", description: "Loads environment variables from .env file", main: "lib/main.js", types: "lib/main.d.ts", exports: { ".": { types: "./lib/main.d.ts", require: "./lib/main.js", default: "./lib/main.js" }, "./config": "./config.js", "./config.js": "./config.js", "./lib/env-options": "./lib/env-options.js", "./lib/env-options.js": "./lib/env-options.js", "./lib/cli-options": "./lib/cli-options.js", "./lib/cli-options.js": "./lib/cli-options.js", "./package.json": "./package.json" }, scripts: { "dts-check": "tsc --project tests/types/tsconfig.json", lint: "standard", pretest: "npm run lint && npm run dts-check", test: "tap run --allow-empty-coverage --disable-coverage --timeout=60000", "test:coverage": "tap run --show-full-coverage --timeout=60000 --coverage-report=lcov", prerelease: "npm test", release: "standard-version" }, repository: { type: "git", url: "git://github.com/motdotla/dotenv.git" }, homepage: "https://github.com/motdotla/dotenv#readme", funding: "https://dotenvx.com", keywords: ["dotenv", "env", ".env", "environment", "variables", "config", "settings"], readmeFilename: "README.md", license: "BSD-2-Clause", devDependencies: { "@types/node": "^18.11.3", decache: "^4.6.2", sinon: "^14.0.1", standard: "^17.0.0", "standard-version": "^9.5.0", tap: "^19.2.0", typescript: "^4.8.4" }, engines: { node: ">=12" }, browser: { fs: false } };
    });
    var TC = C((Dj, or) => {
      "use strict";
      var Ru = __require("node:fs"), Su = __require("node:path"), TT = __require("node:os"), xT = __require("node:crypto"), UT = RC(), bC = UT.version, kT = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
      function MT(t) {
        let e = {}, r = t.toString();
        r = r.replace(/\r\n?/mg, `
`);
        let n;
        for (; (n = kT.exec(r)) != null; ) {
          let A = n[1], i = n[2] || "";
          i = i.trim();
          let s = i[0];
          i = i.replace(/^(['"`])([\s\S]*)\1$/mg, "$2"), s === '"' && (i = i.replace(/\\n/g, `
`), i = i.replace(/\\r/g, "\r")), e[A] = i;
        }
        return e;
      }
      function LT(t) {
        let e = FC(t), r = Be.configDotenv({ path: e });
        if (!r.parsed) {
          let s = new Error(`MISSING_DATA: Cannot parse ${e} for an unknown reason`);
          throw s.code = "MISSING_DATA", s;
        }
        let n = NC(t).split(","), A = n.length, i;
        for (let s = 0; s < A; s++) try {
          let o = n[s].trim(), a = PT(r, o);
          i = Be.decrypt(a.ciphertext, a.key);
          break;
        } catch (o) {
          if (s + 1 >= A) throw o;
        }
        return Be.parse(i);
      }
      function vT(t) {
        console.log(`[dotenv@${bC}][WARN] ${t}`);
      }
      function bi(t) {
        console.log(`[dotenv@${bC}][DEBUG] ${t}`);
      }
      function NC(t) {
        return t && t.DOTENV_KEY && t.DOTENV_KEY.length > 0 ? t.DOTENV_KEY : process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0 ? process.env.DOTENV_KEY : "";
      }
      function PT(t, e) {
        let r;
        try {
          r = new URL(e);
        } catch (o) {
          if (o.code === "ERR_INVALID_URL") {
            let a = new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");
            throw a.code = "INVALID_DOTENV_KEY", a;
          }
          throw o;
        }
        let n = r.password;
        if (!n) {
          let o = new Error("INVALID_DOTENV_KEY: Missing key part");
          throw o.code = "INVALID_DOTENV_KEY", o;
        }
        let A = r.searchParams.get("environment");
        if (!A) {
          let o = new Error("INVALID_DOTENV_KEY: Missing environment part");
          throw o.code = "INVALID_DOTENV_KEY", o;
        }
        let i = `DOTENV_VAULT_${A.toUpperCase()}`, s = t.parsed[i];
        if (!s) {
          let o = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${i} in your .env.vault file.`);
          throw o.code = "NOT_FOUND_DOTENV_ENVIRONMENT", o;
        }
        return { ciphertext: s, key: n };
      }
      function FC(t) {
        let e = null;
        if (t && t.path && t.path.length > 0) if (Array.isArray(t.path)) for (let r of t.path) Ru.existsSync(r) && (e = r.endsWith(".vault") ? r : `${r}.vault`);
        else e = t.path.endsWith(".vault") ? t.path : `${t.path}.vault`;
        else e = Su.resolve(process.cwd(), ".env.vault");
        return Ru.existsSync(e) ? e : null;
      }
      function SC(t) {
        return t[0] === "~" ? Su.join(TT.homedir(), t.slice(1)) : t;
      }
      function YT(t) {
        !!(t && t.debug) && bi("Loading env from encrypted .env.vault");
        let r = Be._parseVault(t), n = process.env;
        return t && t.processEnv != null && (n = t.processEnv), Be.populate(n, r, t), { parsed: r };
      }
      function GT(t) {
        let e = Su.resolve(process.cwd(), ".env"), r = "utf8", n = !!(t && t.debug);
        t && t.encoding ? r = t.encoding : n && bi("No encoding is specified. UTF-8 is used by default");
        let A = [e];
        if (t && t.path) if (!Array.isArray(t.path)) A = [SC(t.path)];
        else {
          A = [];
          for (let a of t.path) A.push(SC(a));
        }
        let i, s = {};
        for (let a of A) try {
          let c = Be.parse(Ru.readFileSync(a, { encoding: r }));
          Be.populate(s, c, t);
        } catch (c) {
          n && bi(`Failed to load ${a} ${c.message}`), i = c;
        }
        let o = process.env;
        return t && t.processEnv != null && (o = t.processEnv), Be.populate(o, s, t), i ? { parsed: s, error: i } : { parsed: s };
      }
      function OT(t) {
        if (NC(t).length === 0) return Be.configDotenv(t);
        let e = FC(t);
        return e ? Be._configVault(t) : (vT(`You set DOTENV_KEY but you are missing a .env.vault file at ${e}. Did you forget to build it?`), Be.configDotenv(t));
      }
      function VT(t, e) {
        let r = Buffer.from(e.slice(-64), "hex"), n = Buffer.from(t, "base64"), A = n.subarray(0, 12), i = n.subarray(-16);
        n = n.subarray(12, -16);
        try {
          let s = xT.createDecipheriv("aes-256-gcm", r, A);
          return s.setAuthTag(i), `${s.update(n)}${s.final()}`;
        } catch (s) {
          let o = s instanceof RangeError, a = s.message === "Invalid key length", c = s.message === "Unsupported state or unable to authenticate data";
          if (o || a) {
            let l = new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");
            throw l.code = "INVALID_DOTENV_KEY", l;
          } else if (c) {
            let l = new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");
            throw l.code = "DECRYPTION_FAILED", l;
          } else throw s;
        }
      }
      function HT(t, e, r = {}) {
        let n = !!(r && r.debug), A = !!(r && r.override);
        if (typeof e != "object") {
          let i = new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");
          throw i.code = "OBJECT_REQUIRED", i;
        }
        for (let i of Object.keys(e)) Object.prototype.hasOwnProperty.call(t, i) ? (A === true && (t[i] = e[i]), n && bi(A === true ? `"${i}" is already defined and WAS overwritten` : `"${i}" is already defined and was NOT overwritten`)) : t[i] = e[i];
      }
      var Be = { configDotenv: GT, _configVault: YT, _parseVault: LT, config: OT, decrypt: VT, parse: MT, populate: HT };
      or.exports.configDotenv = Be.configDotenv;
      or.exports._configVault = Be._configVault;
      or.exports._parseVault = Be._parseVault;
      or.exports.config = Be.config;
      or.exports.decrypt = Be.decrypt;
      or.exports.parse = Be.parse;
      or.exports.populate = Be.populate;
      or.exports = Be;
    });
    var MC = C((Tj, Ho) => {
      "use strict";
      Ho.exports = (t = {}) => {
        let e;
        if (t.repoUrl) e = t.repoUrl;
        else if (t.user && t.repo) e = `https://github.com/${t.user}/${t.repo}`;
        else throw new Error("You need to specify either the `repoUrl` option or both the `user` and `repo` options");
        let r = new URL(`${e}/issues/new`), n = ["body", "title", "labels", "template", "milestone", "assignee", "projects"];
        for (let A of n) {
          let i = t[A];
          if (i !== void 0) {
            if (A === "labels" || A === "projects") {
              if (!Array.isArray(i)) throw new TypeError(`The \`${A}\` option should be an array`);
              i = i.join(",");
            }
            r.searchParams.set(A, i);
          }
        }
        return r.toString();
      };
      Ho.exports.default = Ho.exports;
    });
    var Pu = C((o3, AI) => {
      "use strict";
      AI.exports = /* @__PURE__ */ function() {
        function t(e, r, n, A, i) {
          return e < r || n < r ? e > n ? n + 1 : e + 1 : A === i ? r : r + 1;
        }
        return function(e, r) {
          if (e === r) return 0;
          if (e.length > r.length) {
            var n = e;
            e = r, r = n;
          }
          for (var A = e.length, i = r.length; A > 0 && e.charCodeAt(A - 1) === r.charCodeAt(i - 1); ) A--, i--;
          for (var s = 0; s < A && e.charCodeAt(s) === r.charCodeAt(s); ) s++;
          if (A -= s, i -= s, A === 0 || i < 3) return i;
          var o = 0, a, c, l, u, g, E, h, f, B, Q, I, p, w = [];
          for (a = 0; a < A; a++) w.push(a + 1), w.push(e.charCodeAt(s + a));
          for (var D = w.length - 1; o < i - 3; ) for (B = r.charCodeAt(s + (c = o)), Q = r.charCodeAt(s + (l = o + 1)), I = r.charCodeAt(s + (u = o + 2)), p = r.charCodeAt(s + (g = o + 3)), E = o += 4, a = 0; a < D; a += 2) h = w[a], f = w[a + 1], c = t(h, c, l, B, f), l = t(c, l, u, Q, f), u = t(l, u, g, I, f), E = t(u, g, E, p, f), w[a] = E, g = u, u = l, l = c, c = h;
          for (; o < i; ) for (B = r.charCodeAt(s + (c = o)), E = ++o, a = 0; a < D; a += 2) h = w[a], w[a] = E = t(h, c, E, B, w[a + 1]), c = h;
          return E;
        };
      }();
    });
    var cI = zh(() => {
      "use strict";
    });
    var lI = zh(() => {
      "use strict";
    });
    var ne = C((m$, PB) => {
      "use strict";
      PB.exports = { kClose: Symbol("close"), kDestroy: Symbol("destroy"), kDispatch: Symbol("dispatch"), kUrl: Symbol("url"), kWriting: Symbol("writing"), kResuming: Symbol("resuming"), kQueue: Symbol("queue"), kConnect: Symbol("connect"), kConnecting: Symbol("connecting"), kKeepAliveDefaultTimeout: Symbol("default keep alive timeout"), kKeepAliveMaxTimeout: Symbol("max keep alive timeout"), kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"), kKeepAliveTimeoutValue: Symbol("keep alive timeout"), kKeepAlive: Symbol("keep alive"), kHeadersTimeout: Symbol("headers timeout"), kBodyTimeout: Symbol("body timeout"), kServerName: Symbol("server name"), kLocalAddress: Symbol("local address"), kHost: Symbol("host"), kNoRef: Symbol("no ref"), kBodyUsed: Symbol("used"), kBody: Symbol("abstracted request body"), kRunning: Symbol("running"), kBlocking: Symbol("blocking"), kPending: Symbol("pending"), kSize: Symbol("size"), kBusy: Symbol("busy"), kQueued: Symbol("queued"), kFree: Symbol("free"), kConnected: Symbol("connected"), kClosed: Symbol("closed"), kNeedDrain: Symbol("need drain"), kReset: Symbol("reset"), kDestroyed: Symbol.for("nodejs.stream.destroyed"), kResume: Symbol("resume"), kOnError: Symbol("on error"), kMaxHeadersSize: Symbol("max headers size"), kRunningIdx: Symbol("running index"), kPendingIdx: Symbol("pending index"), kError: Symbol("error"), kClients: Symbol("clients"), kClient: Symbol("client"), kParser: Symbol("parser"), kOnDestroyed: Symbol("destroy callbacks"), kPipelining: Symbol("pipelining"), kSocket: Symbol("socket"), kHostHeader: Symbol("host header"), kConnector: Symbol("connector"), kStrictContentLength: Symbol("strict content length"), kMaxRedirections: Symbol("maxRedirections"), kMaxRequests: Symbol("maxRequestsPerClient"), kProxy: Symbol("proxy agent options"), kCounter: Symbol("socket request counter"), kMaxResponseSize: Symbol("max response size"), kHTTP2Session: Symbol("http2Session"), kHTTP2SessionState: Symbol("http2Session state"), kRetryHandlerDefaultRetry: Symbol("retry agent default retry"), kConstruct: Symbol("constructable"), kListeners: Symbol("listeners"), kHTTPContext: Symbol("http context"), kMaxConcurrentStreams: Symbol("max concurrent streams"), kNoProxyAgent: Symbol("no proxy agent"), kHttpProxyAgent: Symbol("http proxy agent"), kHttpsProxyAgent: Symbol("https proxy agent") };
    });
    var H = C((y$, YB) => {
      "use strict";
      var Ee = class extends Error {
        constructor(e, r) {
          super(e, r), this.name = "UndiciError", this.code = "UND_ERR";
        }
      }, sg = class extends Ee {
        constructor(e) {
          super(e), this.name = "ConnectTimeoutError", this.message = e || "Connect Timeout Error", this.code = "UND_ERR_CONNECT_TIMEOUT";
        }
      }, og = class extends Ee {
        constructor(e) {
          super(e), this.name = "HeadersTimeoutError", this.message = e || "Headers Timeout Error", this.code = "UND_ERR_HEADERS_TIMEOUT";
        }
      }, ag = class extends Ee {
        constructor(e) {
          super(e), this.name = "HeadersOverflowError", this.message = e || "Headers Overflow Error", this.code = "UND_ERR_HEADERS_OVERFLOW";
        }
      }, cg = class extends Ee {
        constructor(e) {
          super(e), this.name = "BodyTimeoutError", this.message = e || "Body Timeout Error", this.code = "UND_ERR_BODY_TIMEOUT";
        }
      }, lg = class extends Ee {
        constructor(e, r, n, A) {
          super(e), this.name = "ResponseStatusCodeError", this.message = e || "Response Status Code Error", this.code = "UND_ERR_RESPONSE_STATUS_CODE", this.body = A, this.status = r, this.statusCode = r, this.headers = n;
        }
      }, ug = class extends Ee {
        constructor(e) {
          super(e), this.name = "InvalidArgumentError", this.message = e || "Invalid Argument Error", this.code = "UND_ERR_INVALID_ARG";
        }
      }, gg = class extends Ee {
        constructor(e) {
          super(e), this.name = "InvalidReturnValueError", this.message = e || "Invalid Return Value Error", this.code = "UND_ERR_INVALID_RETURN_VALUE";
        }
      }, Sa = class extends Ee {
        constructor(e) {
          super(e), this.name = "AbortError", this.message = e || "The operation was aborted";
        }
      }, Eg = class extends Sa {
        constructor(e) {
          super(e), this.name = "AbortError", this.message = e || "Request aborted", this.code = "UND_ERR_ABORTED";
        }
      }, dg = class extends Ee {
        constructor(e) {
          super(e), this.name = "InformationalError", this.message = e || "Request information", this.code = "UND_ERR_INFO";
        }
      }, hg = class extends Ee {
        constructor(e) {
          super(e), this.name = "RequestContentLengthMismatchError", this.message = e || "Request body length does not match content-length header", this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";
        }
      }, fg = class extends Ee {
        constructor(e) {
          super(e), this.name = "ResponseContentLengthMismatchError", this.message = e || "Response body length does not match content-length header", this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";
        }
      }, Qg = class extends Ee {
        constructor(e) {
          super(e), this.name = "ClientDestroyedError", this.message = e || "The client is destroyed", this.code = "UND_ERR_DESTROYED";
        }
      }, Cg = class extends Ee {
        constructor(e) {
          super(e), this.name = "ClientClosedError", this.message = e || "The client is closed", this.code = "UND_ERR_CLOSED";
        }
      }, Ig = class extends Ee {
        constructor(e, r) {
          super(e), this.name = "SocketError", this.message = e || "Socket error", this.code = "UND_ERR_SOCKET", this.socket = r;
        }
      }, Bg = class extends Ee {
        constructor(e) {
          super(e), this.name = "NotSupportedError", this.message = e || "Not supported error", this.code = "UND_ERR_NOT_SUPPORTED";
        }
      }, pg = class extends Ee {
        constructor(e) {
          super(e), this.name = "MissingUpstreamError", this.message = e || "No upstream has been added to the BalancedPool", this.code = "UND_ERR_BPL_MISSING_UPSTREAM";
        }
      }, mg = class extends Error {
        constructor(e, r, n) {
          super(e), this.name = "HTTPParserError", this.code = r ? `HPE_${r}` : void 0, this.data = n ? n.toString() : void 0;
        }
      }, yg = class extends Ee {
        constructor(e) {
          super(e), this.name = "ResponseExceededMaxSizeError", this.message = e || "Response content exceeded max size", this.code = "UND_ERR_RES_EXCEEDED_MAX_SIZE";
        }
      }, wg = class extends Ee {
        constructor(e, r, { headers: n, data: A }) {
          super(e), this.name = "RequestRetryError", this.message = e || "Request retry error", this.code = "UND_ERR_REQ_RETRY", this.statusCode = r, this.data = A, this.headers = n;
        }
      }, Dg = class extends Ee {
        constructor(e, r, { headers: n, body: A }) {
          super(e), this.name = "ResponseError", this.message = e || "Response error", this.code = "UND_ERR_RESPONSE", this.statusCode = r, this.body = A, this.headers = n;
        }
      }, Rg = class extends Ee {
        constructor(e, r, n = {}) {
          super(r, { cause: e, ...n }), this.name = "SecureProxyConnectionError", this.message = r || "Secure Proxy Connection failed", this.code = "UND_ERR_PRX_TLS", this.cause = e;
        }
      };
      YB.exports = { AbortError: Sa, HTTPParserError: mg, UndiciError: Ee, HeadersTimeoutError: og, HeadersOverflowError: ag, BodyTimeoutError: cg, RequestContentLengthMismatchError: hg, ConnectTimeoutError: sg, ResponseStatusCodeError: lg, InvalidArgumentError: ug, InvalidReturnValueError: gg, RequestAbortedError: Eg, ClientDestroyedError: Qg, ClientClosedError: Cg, InformationalError: dg, SocketError: Ig, NotSupportedError: Bg, ResponseContentLengthMismatchError: fg, BalancedPoolMissingUpstreamError: pg, ResponseExceededMaxSizeError: yg, RequestRetryError: wg, ResponseError: Dg, SecureProxyConnectionError: Rg };
    });
    var Na = C((w$, OB) => {
      "use strict";
      var Sg = ["Accept", "Accept-Encoding", "Accept-Language", "Accept-Ranges", "Access-Control-Allow-Credentials", "Access-Control-Allow-Headers", "Access-Control-Allow-Methods", "Access-Control-Allow-Origin", "Access-Control-Expose-Headers", "Access-Control-Max-Age", "Access-Control-Request-Headers", "Access-Control-Request-Method", "Age", "Allow", "Alt-Svc", "Alt-Used", "Authorization", "Cache-Control", "Clear-Site-Data", "Connection", "Content-Disposition", "Content-Encoding", "Content-Language", "Content-Length", "Content-Location", "Content-Range", "Content-Security-Policy", "Content-Security-Policy-Report-Only", "Content-Type", "Cookie", "Cross-Origin-Embedder-Policy", "Cross-Origin-Opener-Policy", "Cross-Origin-Resource-Policy", "Date", "Device-Memory", "Downlink", "ECT", "ETag", "Expect", "Expect-CT", "Expires", "Forwarded", "From", "Host", "If-Match", "If-Modified-Since", "If-None-Match", "If-Range", "If-Unmodified-Since", "Keep-Alive", "Last-Modified", "Link", "Location", "Max-Forwards", "Origin", "Permissions-Policy", "Pragma", "Proxy-Authenticate", "Proxy-Authorization", "RTT", "Range", "Referer", "Referrer-Policy", "Refresh", "Retry-After", "Sec-WebSocket-Accept", "Sec-WebSocket-Extensions", "Sec-WebSocket-Key", "Sec-WebSocket-Protocol", "Sec-WebSocket-Version", "Server", "Server-Timing", "Service-Worker-Allowed", "Service-Worker-Navigation-Preload", "Set-Cookie", "SourceMap", "Strict-Transport-Security", "Supports-Loading-Mode", "TE", "Timing-Allow-Origin", "Trailer", "Transfer-Encoding", "Upgrade", "Upgrade-Insecure-Requests", "User-Agent", "Vary", "Via", "WWW-Authenticate", "X-Content-Type-Options", "X-DNS-Prefetch-Control", "X-Frame-Options", "X-Permitted-Cross-Domain-Policies", "X-Powered-By", "X-Requested-With", "X-XSS-Protection"], ba = {};
      Object.setPrototypeOf(ba, null);
      var GB = {};
      Object.setPrototypeOf(GB, null);
      function Jk(t) {
        let e = GB[t];
        return e === void 0 && (e = Buffer.from(t)), e;
      }
      for (let t = 0; t < Sg.length; ++t) {
        let e = Sg[t], r = e.toLowerCase();
        ba[e] = ba[r] = r;
      }
      OB.exports = { wellknownHeaderNames: Sg, headerNameLowerCasedRecord: ba, getHeaderNameAsBuffer: Jk };
    });
    var JB = C((D$, qB) => {
      "use strict";
      var { wellknownHeaderNames: VB, headerNameLowerCasedRecord: Wk } = Na(), bg = class t {
        value = null;
        left = null;
        middle = null;
        right = null;
        code;
        constructor(e, r, n) {
          if (n === void 0 || n >= e.length) throw new TypeError("Unreachable");
          if ((this.code = e.charCodeAt(n)) > 127) throw new TypeError("key must be ascii string");
          e.length !== ++n ? this.middle = new t(e, r, n) : this.value = r;
        }
        add(e, r) {
          let n = e.length;
          if (n === 0) throw new TypeError("Unreachable");
          let A = 0, i = this;
          for (; ; ) {
            let s = e.charCodeAt(A);
            if (s > 127) throw new TypeError("key must be ascii string");
            if (i.code === s) if (n === ++A) {
              i.value = r;
              break;
            } else if (i.middle !== null) i = i.middle;
            else {
              i.middle = new t(e, r, A);
              break;
            }
            else if (i.code < s) if (i.left !== null) i = i.left;
            else {
              i.left = new t(e, r, A);
              break;
            }
            else if (i.right !== null) i = i.right;
            else {
              i.right = new t(e, r, A);
              break;
            }
          }
        }
        search(e) {
          let r = e.length, n = 0, A = this;
          for (; A !== null && n < r; ) {
            let i = e[n];
            for (i <= 90 && i >= 65 && (i |= 32); A !== null; ) {
              if (i === A.code) {
                if (r === ++n) return A;
                A = A.middle;
                break;
              }
              A = A.code < i ? A.left : A.right;
            }
          }
          return null;
        }
      }, Fa = class {
        node = null;
        insert(e, r) {
          this.node === null ? this.node = new bg(e, r, 0) : this.node.add(e, r);
        }
        lookup(e) {
          return this.node?.search(e)?.value ?? null;
        }
      }, HB = new Fa();
      for (let t = 0; t < VB.length; ++t) {
        let e = Wk[VB[t]];
        HB.insert(e, e);
      }
      qB.exports = { TernarySearchTree: Fa, tree: HB };
    });
    var Y = C((R$, ap) => {
      "use strict";
      var $i = __require("node:assert"), { kDestroyed: _B, kBodyUsed: mA, kListeners: Ta, kBody: WB } = ne(), { IncomingMessage: _k } = __require("node:http"), jB = __require("node:stream"), jk = __require("node:net"), { Blob: Zk } = __require("node:buffer"), Xk = __require("node:util"), { stringify: $k } = __require("node:querystring"), { EventEmitter: Kk } = __require("node:events"), { InvalidArgumentError: Re } = H(), { headerNameLowerCasedRecord: zk } = Na(), { tree: ZB } = JB(), [eM, tM] = process.versions.node.split(".").map((t) => Number(t)), Ua = class {
        constructor(e) {
          this[WB] = e, this[mA] = false;
        }
        async *[Symbol.asyncIterator]() {
          $i(!this[mA], "disturbed"), this[mA] = true, yield* this[WB];
        }
      };
      function rM(t) {
        return ka(t) ? (ep(t) === 0 && t.on("data", function() {
          $i(false);
        }), typeof t.readableDidRead != "boolean" && (t[mA] = false, Kk.prototype.on.call(t, "data", function() {
          this[mA] = true;
        })), t) : t && typeof t.pipeTo == "function" ? new Ua(t) : t && typeof t != "string" && !ArrayBuffer.isView(t) && zB(t) ? new Ua(t) : t;
      }
      function ka(t) {
        return t && typeof t == "object" && typeof t.pipe == "function" && typeof t.on == "function";
      }
      function XB(t) {
        if (t === null) return false;
        if (t instanceof Zk) return true;
        if (typeof t != "object") return false;
        {
          let e = t[Symbol.toStringTag];
          return (e === "Blob" || e === "File") && ("stream" in t && typeof t.stream == "function" || "arrayBuffer" in t && typeof t.arrayBuffer == "function");
        }
      }
      function nM(t, e) {
        if (t.includes("?") || t.includes("#")) throw new Error('Query params cannot be passed when url already contains "?" or "#".');
        let r = $k(e);
        return r && (t += "?" + r), t;
      }
      function $B(t) {
        let e = parseInt(t, 10);
        return e === Number(t) && e >= 0 && e <= 65535;
      }
      function xa(t) {
        return t != null && t[0] === "h" && t[1] === "t" && t[2] === "t" && t[3] === "p" && (t[4] === ":" || t[4] === "s" && t[5] === ":");
      }
      function KB(t) {
        if (typeof t == "string") {
          if (t = new URL(t), !xa(t.origin || t.protocol)) throw new Re("Invalid URL protocol: the URL must start with `http:` or `https:`.");
          return t;
        }
        if (!t || typeof t != "object") throw new Re("Invalid URL: The URL argument must be a non-null object.");
        if (!(t instanceof URL)) {
          if (t.port != null && t.port !== "" && $B(t.port) === false) throw new Re("Invalid URL: port must be a valid integer or a string representation of an integer.");
          if (t.path != null && typeof t.path != "string") throw new Re("Invalid URL path: the path must be a string or null/undefined.");
          if (t.pathname != null && typeof t.pathname != "string") throw new Re("Invalid URL pathname: the pathname must be a string or null/undefined.");
          if (t.hostname != null && typeof t.hostname != "string") throw new Re("Invalid URL hostname: the hostname must be a string or null/undefined.");
          if (t.origin != null && typeof t.origin != "string") throw new Re("Invalid URL origin: the origin must be a string or null/undefined.");
          if (!xa(t.origin || t.protocol)) throw new Re("Invalid URL protocol: the URL must start with `http:` or `https:`.");
          let e = t.port != null ? t.port : t.protocol === "https:" ? 443 : 80, r = t.origin != null ? t.origin : `${t.protocol || ""}//${t.hostname || ""}:${e}`, n = t.path != null ? t.path : `${t.pathname || ""}${t.search || ""}`;
          return r[r.length - 1] === "/" && (r = r.slice(0, r.length - 1)), n && n[0] !== "/" && (n = `/${n}`), new URL(`${r}${n}`);
        }
        if (!xa(t.origin || t.protocol)) throw new Re("Invalid URL protocol: the URL must start with `http:` or `https:`.");
        return t;
      }
      function AM(t) {
        if (t = KB(t), t.pathname !== "/" || t.search || t.hash) throw new Re("invalid url");
        return t;
      }
      function iM(t) {
        if (t[0] === "[") {
          let r = t.indexOf("]");
          return $i(r !== -1), t.substring(1, r);
        }
        let e = t.indexOf(":");
        return e === -1 ? t : t.substring(0, e);
      }
      function sM(t) {
        if (!t) return null;
        $i(typeof t == "string");
        let e = iM(t);
        return jk.isIP(e) ? "" : e;
      }
      function oM(t) {
        return JSON.parse(JSON.stringify(t));
      }
      function aM(t) {
        return t != null && typeof t[Symbol.asyncIterator] == "function";
      }
      function zB(t) {
        return t != null && (typeof t[Symbol.iterator] == "function" || typeof t[Symbol.asyncIterator] == "function");
      }
      function ep(t) {
        if (t == null) return 0;
        if (ka(t)) {
          let e = t._readableState;
          return e && e.objectMode === false && e.ended === true && Number.isFinite(e.length) ? e.length : null;
        } else {
          if (XB(t)) return t.size != null ? t.size : null;
          if (np(t)) return t.byteLength;
        }
        return null;
      }
      function tp(t) {
        return t && !!(t.destroyed || t[_B] || jB.isDestroyed?.(t));
      }
      function cM(t, e) {
        t == null || !ka(t) || tp(t) || (typeof t.destroy == "function" ? (Object.getPrototypeOf(t).constructor === _k && (t.socket = null), t.destroy(e)) : e && queueMicrotask(() => {
          t.emit("error", e);
        }), t.destroyed !== true && (t[_B] = true));
      }
      var lM = /timeout=(\d+)/;
      function uM(t) {
        let e = t.match(lM);
        return e ? parseInt(e[1], 10) * 1e3 : null;
      }
      function rp(t) {
        return typeof t == "string" ? zk[t] ?? t.toLowerCase() : ZB.lookup(t) ?? t.toString("latin1").toLowerCase();
      }
      function gM(t) {
        return ZB.lookup(t) ?? t.toString("latin1").toLowerCase();
      }
      function EM(t, e) {
        e === void 0 && (e = {});
        for (let r = 0; r < t.length; r += 2) {
          let n = rp(t[r]), A = e[n];
          if (A) typeof A == "string" && (A = [A], e[n] = A), A.push(t[r + 1].toString("utf8"));
          else {
            let i = t[r + 1];
            typeof i == "string" ? e[n] = i : e[n] = Array.isArray(i) ? i.map((s) => s.toString("utf8")) : i.toString("utf8");
          }
        }
        return "content-length" in e && "content-disposition" in e && (e["content-disposition"] = Buffer.from(e["content-disposition"]).toString("latin1")), e;
      }
      function dM(t) {
        let e = t.length, r = new Array(e), n = false, A = -1, i, s, o = 0;
        for (let a = 0; a < e; a += 2) i = t[a], s = t[a + 1], typeof i != "string" && (i = i.toString()), typeof s != "string" && (s = s.toString("utf8")), o = i.length, o === 14 && i[7] === "-" && (i === "content-length" || i.toLowerCase() === "content-length") ? n = true : o === 19 && i[7] === "-" && (i === "content-disposition" || i.toLowerCase() === "content-disposition") && (A = a + 1), r[a] = i, r[a + 1] = s;
        return n && A !== -1 && (r[A] = Buffer.from(r[A]).toString("latin1")), r;
      }
      function hM(t) {
        if (!Array.isArray(t)) throw new TypeError("expected headers to be an array");
        return t.map((e) => Buffer.from(e));
      }
      function np(t) {
        return t instanceof Uint8Array || Buffer.isBuffer(t);
      }
      function fM(t, e, r) {
        if (!t || typeof t != "object") throw new Re("handler must be an object");
        if (typeof t.onRequestStart != "function") {
          if (typeof t.onConnect != "function") throw new Re("invalid onConnect method");
          if (typeof t.onError != "function") throw new Re("invalid onError method");
          if (typeof t.onBodySent != "function" && t.onBodySent !== void 0) throw new Re("invalid onBodySent method");
          if (r || e === "CONNECT") {
            if (typeof t.onUpgrade != "function") throw new Re("invalid onUpgrade method");
          } else {
            if (typeof t.onHeaders != "function") throw new Re("invalid onHeaders method");
            if (typeof t.onData != "function") throw new Re("invalid onData method");
            if (typeof t.onComplete != "function") throw new Re("invalid onComplete method");
          }
        }
      }
      function QM(t) {
        return !!(t && (jB.isDisturbed(t) || t[mA]));
      }
      function CM(t) {
        return { localAddress: t.localAddress, localPort: t.localPort, remoteAddress: t.remoteAddress, remotePort: t.remotePort, remoteFamily: t.remoteFamily, timeout: t.timeout, bytesWritten: t.bytesWritten, bytesRead: t.bytesRead };
      }
      function IM(t) {
        let e;
        return new ReadableStream({ async start() {
          e = t[Symbol.asyncIterator]();
        }, pull(r) {
          async function n() {
            let { done: A, value: i } = await e.next();
            if (A) queueMicrotask(() => {
              r.close(), r.byobRequest?.respond(0);
            });
            else {
              let s = Buffer.isBuffer(i) ? i : Buffer.from(i);
              if (s.byteLength) r.enqueue(new Uint8Array(s));
              else return await n();
            }
          }
          return n();
        }, async cancel() {
          await e.return();
        }, type: "bytes" });
      }
      function BM(t) {
        return t && typeof t == "object" && typeof t.append == "function" && typeof t.delete == "function" && typeof t.get == "function" && typeof t.getAll == "function" && typeof t.has == "function" && typeof t.set == "function" && t[Symbol.toStringTag] === "FormData";
      }
      function pM(t, e) {
        return "addEventListener" in t ? (t.addEventListener("abort", e, { once: true }), () => t.removeEventListener("abort", e)) : (t.once("abort", e), () => t.removeListener("abort", e));
      }
      var Ap = typeof String.prototype.toWellFormed == "function" ? (t) => `${t}`.toWellFormed() : Xk.toUSVString, mM = typeof String.prototype.isWellFormed == "function" ? (t) => `${t}`.isWellFormed() : (t) => Ap(t) === `${t}`;
      function ip(t) {
        switch (t) {
          case 34:
          case 40:
          case 41:
          case 44:
          case 47:
          case 58:
          case 59:
          case 60:
          case 61:
          case 62:
          case 63:
          case 64:
          case 91:
          case 92:
          case 93:
          case 123:
          case 125:
            return false;
          default:
            return t >= 33 && t <= 126;
        }
      }
      function yM(t) {
        if (t.length === 0) return false;
        for (let e = 0; e < t.length; ++e) if (!ip(t.charCodeAt(e))) return false;
        return true;
      }
      var wM = /[^\t\x20-\x7e\x80-\xff]/;
      function DM(t) {
        return !wM.test(t);
      }
      var RM = /^bytes (\d+)-(\d+)\/(\d+)?$/;
      function SM(t) {
        if (t == null || t === "") return { start: 0, end: null, size: null };
        let e = t ? t.match(RM) : null;
        return e ? { start: parseInt(e[1]), end: e[2] ? parseInt(e[2]) : null, size: e[3] ? parseInt(e[3]) : null } : null;
      }
      function bM(t, e, r) {
        return (t[Ta] ??= []).push([e, r]), t.on(e, r), t;
      }
      function NM(t) {
        if (t[Ta] != null) {
          for (let [e, r] of t[Ta]) t.removeListener(e, r);
          t[Ta] = null;
        }
        return t;
      }
      function FM(t, e, r) {
        try {
          e.onError(r), $i(e.aborted);
        } catch (n) {
          t.emit("error", n);
        }
      }
      var sp = /* @__PURE__ */ Object.create(null);
      sp.enumerable = true;
      var Ng = { delete: "DELETE", DELETE: "DELETE", get: "GET", GET: "GET", head: "HEAD", HEAD: "HEAD", options: "OPTIONS", OPTIONS: "OPTIONS", post: "POST", POST: "POST", put: "PUT", PUT: "PUT" }, op = { ...Ng, patch: "patch", PATCH: "PATCH" };
      Object.setPrototypeOf(Ng, null);
      Object.setPrototypeOf(op, null);
      ap.exports = { kEnumerableProperty: sp, isDisturbed: QM, toUSVString: Ap, isUSVString: mM, isBlobLike: XB, parseOrigin: AM, parseURL: KB, getServerName: sM, isStream: ka, isIterable: zB, isAsyncIterable: aM, isDestroyed: tp, headerNameToString: rp, bufferToLowerCasedHeaderName: gM, addListener: bM, removeAllListeners: NM, errorRequest: FM, parseRawHeaders: dM, encodeRawHeaders: hM, parseHeaders: EM, parseKeepAliveTimeout: uM, destroy: cM, bodyLength: ep, deepClone: oM, ReadableStreamFrom: IM, isBuffer: np, assertRequestHandler: fM, getSocketInfo: CM, isFormDataLike: BM, serializePathWithQuery: nM, addAbortListener: pM, isValidHTTPToken: yM, isValidHeaderValue: DM, isTokenCharCode: ip, parseRangeHeader: SM, normalizedMethodRecordsBase: Ng, normalizedMethodRecords: op, isValidPort: $B, isHttpOrHttpsPrefixed: xa, nodeMajor: eM, nodeMinor: tM, safeHTTPMethods: Object.freeze(["GET", "HEAD", "OPTIONS", "TRACE"]), wrapRequestBody: rM };
    });
    var lr = C((S$, Ep) => {
      "use strict";
      var se = __require("node:diagnostics_channel"), Fg = __require("node:util"), En = Fg.debuglog("undici"), Ki = Fg.debuglog("fetch"), Ma = Fg.debuglog("websocket"), TM = { beforeConnect: se.channel("undici:client:beforeConnect"), connected: se.channel("undici:client:connected"), connectError: se.channel("undici:client:connectError"), sendHeaders: se.channel("undici:client:sendHeaders"), create: se.channel("undici:request:create"), bodySent: se.channel("undici:request:bodySent"), headers: se.channel("undici:request:headers"), trailers: se.channel("undici:request:trailers"), error: se.channel("undici:request:error"), open: se.channel("undici:websocket:open"), close: se.channel("undici:websocket:close"), socketError: se.channel("undici:websocket:socket_error"), ping: se.channel("undici:websocket:ping"), pong: se.channel("undici:websocket:pong") }, cp = false;
      function gp(t = En) {
        cp || (cp = true, se.subscribe("undici:client:beforeConnect", (e) => {
          let { connectParams: { version: r, protocol: n, port: A, host: i } } = e;
          t("connecting to %s%s using %s%s", i, A ? `:${A}` : "", n, r);
        }), se.subscribe("undici:client:connected", (e) => {
          let { connectParams: { version: r, protocol: n, port: A, host: i } } = e;
          t("connected to %s%s using %s%s", i, A ? `:${A}` : "", n, r);
        }), se.subscribe("undici:client:connectError", (e) => {
          let { connectParams: { version: r, protocol: n, port: A, host: i }, error: s } = e;
          t("connection to %s%s using %s%s errored - %s", i, A ? `:${A}` : "", n, r, s.message);
        }), se.subscribe("undici:client:sendHeaders", (e) => {
          let { request: { method: r, path: n, origin: A } } = e;
          t("sending request to %s %s/%s", r, A, n);
        }));
      }
      var lp = false;
      function xM(t = En) {
        lp || (lp = true, se.subscribe("undici:request:headers", (e) => {
          let { request: { method: r, path: n, origin: A }, response: { statusCode: i } } = e;
          t("received response to %s %s/%s - HTTP %d", r, A, n, i);
        }), se.subscribe("undici:request:trailers", (e) => {
          let { request: { method: r, path: n, origin: A } } = e;
          t("trailers received from %s %s/%s", r, A, n);
        }), se.subscribe("undici:request:error", (e) => {
          let { request: { method: r, path: n, origin: A }, error: i } = e;
          t("request to %s %s/%s errored - %s", r, A, n, i.message);
        }));
      }
      var up = false;
      function UM(t = Ma) {
        up || (up = true, se.subscribe("undici:websocket:open", (e) => {
          let { address: { address: r, port: n } } = e;
          t("connection opened %s%s", r, n ? `:${n}` : "");
        }), se.subscribe("undici:websocket:close", (e) => {
          let { websocket: r, code: n, reason: A } = e;
          t("closed connection to %s - %s %s", r.url, n, A);
        }), se.subscribe("undici:websocket:socket_error", (e) => {
          t("connection errored - %s", e.message);
        }), se.subscribe("undici:websocket:ping", (e) => {
          t("ping received");
        }), se.subscribe("undici:websocket:pong", (e) => {
          t("pong received");
        }));
      }
      (En.enabled || Ki.enabled) && (gp(Ki.enabled ? Ki : En), xM(Ki.enabled ? Ki : En));
      Ma.enabled && (gp(En.enabled ? En : Ma), UM(Ma));
      Ep.exports = { channels: TM };
    });
    var Cp = C((b$, Qp) => {
      "use strict";
      var { InvalidArgumentError: ge, NotSupportedError: kM } = H(), Ot = __require("node:assert"), { isValidHTTPToken: fp, isValidHeaderValue: dp, isStream: MM, destroy: LM, isBuffer: vM, isFormDataLike: PM, isIterable: YM, isBlobLike: GM, serializePathWithQuery: OM, assertRequestHandler: VM, getServerName: HM, normalizedMethodRecords: qM } = Y(), { channels: Vt } = lr(), { headerNameLowerCasedRecord: hp } = Na(), JM = /[^\u0021-\u00ff]/, gt = Symbol("handler"), Tg = class {
        constructor(e, { path: r, method: n, body: A, headers: i, query: s, idempotent: o, blocking: a, upgrade: c, headersTimeout: l, bodyTimeout: u, reset: g, expectContinue: E, servername: h, throwOnError: f }, B) {
          if (typeof r != "string") throw new ge("path must be a string");
          if (r[0] !== "/" && !(r.startsWith("http://") || r.startsWith("https://")) && n !== "CONNECT") throw new ge("path must be an absolute URL or start with a slash");
          if (JM.test(r)) throw new ge("invalid request path");
          if (typeof n != "string") throw new ge("method must be a string");
          if (qM[n] === void 0 && !fp(n)) throw new ge("invalid request method");
          if (c && typeof c != "string") throw new ge("upgrade must be a string");
          if (l != null && (!Number.isFinite(l) || l < 0)) throw new ge("invalid headersTimeout");
          if (u != null && (!Number.isFinite(u) || u < 0)) throw new ge("invalid bodyTimeout");
          if (g != null && typeof g != "boolean") throw new ge("invalid reset");
          if (E != null && typeof E != "boolean") throw new ge("invalid expectContinue");
          if (f != null) throw new ge("invalid throwOnError");
          if (this.headersTimeout = l, this.bodyTimeout = u, this.method = n, this.abort = null, A == null) this.body = null;
          else if (MM(A)) {
            this.body = A;
            let Q = this.body._readableState;
            (!Q || !Q.autoDestroy) && (this.endHandler = function() {
              LM(this);
            }, this.body.on("end", this.endHandler)), this.errorHandler = (I) => {
              this.abort ? this.abort(I) : this.error = I;
            }, this.body.on("error", this.errorHandler);
          } else if (vM(A)) this.body = A.byteLength ? A : null;
          else if (ArrayBuffer.isView(A)) this.body = A.buffer.byteLength ? Buffer.from(A.buffer, A.byteOffset, A.byteLength) : null;
          else if (A instanceof ArrayBuffer) this.body = A.byteLength ? Buffer.from(A) : null;
          else if (typeof A == "string") this.body = A.length ? Buffer.from(A) : null;
          else if (PM(A) || YM(A) || GM(A)) this.body = A;
          else throw new ge("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");
          if (this.completed = false, this.aborted = false, this.upgrade = c || null, this.path = s ? OM(r, s) : r, this.origin = e, this.idempotent = o ?? (n === "HEAD" || n === "GET"), this.blocking = a ?? this.method !== "HEAD", this.reset = g ?? null, this.host = null, this.contentLength = null, this.contentType = null, this.headers = [], this.expectContinue = E ?? false, Array.isArray(i)) {
            if (i.length % 2 !== 0) throw new ge("headers array must be even");
            for (let Q = 0; Q < i.length; Q += 2) La(this, i[Q], i[Q + 1]);
          } else if (i && typeof i == "object") if (i[Symbol.iterator]) for (let Q of i) {
            if (!Array.isArray(Q) || Q.length !== 2) throw new ge("headers must be in key-value pair format");
            La(this, Q[0], Q[1]);
          }
          else {
            let Q = Object.keys(i);
            for (let I = 0; I < Q.length; ++I) La(this, Q[I], i[Q[I]]);
          }
          else if (i != null) throw new ge("headers must be an object or an array");
          VM(B, n, c), this.servername = h || HM(this.host) || null, this[gt] = B, Vt.create.hasSubscribers && Vt.create.publish({ request: this });
        }
        onBodySent(e) {
          if (this[gt].onBodySent) try {
            return this[gt].onBodySent(e);
          } catch (r) {
            this.abort(r);
          }
        }
        onRequestSent() {
          if (Vt.bodySent.hasSubscribers && Vt.bodySent.publish({ request: this }), this[gt].onRequestSent) try {
            return this[gt].onRequestSent();
          } catch (e) {
            this.abort(e);
          }
        }
        onConnect(e) {
          if (Ot(!this.aborted), Ot(!this.completed), this.error) e(this.error);
          else return this.abort = e, this[gt].onConnect(e);
        }
        onResponseStarted() {
          return this[gt].onResponseStarted?.();
        }
        onHeaders(e, r, n, A) {
          Ot(!this.aborted), Ot(!this.completed), Vt.headers.hasSubscribers && Vt.headers.publish({ request: this, response: { statusCode: e, headers: r, statusText: A } });
          try {
            return this[gt].onHeaders(e, r, n, A);
          } catch (i) {
            this.abort(i);
          }
        }
        onData(e) {
          Ot(!this.aborted), Ot(!this.completed);
          try {
            return this[gt].onData(e);
          } catch (r) {
            return this.abort(r), false;
          }
        }
        onUpgrade(e, r, n) {
          return Ot(!this.aborted), Ot(!this.completed), this[gt].onUpgrade(e, r, n);
        }
        onComplete(e) {
          this.onFinally(), Ot(!this.aborted), Ot(!this.completed), this.completed = true, Vt.trailers.hasSubscribers && Vt.trailers.publish({ request: this, trailers: e });
          try {
            return this[gt].onComplete(e);
          } catch (r) {
            this.onError(r);
          }
        }
        onError(e) {
          if (this.onFinally(), Vt.error.hasSubscribers && Vt.error.publish({ request: this, error: e }), !this.aborted) return this.aborted = true, this[gt].onError(e);
        }
        onFinally() {
          this.errorHandler && (this.body.off("error", this.errorHandler), this.errorHandler = null), this.endHandler && (this.body.off("end", this.endHandler), this.endHandler = null);
        }
        addHeader(e, r) {
          return La(this, e, r), this;
        }
      };
      function La(t, e, r) {
        if (r && typeof r == "object" && !Array.isArray(r)) throw new ge(`invalid ${e} header`);
        if (r === void 0) return;
        let n = hp[e];
        if (n === void 0 && (n = e.toLowerCase(), hp[n] === void 0 && !fp(n))) throw new ge("invalid header key");
        if (Array.isArray(r)) {
          let A = [];
          for (let i = 0; i < r.length; i++) if (typeof r[i] == "string") {
            if (!dp(r[i])) throw new ge(`invalid ${e} header`);
            A.push(r[i]);
          } else if (r[i] === null) A.push("");
          else {
            if (typeof r[i] == "object") throw new ge(`invalid ${e} header`);
            A.push(`${r[i]}`);
          }
          r = A;
        } else if (typeof r == "string") {
          if (!dp(r)) throw new ge(`invalid ${e} header`);
        } else r === null ? r = "" : r = `${r}`;
        if (t.host === null && n === "host") {
          if (typeof r != "string") throw new ge("invalid host header");
          t.host = r;
        } else if (t.contentLength === null && n === "content-length") {
          if (t.contentLength = parseInt(r, 10), !Number.isFinite(t.contentLength)) throw new ge("invalid content-length header");
        } else if (t.contentType === null && n === "content-type") t.contentType = r, t.headers.push(e, r);
        else {
          if (n === "transfer-encoding" || n === "keep-alive" || n === "upgrade") throw new ge(`invalid ${n} header`);
          if (n === "connection") {
            let A = typeof r == "string" ? r.toLowerCase() : null;
            if (A !== "close" && A !== "keep-alive") throw new ge("invalid connection header");
            A === "close" && (t.reset = true);
          } else {
            if (n === "expect") throw new kM("expect header not supported");
            t.headers.push(e, r);
          }
        }
      }
      Qp.exports = Tg;
    });
    var va = C((N$, Bp) => {
      "use strict";
      var { InvalidArgumentError: WM } = H();
      Bp.exports = class Ip {
        #e;
        constructor(e) {
          this.#e = e;
        }
        static wrap(e) {
          return e.onRequestStart ? e : new Ip(e);
        }
        onConnect(e, r) {
          return this.#e.onConnect?.(e, r);
        }
        onHeaders(e, r, n, A) {
          return this.#e.onHeaders?.(e, r, n, A);
        }
        onUpgrade(e, r, n) {
          return this.#e.onUpgrade?.(e, r, n);
        }
        onData(e) {
          return this.#e.onData?.(e);
        }
        onComplete(e) {
          return this.#e.onComplete?.(e);
        }
        onError(e) {
          if (!this.#e.onError) throw e;
          return this.#e.onError?.(e);
        }
        onRequestStart(e, r) {
          this.#e.onConnect?.((n) => e.abort(n), r);
        }
        onRequestUpgrade(e, r, n, A) {
          let i = [];
          for (let [s, o] of Object.entries(n)) i.push(Buffer.from(s), Array.isArray(o) ? o.map((a) => Buffer.from(a)) : Buffer.from(o));
          this.#e.onUpgrade?.(r, i, A);
        }
        onResponseStart(e, r, n, A) {
          let i = [];
          for (let [s, o] of Object.entries(n)) i.push(Buffer.from(s), Array.isArray(o) ? o.map((a) => Buffer.from(a)) : Buffer.from(o));
          this.#e.onHeaders?.(r, i, () => e.resume(), A) === false && e.pause();
        }
        onResponseData(e, r) {
          this.#e.onData?.(r) === false && e.pause();
        }
        onResponseEnd(e, r) {
          let n = [];
          for (let [A, i] of Object.entries(r)) n.push(Buffer.from(A), Array.isArray(i) ? i.map((s) => Buffer.from(s)) : Buffer.from(i));
          this.#e.onComplete?.(n);
        }
        onResponseError(e, r) {
          if (!this.#e.onError) throw new WM("invalid onError method");
          this.#e.onError?.(r);
        }
      };
    });
    var zi = C((F$, pp) => {
      "use strict";
      var _M = __require("node:events"), jM = va(), ZM = (t) => (e, r) => t(e, jM.wrap(r)), xg = class extends _M {
        dispatch() {
          throw new Error("not implemented");
        }
        close() {
          throw new Error("not implemented");
        }
        destroy() {
          throw new Error("not implemented");
        }
        compose(...e) {
          let r = Array.isArray(e[0]) ? e[0] : e, n = this.dispatch.bind(this);
          for (let A of r) if (A != null) {
            if (typeof A != "function") throw new TypeError(`invalid interceptor, expected function received ${typeof A}`);
            if (n = A(n), n = ZM(n), n == null || typeof n != "function" || n.length !== 2) throw new TypeError("invalid interceptor");
          }
          return new Proxy(this, { get: (A, i) => i === "dispatch" ? n : A[i] });
        }
      };
      pp.exports = xg;
    });
    var wp = C((T$, yp) => {
      "use strict";
      var { parseHeaders: Ug } = Y(), { InvalidArgumentError: XM } = H(), kg = Symbol("resume"), Mg = class {
        #e = false;
        #t = null;
        #r = false;
        #n;
        [kg] = null;
        constructor(e) {
          this.#n = e;
        }
        pause() {
          this.#e = true;
        }
        resume() {
          this.#e && (this.#e = false, this[kg]?.());
        }
        abort(e) {
          this.#r || (this.#r = true, this.#t = e, this.#n(e));
        }
        get aborted() {
          return this.#r;
        }
        get reason() {
          return this.#t;
        }
        get paused() {
          return this.#e;
        }
      };
      yp.exports = class mp {
        #e;
        #t;
        constructor(e) {
          this.#e = e;
        }
        static unwrap(e) {
          return e.onRequestStart ? new mp(e) : e;
        }
        onConnect(e, r) {
          this.#t = new Mg(e), this.#e.onRequestStart?.(this.#t, r);
        }
        onUpgrade(e, r, n) {
          this.#e.onRequestUpgrade?.(this.#t, e, Ug(r), n);
        }
        onHeaders(e, r, n, A) {
          return this.#t[kg] = n, this.#e.onResponseStart?.(this.#t, e, Ug(r), A), !this.#t.paused;
        }
        onData(e) {
          return this.#e.onResponseData?.(this.#t, e), !this.#t.paused;
        }
        onComplete(e) {
          this.#e.onResponseEnd?.(this.#t, Ug(e));
        }
        onError(e) {
          if (!this.#e.onResponseError) throw new XM("invalid onError method");
          this.#e.onResponseError?.(this.#t, e);
        }
      };
    });
    var DA = C((x$, Dp) => {
      "use strict";
      var $M = zi(), KM = wp(), { ClientDestroyedError: Lg, ClientClosedError: zM, InvalidArgumentError: Pa } = H(), { kDestroy: eL, kClose: tL, kClosed: es, kDestroyed: yA, kDispatch: rL } = ne(), ur = Symbol("onDestroyed"), wA = Symbol("onClosed"), vg = class extends $M {
        constructor() {
          super(), this[yA] = false, this[ur] = null, this[es] = false, this[wA] = [];
        }
        get destroyed() {
          return this[yA];
        }
        get closed() {
          return this[es];
        }
        close(e) {
          if (e === void 0) return new Promise((n, A) => {
            this.close((i, s) => i ? A(i) : n(s));
          });
          if (typeof e != "function") throw new Pa("invalid callback");
          if (this[yA]) {
            queueMicrotask(() => e(new Lg(), null));
            return;
          }
          if (this[es]) {
            this[wA] ? this[wA].push(e) : queueMicrotask(() => e(null, null));
            return;
          }
          this[es] = true, this[wA].push(e);
          let r = () => {
            let n = this[wA];
            this[wA] = null;
            for (let A = 0; A < n.length; A++) n[A](null, null);
          };
          this[tL]().then(() => this.destroy()).then(() => {
            queueMicrotask(r);
          });
        }
        destroy(e, r) {
          if (typeof e == "function" && (r = e, e = null), r === void 0) return new Promise((A, i) => {
            this.destroy(e, (s, o) => s ? i(s) : A(o));
          });
          if (typeof r != "function") throw new Pa("invalid callback");
          if (this[yA]) {
            this[ur] ? this[ur].push(r) : queueMicrotask(() => r(null, null));
            return;
          }
          e || (e = new Lg()), this[yA] = true, this[ur] = this[ur] || [], this[ur].push(r);
          let n = () => {
            let A = this[ur];
            this[ur] = null;
            for (let i = 0; i < A.length; i++) A[i](null, null);
          };
          this[eL](e).then(() => {
            queueMicrotask(n);
          });
        }
        dispatch(e, r) {
          if (!r || typeof r != "object") throw new Pa("handler must be an object");
          r = KM.unwrap(r);
          try {
            if (!e || typeof e != "object") throw new Pa("opts must be an object.");
            if (this[yA] || this[ur]) throw new Lg();
            if (this[es]) throw new zM();
            return this[rL](e, r);
          } catch (n) {
            if (typeof r.onError != "function") throw n;
            return r.onError(n), false;
          }
        }
      };
      Dp.exports = vg;
    });
    var qg = C((U$, Np) => {
      "use strict";
      var RA = 0, Pg = 1e3, Yg = (Pg >> 1) - 1, gr, Gg = Symbol("kFastTimer"), Er = [], Og = -2, Vg = -1, Sp = 0, Rp = 1;
      function Hg() {
        RA += Yg;
        let t = 0, e = Er.length;
        for (; t < e; ) {
          let r = Er[t];
          r._state === Sp ? (r._idleStart = RA - Yg, r._state = Rp) : r._state === Rp && RA >= r._idleStart + r._idleTimeout && (r._state = Vg, r._idleStart = -1, r._onTimeout(r._timerArg)), r._state === Vg ? (r._state = Og, --e !== 0 && (Er[t] = Er[e])) : ++t;
        }
        Er.length = e, Er.length !== 0 && bp();
      }
      function bp() {
        gr ? gr.refresh() : (clearTimeout(gr), gr = setTimeout(Hg, Yg), gr.unref && gr.unref());
      }
      var Ya = class {
        [Gg] = true;
        _state = Og;
        _idleTimeout = -1;
        _idleStart = -1;
        _onTimeout;
        _timerArg;
        constructor(e, r, n) {
          this._onTimeout = e, this._idleTimeout = r, this._timerArg = n, this.refresh();
        }
        refresh() {
          this._state === Og && Er.push(this), (!gr || Er.length === 1) && bp(), this._state = Sp;
        }
        clear() {
          this._state = Vg, this._idleStart = -1;
        }
      };
      Np.exports = { setTimeout(t, e, r) {
        return e <= Pg ? setTimeout(t, e, r) : new Ya(t, e, r);
      }, clearTimeout(t) {
        t[Gg] ? t.clear() : clearTimeout(t);
      }, setFastTimeout(t, e, r) {
        return new Ya(t, e, r);
      }, clearFastTimeout(t) {
        t.clear();
      }, now() {
        return RA;
      }, tick(t = 0) {
        RA += t - Pg + 1, Hg(), Hg();
      }, reset() {
        RA = 0, Er.length = 0, clearTimeout(gr), gr = null;
      }, kFastTimer: Gg };
    });
    var ts = C((L$, kp) => {
      "use strict";
      var nL = __require("node:net"), Fp = __require("node:assert"), Up = Y(), { InvalidArgumentError: AL, ConnectTimeoutError: iL } = H(), Ga = qg();
      function Tp() {
      }
      var Jg, Wg;
      global.FinalizationRegistry && !(process.env.NODE_V8_COVERAGE || process.env.UNDICI_NO_FG) ? Wg = class {
        constructor(e) {
          this._maxCachedSessions = e, this._sessionCache = /* @__PURE__ */ new Map(), this._sessionRegistry = new global.FinalizationRegistry((r) => {
            if (this._sessionCache.size < this._maxCachedSessions) return;
            let n = this._sessionCache.get(r);
            n !== void 0 && n.deref() === void 0 && this._sessionCache.delete(r);
          });
        }
        get(e) {
          let r = this._sessionCache.get(e);
          return r ? r.deref() : null;
        }
        set(e, r) {
          this._maxCachedSessions !== 0 && (this._sessionCache.set(e, new WeakRef(r)), this._sessionRegistry.register(r, e));
        }
      } : Wg = class {
        constructor(e) {
          this._maxCachedSessions = e, this._sessionCache = /* @__PURE__ */ new Map();
        }
        get(e) {
          return this._sessionCache.get(e);
        }
        set(e, r) {
          if (this._maxCachedSessions !== 0) {
            if (this._sessionCache.size >= this._maxCachedSessions) {
              let { value: n } = this._sessionCache.keys().next();
              this._sessionCache.delete(n);
            }
            this._sessionCache.set(e, r);
          }
        }
      };
      function sL({ allowH2: t, maxCachedSessions: e, socketPath: r, timeout: n, session: A, ...i }) {
        if (e != null && (!Number.isInteger(e) || e < 0)) throw new AL("maxCachedSessions must be a positive integer or zero");
        let s = { path: r, ...i }, o = new Wg(e ?? 100);
        return n = n ?? 1e4, t = t ?? false, function({ hostname: c, host: l, protocol: u, port: g, servername: E, localAddress: h, httpSocket: f }, B) {
          let Q;
          if (u === "https:") {
            Jg || (Jg = __require("node:tls")), E = E || s.servername || Up.getServerName(l) || null;
            let p = E || c;
            Fp(p);
            let w = A || o.get(p) || null;
            g = g || 443, Q = Jg.connect({ highWaterMark: 16384, ...s, servername: E, session: w, localAddress: h, ALPNProtocols: t ? ["http/1.1", "h2"] : ["http/1.1"], socket: f, port: g, host: c }), Q.on("session", function(D) {
              o.set(p, D);
            });
          } else Fp(!f, "httpSocket can only be sent on TLS update"), g = g || 80, Q = nL.connect({ highWaterMark: 64 * 1024, ...s, localAddress: h, port: g, host: c });
          if (s.keepAlive == null || s.keepAlive) {
            let p = s.keepAliveInitialDelay === void 0 ? 6e4 : s.keepAliveInitialDelay;
            Q.setKeepAlive(true, p);
          }
          let I = oL(new WeakRef(Q), { timeout: n, hostname: c, port: g });
          return Q.setNoDelay(true).once(u === "https:" ? "secureConnect" : "connect", function() {
            if (queueMicrotask(I), B) {
              let p = B;
              B = null, p(null, this);
            }
          }).on("error", function(p) {
            if (queueMicrotask(I), B) {
              let w = B;
              B = null, w(p);
            }
          }), Q;
        };
      }
      var oL = process.platform === "win32" ? (t, e) => {
        if (!e.timeout) return Tp;
        let r = null, n = null, A = Ga.setFastTimeout(() => {
          r = setImmediate(() => {
            n = setImmediate(() => xp(t.deref(), e));
          });
        }, e.timeout);
        return () => {
          Ga.clearFastTimeout(A), clearImmediate(r), clearImmediate(n);
        };
      } : (t, e) => {
        if (!e.timeout) return Tp;
        let r = null, n = Ga.setFastTimeout(() => {
          r = setImmediate(() => {
            xp(t.deref(), e);
          });
        }, e.timeout);
        return () => {
          Ga.clearFastTimeout(n), clearImmediate(r);
        };
      };
      function xp(t, e) {
        if (t == null) return;
        let r = "Connect Timeout Error";
        Array.isArray(t.autoSelectFamilyAttemptedAddresses) ? r += ` (attempted addresses: ${t.autoSelectFamilyAttemptedAddresses.join(", ")},` : r += ` (attempted address: ${e.hostname}:${e.port},`, r += ` timeout: ${e.timeout}ms)`, Up.destroy(t, new iL(r));
      }
      kp.exports = sL;
    });
    var Mp = C((Oa) => {
      "use strict";
      Object.defineProperty(Oa, "__esModule", { value: true });
      Oa.enumToMap = void 0;
      function aL(t, e = [], r = []) {
        var n, A;
        let i = ((n = e?.length) !== null && n !== void 0 ? n : 0) === 0, s = ((A = r?.length) !== null && A !== void 0 ? A : 0) === 0;
        return Object.fromEntries(Object.entries(t).filter(([, o]) => typeof o == "number" && (i || e.includes(o)) && (s || !r.includes(o))));
      }
      Oa.enumToMap = aL;
    });
    var Lp = C((d) => {
      "use strict";
      Object.defineProperty(d, "__esModule", { value: true });
      d.SPECIAL_HEADERS = d.MINOR = d.MAJOR = d.HTAB_SP_VCHAR_OBS_TEXT = d.QUOTED_STRING = d.CONNECTION_TOKEN_CHARS = d.HEADER_CHARS = d.TOKEN = d.HEX = d.URL_CHAR = d.USERINFO_CHARS = d.MARK = d.ALPHANUM = d.NUM = d.HEX_MAP = d.NUM_MAP = d.ALPHA = d.STATUSES_HTTP = d.H_METHOD_MAP = d.METHOD_MAP = d.METHODS_RTSP = d.METHODS_ICE = d.METHODS_HTTP = d.HEADER_STATE = d.FINISH = d.STATUSES = d.METHODS = d.LENIENT_FLAGS = d.FLAGS = d.TYPE = d.ERROR = void 0;
      var cL = Mp();
      d.ERROR = { OK: 0, INTERNAL: 1, STRICT: 2, CR_EXPECTED: 25, LF_EXPECTED: 3, UNEXPECTED_CONTENT_LENGTH: 4, UNEXPECTED_SPACE: 30, CLOSED_CONNECTION: 5, INVALID_METHOD: 6, INVALID_URL: 7, INVALID_CONSTANT: 8, INVALID_VERSION: 9, INVALID_HEADER_TOKEN: 10, INVALID_CONTENT_LENGTH: 11, INVALID_CHUNK_SIZE: 12, INVALID_STATUS: 13, INVALID_EOF_STATE: 14, INVALID_TRANSFER_ENCODING: 15, CB_MESSAGE_BEGIN: 16, CB_HEADERS_COMPLETE: 17, CB_MESSAGE_COMPLETE: 18, CB_CHUNK_HEADER: 19, CB_CHUNK_COMPLETE: 20, PAUSED: 21, PAUSED_UPGRADE: 22, PAUSED_H2_UPGRADE: 23, USER: 24, CB_URL_COMPLETE: 26, CB_STATUS_COMPLETE: 27, CB_METHOD_COMPLETE: 32, CB_VERSION_COMPLETE: 33, CB_HEADER_FIELD_COMPLETE: 28, CB_HEADER_VALUE_COMPLETE: 29, CB_CHUNK_EXTENSION_NAME_COMPLETE: 34, CB_CHUNK_EXTENSION_VALUE_COMPLETE: 35, CB_RESET: 31 };
      d.TYPE = { BOTH: 0, REQUEST: 1, RESPONSE: 2 };
      d.FLAGS = { CONNECTION_KEEP_ALIVE: 1, CONNECTION_CLOSE: 2, CONNECTION_UPGRADE: 4, CHUNKED: 8, UPGRADE: 16, CONTENT_LENGTH: 32, SKIPBODY: 64, TRAILING: 128, TRANSFER_ENCODING: 512 };
      d.LENIENT_FLAGS = { HEADERS: 1, CHUNKED_LENGTH: 2, KEEP_ALIVE: 4, TRANSFER_ENCODING: 8, VERSION: 16, DATA_AFTER_CLOSE: 32, OPTIONAL_LF_AFTER_CR: 64, OPTIONAL_CRLF_AFTER_CHUNK: 128, OPTIONAL_CR_BEFORE_LF: 256, SPACES_AFTER_CHUNK_SIZE: 512 };
      d.METHODS = { DELETE: 0, GET: 1, HEAD: 2, POST: 3, PUT: 4, CONNECT: 5, OPTIONS: 6, TRACE: 7, COPY: 8, LOCK: 9, MKCOL: 10, MOVE: 11, PROPFIND: 12, PROPPATCH: 13, SEARCH: 14, UNLOCK: 15, BIND: 16, REBIND: 17, UNBIND: 18, ACL: 19, REPORT: 20, MKACTIVITY: 21, CHECKOUT: 22, MERGE: 23, "M-SEARCH": 24, NOTIFY: 25, SUBSCRIBE: 26, UNSUBSCRIBE: 27, PATCH: 28, PURGE: 29, MKCALENDAR: 30, LINK: 31, UNLINK: 32, SOURCE: 33, PRI: 34, DESCRIBE: 35, ANNOUNCE: 36, SETUP: 37, PLAY: 38, PAUSE: 39, TEARDOWN: 40, GET_PARAMETER: 41, SET_PARAMETER: 42, REDIRECT: 43, RECORD: 44, FLUSH: 45, QUERY: 46 };
      d.STATUSES = { CONTINUE: 100, SWITCHING_PROTOCOLS: 101, PROCESSING: 102, EARLY_HINTS: 103, RESPONSE_IS_STALE: 110, REVALIDATION_FAILED: 111, DISCONNECTED_OPERATION: 112, HEURISTIC_EXPIRATION: 113, MISCELLANEOUS_WARNING: 199, OK: 200, CREATED: 201, ACCEPTED: 202, NON_AUTHORITATIVE_INFORMATION: 203, NO_CONTENT: 204, RESET_CONTENT: 205, PARTIAL_CONTENT: 206, MULTI_STATUS: 207, ALREADY_REPORTED: 208, TRANSFORMATION_APPLIED: 214, IM_USED: 226, MISCELLANEOUS_PERSISTENT_WARNING: 299, MULTIPLE_CHOICES: 300, MOVED_PERMANENTLY: 301, FOUND: 302, SEE_OTHER: 303, NOT_MODIFIED: 304, USE_PROXY: 305, SWITCH_PROXY: 306, TEMPORARY_REDIRECT: 307, PERMANENT_REDIRECT: 308, BAD_REQUEST: 400, UNAUTHORIZED: 401, PAYMENT_REQUIRED: 402, FORBIDDEN: 403, NOT_FOUND: 404, METHOD_NOT_ALLOWED: 405, NOT_ACCEPTABLE: 406, PROXY_AUTHENTICATION_REQUIRED: 407, REQUEST_TIMEOUT: 408, CONFLICT: 409, GONE: 410, LENGTH_REQUIRED: 411, PRECONDITION_FAILED: 412, PAYLOAD_TOO_LARGE: 413, URI_TOO_LONG: 414, UNSUPPORTED_MEDIA_TYPE: 415, RANGE_NOT_SATISFIABLE: 416, EXPECTATION_FAILED: 417, IM_A_TEAPOT: 418, PAGE_EXPIRED: 419, ENHANCE_YOUR_CALM: 420, MISDIRECTED_REQUEST: 421, UNPROCESSABLE_ENTITY: 422, LOCKED: 423, FAILED_DEPENDENCY: 424, TOO_EARLY: 425, UPGRADE_REQUIRED: 426, PRECONDITION_REQUIRED: 428, TOO_MANY_REQUESTS: 429, REQUEST_HEADER_FIELDS_TOO_LARGE_UNOFFICIAL: 430, REQUEST_HEADER_FIELDS_TOO_LARGE: 431, LOGIN_TIMEOUT: 440, NO_RESPONSE: 444, RETRY_WITH: 449, BLOCKED_BY_PARENTAL_CONTROL: 450, UNAVAILABLE_FOR_LEGAL_REASONS: 451, CLIENT_CLOSED_LOAD_BALANCED_REQUEST: 460, INVALID_X_FORWARDED_FOR: 463, REQUEST_HEADER_TOO_LARGE: 494, SSL_CERTIFICATE_ERROR: 495, SSL_CERTIFICATE_REQUIRED: 496, HTTP_REQUEST_SENT_TO_HTTPS_PORT: 497, INVALID_TOKEN: 498, CLIENT_CLOSED_REQUEST: 499, INTERNAL_SERVER_ERROR: 500, NOT_IMPLEMENTED: 501, BAD_GATEWAY: 502, SERVICE_UNAVAILABLE: 503, GATEWAY_TIMEOUT: 504, HTTP_VERSION_NOT_SUPPORTED: 505, VARIANT_ALSO_NEGOTIATES: 506, INSUFFICIENT_STORAGE: 507, LOOP_DETECTED: 508, BANDWIDTH_LIMIT_EXCEEDED: 509, NOT_EXTENDED: 510, NETWORK_AUTHENTICATION_REQUIRED: 511, WEB_SERVER_UNKNOWN_ERROR: 520, WEB_SERVER_IS_DOWN: 521, CONNECTION_TIMEOUT: 522, ORIGIN_IS_UNREACHABLE: 523, TIMEOUT_OCCURED: 524, SSL_HANDSHAKE_FAILED: 525, INVALID_SSL_CERTIFICATE: 526, RAILGUN_ERROR: 527, SITE_IS_OVERLOADED: 529, SITE_IS_FROZEN: 530, IDENTITY_PROVIDER_AUTHENTICATION_ERROR: 561, NETWORK_READ_TIMEOUT: 598, NETWORK_CONNECT_TIMEOUT: 599 };
      d.FINISH = { SAFE: 0, SAFE_WITH_CB: 1, UNSAFE: 2 };
      d.HEADER_STATE = { GENERAL: 0, CONNECTION: 1, CONTENT_LENGTH: 2, TRANSFER_ENCODING: 3, UPGRADE: 4, CONNECTION_KEEP_ALIVE: 5, CONNECTION_CLOSE: 6, CONNECTION_UPGRADE: 7, TRANSFER_ENCODING_CHUNKED: 8 };
      d.METHODS_HTTP = [d.METHODS.DELETE, d.METHODS.GET, d.METHODS.HEAD, d.METHODS.POST, d.METHODS.PUT, d.METHODS.CONNECT, d.METHODS.OPTIONS, d.METHODS.TRACE, d.METHODS.COPY, d.METHODS.LOCK, d.METHODS.MKCOL, d.METHODS.MOVE, d.METHODS.PROPFIND, d.METHODS.PROPPATCH, d.METHODS.SEARCH, d.METHODS.UNLOCK, d.METHODS.BIND, d.METHODS.REBIND, d.METHODS.UNBIND, d.METHODS.ACL, d.METHODS.REPORT, d.METHODS.MKACTIVITY, d.METHODS.CHECKOUT, d.METHODS.MERGE, d.METHODS["M-SEARCH"], d.METHODS.NOTIFY, d.METHODS.SUBSCRIBE, d.METHODS.UNSUBSCRIBE, d.METHODS.PATCH, d.METHODS.PURGE, d.METHODS.MKCALENDAR, d.METHODS.LINK, d.METHODS.UNLINK, d.METHODS.PRI, d.METHODS.SOURCE, d.METHODS.QUERY];
      d.METHODS_ICE = [d.METHODS.SOURCE];
      d.METHODS_RTSP = [d.METHODS.OPTIONS, d.METHODS.DESCRIBE, d.METHODS.ANNOUNCE, d.METHODS.SETUP, d.METHODS.PLAY, d.METHODS.PAUSE, d.METHODS.TEARDOWN, d.METHODS.GET_PARAMETER, d.METHODS.SET_PARAMETER, d.METHODS.REDIRECT, d.METHODS.RECORD, d.METHODS.FLUSH, d.METHODS.GET, d.METHODS.POST];
      d.METHOD_MAP = (0, cL.enumToMap)(d.METHODS);
      d.H_METHOD_MAP = Object.fromEntries(Object.entries(d.METHODS).filter(([t]) => t.startsWith("H")));
      d.STATUSES_HTTP = [d.STATUSES.CONTINUE, d.STATUSES.SWITCHING_PROTOCOLS, d.STATUSES.PROCESSING, d.STATUSES.EARLY_HINTS, d.STATUSES.RESPONSE_IS_STALE, d.STATUSES.REVALIDATION_FAILED, d.STATUSES.DISCONNECTED_OPERATION, d.STATUSES.HEURISTIC_EXPIRATION, d.STATUSES.MISCELLANEOUS_WARNING, d.STATUSES.OK, d.STATUSES.CREATED, d.STATUSES.ACCEPTED, d.STATUSES.NON_AUTHORITATIVE_INFORMATION, d.STATUSES.NO_CONTENT, d.STATUSES.RESET_CONTENT, d.STATUSES.PARTIAL_CONTENT, d.STATUSES.MULTI_STATUS, d.STATUSES.ALREADY_REPORTED, d.STATUSES.TRANSFORMATION_APPLIED, d.STATUSES.IM_USED, d.STATUSES.MISCELLANEOUS_PERSISTENT_WARNING, d.STATUSES.MULTIPLE_CHOICES, d.STATUSES.MOVED_PERMANENTLY, d.STATUSES.FOUND, d.STATUSES.SEE_OTHER, d.STATUSES.NOT_MODIFIED, d.STATUSES.USE_PROXY, d.STATUSES.SWITCH_PROXY, d.STATUSES.TEMPORARY_REDIRECT, d.STATUSES.PERMANENT_REDIRECT, d.STATUSES.BAD_REQUEST, d.STATUSES.UNAUTHORIZED, d.STATUSES.PAYMENT_REQUIRED, d.STATUSES.FORBIDDEN, d.STATUSES.NOT_FOUND, d.STATUSES.METHOD_NOT_ALLOWED, d.STATUSES.NOT_ACCEPTABLE, d.STATUSES.PROXY_AUTHENTICATION_REQUIRED, d.STATUSES.REQUEST_TIMEOUT, d.STATUSES.CONFLICT, d.STATUSES.GONE, d.STATUSES.LENGTH_REQUIRED, d.STATUSES.PRECONDITION_FAILED, d.STATUSES.PAYLOAD_TOO_LARGE, d.STATUSES.URI_TOO_LONG, d.STATUSES.UNSUPPORTED_MEDIA_TYPE, d.STATUSES.RANGE_NOT_SATISFIABLE, d.STATUSES.EXPECTATION_FAILED, d.STATUSES.IM_A_TEAPOT, d.STATUSES.PAGE_EXPIRED, d.STATUSES.ENHANCE_YOUR_CALM, d.STATUSES.MISDIRECTED_REQUEST, d.STATUSES.UNPROCESSABLE_ENTITY, d.STATUSES.LOCKED, d.STATUSES.FAILED_DEPENDENCY, d.STATUSES.TOO_EARLY, d.STATUSES.UPGRADE_REQUIRED, d.STATUSES.PRECONDITION_REQUIRED, d.STATUSES.TOO_MANY_REQUESTS, d.STATUSES.REQUEST_HEADER_FIELDS_TOO_LARGE_UNOFFICIAL, d.STATUSES.REQUEST_HEADER_FIELDS_TOO_LARGE, d.STATUSES.LOGIN_TIMEOUT, d.STATUSES.NO_RESPONSE, d.STATUSES.RETRY_WITH, d.STATUSES.BLOCKED_BY_PARENTAL_CONTROL, d.STATUSES.UNAVAILABLE_FOR_LEGAL_REASONS, d.STATUSES.CLIENT_CLOSED_LOAD_BALANCED_REQUEST, d.STATUSES.INVALID_X_FORWARDED_FOR, d.STATUSES.REQUEST_HEADER_TOO_LARGE, d.STATUSES.SSL_CERTIFICATE_ERROR, d.STATUSES.SSL_CERTIFICATE_REQUIRED, d.STATUSES.HTTP_REQUEST_SENT_TO_HTTPS_PORT, d.STATUSES.INVALID_TOKEN, d.STATUSES.CLIENT_CLOSED_REQUEST, d.STATUSES.INTERNAL_SERVER_ERROR, d.STATUSES.NOT_IMPLEMENTED, d.STATUSES.BAD_GATEWAY, d.STATUSES.SERVICE_UNAVAILABLE, d.STATUSES.GATEWAY_TIMEOUT, d.STATUSES.HTTP_VERSION_NOT_SUPPORTED, d.STATUSES.VARIANT_ALSO_NEGOTIATES, d.STATUSES.INSUFFICIENT_STORAGE, d.STATUSES.LOOP_DETECTED, d.STATUSES.BANDWIDTH_LIMIT_EXCEEDED, d.STATUSES.NOT_EXTENDED, d.STATUSES.NETWORK_AUTHENTICATION_REQUIRED, d.STATUSES.WEB_SERVER_UNKNOWN_ERROR, d.STATUSES.WEB_SERVER_IS_DOWN, d.STATUSES.CONNECTION_TIMEOUT, d.STATUSES.ORIGIN_IS_UNREACHABLE, d.STATUSES.TIMEOUT_OCCURED, d.STATUSES.SSL_HANDSHAKE_FAILED, d.STATUSES.INVALID_SSL_CERTIFICATE, d.STATUSES.RAILGUN_ERROR, d.STATUSES.SITE_IS_OVERLOADED, d.STATUSES.SITE_IS_FROZEN, d.STATUSES.IDENTITY_PROVIDER_AUTHENTICATION_ERROR, d.STATUSES.NETWORK_READ_TIMEOUT, d.STATUSES.NETWORK_CONNECT_TIMEOUT];
      d.ALPHA = [];
      for (let t = 65; t <= 90; t++) d.ALPHA.push(String.fromCharCode(t)), d.ALPHA.push(String.fromCharCode(t + 32));
      d.NUM_MAP = { 0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9 };
      d.HEX_MAP = { 0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15 };
      d.NUM = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
      d.ALPHANUM = d.ALPHA.concat(d.NUM);
      d.MARK = ["-", "_", ".", "!", "~", "*", "'", "(", ")"];
      d.USERINFO_CHARS = d.ALPHANUM.concat(d.MARK).concat(["%", ";", ":", "&", "=", "+", "$", ","]);
      d.URL_CHAR = ["!", '"', "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", ":", ";", "<", "=", ">", "@", "[", "\\", "]", "^", "_", "`", "{", "|", "}", "~"].concat(d.ALPHANUM);
      d.HEX = d.NUM.concat(["a", "b", "c", "d", "e", "f", "A", "B", "C", "D", "E", "F"]);
      d.TOKEN = ["!", "#", "$", "%", "&", "'", "*", "+", "-", ".", "^", "_", "`", "|", "~"].concat(d.ALPHANUM);
      d.HEADER_CHARS = ["	"];
      for (let t = 32; t <= 255; t++) t !== 127 && d.HEADER_CHARS.push(t);
      d.CONNECTION_TOKEN_CHARS = d.HEADER_CHARS.filter((t) => t !== 44);
      d.QUOTED_STRING = ["	", " "];
      for (let t = 33; t <= 255; t++) t !== 34 && t !== 92 && d.QUOTED_STRING.push(t);
      d.HTAB_SP_VCHAR_OBS_TEXT = ["	", " "];
      for (let t = 33; t <= 126; t++) d.HTAB_SP_VCHAR_OBS_TEXT.push(t);
      for (let t = 128; t <= 255; t++) d.HTAB_SP_VCHAR_OBS_TEXT.push(t);
      d.MAJOR = d.NUM_MAP;
      d.MINOR = d.MAJOR;
      d.SPECIAL_HEADERS = { connection: d.HEADER_STATE.CONNECTION, "content-length": d.HEADER_STATE.CONTENT_LENGTH, "proxy-connection": d.HEADER_STATE.CONNECTION, "transfer-encoding": d.HEADER_STATE.TRANSFER_ENCODING, upgrade: d.HEADER_STATE.UPGRADE };
    });
    var jg = C((Y$, vp) => {
      "use strict";
      var { Buffer: lL } = __require("node:buffer"), uL = "", _g;
      Object.defineProperty(vp, "exports", { get: () => _g || (_g = lL.from(uL, "base64")) });
    });
    var Yp = C((G$, Pp) => {
      "use strict";
      var { Buffer: gL } = __require("node:buffer"), EL = "", Zg;
      Object.defineProperty(Pp, "exports", { get: () => Zg || (Zg = gL.from(EL, "base64")) });
    });
    var rs = C((O$, _p) => {
      "use strict";
      var Gp = ["GET", "HEAD", "POST"], dL = new Set(Gp), hL = [101, 204, 205, 304], Op = [301, 302, 303, 307, 308], fL = new Set(Op), Vp = ["1", "7", "9", "11", "13", "15", "17", "19", "20", "21", "22", "23", "25", "37", "42", "43", "53", "69", "77", "79", "87", "95", "101", "102", "103", "104", "109", "110", "111", "113", "115", "117", "119", "123", "135", "137", "139", "143", "161", "179", "389", "427", "465", "512", "513", "514", "515", "526", "530", "531", "532", "540", "548", "554", "556", "563", "587", "601", "636", "989", "990", "993", "995", "1719", "1720", "1723", "2049", "3659", "4045", "4190", "5060", "5061", "6000", "6566", "6665", "6666", "6667", "6668", "6669", "6679", "6697", "10080"], QL = new Set(Vp), Hp = ["no-referrer", "no-referrer-when-downgrade", "same-origin", "origin", "strict-origin", "origin-when-cross-origin", "strict-origin-when-cross-origin", "unsafe-url"], CL = ["", ...Hp], IL = new Set(Hp), BL = ["follow", "manual", "error"], qp = ["GET", "HEAD", "OPTIONS", "TRACE"], pL = new Set(qp), mL = ["navigate", "same-origin", "no-cors", "cors"], yL = ["omit", "same-origin", "include"], wL = ["default", "no-store", "reload", "no-cache", "force-cache", "only-if-cached"], DL = ["content-encoding", "content-language", "content-location", "content-type", "content-length"], RL = ["half"], Jp = ["CONNECT", "TRACE", "TRACK"], SL = new Set(Jp), Wp = ["audio", "audioworklet", "font", "image", "manifest", "paintworklet", "script", "style", "track", "video", "xslt", ""], bL = new Set(Wp);
      _p.exports = { subresource: Wp, forbiddenMethods: Jp, requestBodyHeader: DL, referrerPolicy: CL, requestRedirect: BL, requestMode: mL, requestCredentials: yL, requestCache: wL, redirectStatus: Op, corsSafeListedMethods: Gp, nullBodyStatus: hL, safeMethods: qp, badPorts: Vp, requestDuplex: RL, subresourceSet: bL, badPortsSet: QL, redirectStatusSet: fL, corsSafeListedMethodsSet: dL, safeMethodsSet: pL, forbiddenMethodsSet: SL, referrerPolicyTokens: IL };
    });
    var $g = C((V$, jp) => {
      "use strict";
      var Xg = Symbol.for("undici.globalOrigin.1");
      function NL() {
        return globalThis[Xg];
      }
      function FL(t) {
        if (t === void 0) {
          Object.defineProperty(globalThis, Xg, { value: void 0, writable: true, enumerable: false, configurable: false });
          return;
        }
        let e = new URL(t);
        if (e.protocol !== "http:" && e.protocol !== "https:") throw new TypeError(`Only http & https urls are allowed, received ${e.protocol}`);
        Object.defineProperty(globalThis, Xg, { value: e, writable: true, enumerable: false, configurable: false });
      }
      jp.exports = { getGlobalOrigin: NL, setGlobalOrigin: FL };
    });
    var tt = C((H$, tm) => {
      "use strict";
      var Ha = __require("node:assert"), TL = new TextEncoder(), ns = /^[!#$%&'*+\-.^_|~A-Za-z0-9]+$/, xL = /[\u000A\u000D\u0009\u0020]/, UL = /[\u0009\u000A\u000C\u000D\u0020]/g, kL = /^[\u0009\u0020-\u007E\u0080-\u00FF]+$/;
      function ML(t) {
        Ha(t.protocol === "data:");
        let e = $p(t, true);
        e = e.slice(5);
        let r = { position: 0 }, n = SA(",", e, r), A = n.length;
        if (n = OL(n, true, true), r.position >= e.length) return "failure";
        r.position++;
        let i = e.slice(A + 1), s = Kp(i);
        if (/;(\u0020){0,}base64$/i.test(n)) {
          let a = em(s);
          if (s = vL(a), s === "failure") return "failure";
          n = n.slice(0, -6), n = n.replace(/(\u0020)+$/, ""), n = n.slice(0, -1);
        }
        n.startsWith(";") && (n = "text/plain" + n);
        let o = Kg(n);
        return o === "failure" && (o = Kg("text/plain;charset=US-ASCII")), { mimeType: o, body: s };
      }
      function $p(t, e = false) {
        if (!e) return t.href;
        let r = t.href, n = t.hash.length, A = n === 0 ? r : r.substring(0, r.length - n);
        return !n && r.endsWith("#") ? A.slice(0, -1) : A;
      }
      function qa(t, e, r) {
        let n = "";
        for (; r.position < e.length && t(e[r.position]); ) n += e[r.position], r.position++;
        return n;
      }
      function SA(t, e, r) {
        let n = e.indexOf(t, r.position), A = r.position;
        return n === -1 ? (r.position = e.length, e.slice(A)) : (r.position = n, e.slice(A, r.position));
      }
      function Kp(t) {
        let e = TL.encode(t);
        return LL(e);
      }
      function Zp(t) {
        return t >= 48 && t <= 57 || t >= 65 && t <= 70 || t >= 97 && t <= 102;
      }
      function Xp(t) {
        return t >= 48 && t <= 57 ? t - 48 : (t & 223) - 55;
      }
      function LL(t) {
        let e = t.length, r = new Uint8Array(e), n = 0;
        for (let A = 0; A < e; ++A) {
          let i = t[A];
          i !== 37 ? r[n++] = i : i === 37 && !(Zp(t[A + 1]) && Zp(t[A + 2])) ? r[n++] = 37 : (r[n++] = Xp(t[A + 1]) << 4 | Xp(t[A + 2]), A += 2);
        }
        return e === n ? r : r.subarray(0, n);
      }
      function Kg(t) {
        t = Va(t, true, true);
        let e = { position: 0 }, r = SA("/", t, e);
        if (r.length === 0 || !ns.test(r) || e.position >= t.length) return "failure";
        e.position++;
        let n = SA(";", t, e);
        if (n = Va(n, false, true), n.length === 0 || !ns.test(n)) return "failure";
        let A = r.toLowerCase(), i = n.toLowerCase(), s = { type: A, subtype: i, parameters: /* @__PURE__ */ new Map(), essence: `${A}/${i}` };
        for (; e.position < t.length; ) {
          e.position++, qa((c) => xL.test(c), t, e);
          let o = qa((c) => c !== ";" && c !== "=", t, e);
          if (o = o.toLowerCase(), e.position < t.length) {
            if (t[e.position] === ";") continue;
            e.position++;
          }
          if (e.position >= t.length) break;
          let a = null;
          if (t[e.position] === '"') a = zp(t, e, true), SA(";", t, e);
          else if (a = SA(";", t, e), a = Va(a, false, true), a.length === 0) continue;
          o.length !== 0 && ns.test(o) && (a.length === 0 || kL.test(a)) && !s.parameters.has(o) && s.parameters.set(o, a);
        }
        return s;
      }
      function vL(t) {
        t = t.replace(UL, "");
        let e = t.length;
        if (e % 4 === 0 && t.charCodeAt(e - 1) === 61 && (--e, t.charCodeAt(e - 1) === 61 && --e), e % 4 === 1 || /[^+/0-9A-Za-z]/.test(t.length === e ? t : t.substring(0, e))) return "failure";
        let r = Buffer.from(t, "base64");
        return new Uint8Array(r.buffer, r.byteOffset, r.byteLength);
      }
      function zp(t, e, r = false) {
        let n = e.position, A = "";
        for (Ha(t[e.position] === '"'), e.position++; A += qa((s) => s !== '"' && s !== "\\", t, e), !(e.position >= t.length); ) {
          let i = t[e.position];
          if (e.position++, i === "\\") {
            if (e.position >= t.length) {
              A += "\\";
              break;
            }
            A += t[e.position], e.position++;
          } else {
            Ha(i === '"');
            break;
          }
        }
        return r ? A : t.slice(n, e.position);
      }
      function PL(t) {
        Ha(t !== "failure");
        let { parameters: e, essence: r } = t, n = r;
        for (let [A, i] of e.entries()) n += ";", n += A, n += "=", ns.test(i) || (i = i.replace(/(\\|")/g, "\\$1"), i = '"' + i, i += '"'), n += i;
        return n;
      }
      function YL(t) {
        return t === 13 || t === 10 || t === 9 || t === 32;
      }
      function Va(t, e = true, r = true) {
        return zg(t, e, r, YL);
      }
      function GL(t) {
        return t === 13 || t === 10 || t === 9 || t === 12 || t === 32;
      }
      function OL(t, e = true, r = true) {
        return zg(t, e, r, GL);
      }
      function zg(t, e, r, n) {
        let A = 0, i = t.length - 1;
        if (e) for (; A < t.length && n(t.charCodeAt(A)); ) A++;
        if (r) for (; i > 0 && n(t.charCodeAt(i)); ) i--;
        return A === 0 && i === t.length - 1 ? t : t.slice(A, i + 1);
      }
      function em(t) {
        let e = t.length;
        if (65535 > e) return String.fromCharCode.apply(null, t);
        let r = "", n = 0, A = 65535;
        for (; n < e; ) n + A > e && (A = e - n), r += String.fromCharCode.apply(null, t.subarray(n, n += A));
        return r;
      }
      function VL(t) {
        switch (t.essence) {
          case "application/ecmascript":
          case "application/javascript":
          case "application/x-ecmascript":
          case "application/x-javascript":
          case "text/ecmascript":
          case "text/javascript":
          case "text/javascript1.0":
          case "text/javascript1.1":
          case "text/javascript1.2":
          case "text/javascript1.3":
          case "text/javascript1.4":
          case "text/javascript1.5":
          case "text/jscript":
          case "text/livescript":
          case "text/x-ecmascript":
          case "text/x-javascript":
            return "text/javascript";
          case "application/json":
          case "text/json":
            return "application/json";
          case "image/svg+xml":
            return "image/svg+xml";
          case "text/xml":
          case "application/xml":
            return "application/xml";
        }
        return t.subtype.endsWith("+json") ? "application/json" : t.subtype.endsWith("+xml") ? "application/xml" : "";
      }
      tm.exports = { dataURLProcessor: ML, URLSerializer: $p, collectASequenceOfCodePoints: qa, collectASequenceOfCodePointsFast: SA, stringPercentDecode: Kp, parseMIMEType: Kg, collectAnHTTPQuotedString: zp, serializeAMimeType: PL, removeChars: zg, removeHTTPWhitespace: Va, minimizeSupportedMimeType: VL, HTTP_TOKEN_CODEPOINTS: ns, isomorphicDecode: em };
    });
    var Te = C((q$, nm) => {
      "use strict";
      var { types: dn, inspect: HL } = __require("node:util"), { markAsUncloneable: qL } = __require("node:worker_threads"), { toUSVString: JL } = Y(), eE = 1, tE = 2, Ja = 3, Wa = 4, rE = 5, nE = 6, AE = 7, Ht = 8, rm = Function.call.bind(Function.prototype[Symbol.hasInstance]), m = { converters: {}, util: {}, errors: {}, is: {} };
      m.errors.exception = function(t) {
        return new TypeError(`${t.header}: ${t.message}`);
      };
      m.errors.conversionFailed = function(t) {
        let e = t.types.length === 1 ? "" : " one of", r = `${t.argument} could not be converted to${e}: ${t.types.join(", ")}.`;
        return m.errors.exception({ header: t.prefix, message: r });
      };
      m.errors.invalidArgument = function(t) {
        return m.errors.exception({ header: t.prefix, message: `"${t.value}" is an invalid ${t.type}.` });
      };
      m.brandCheck = function(t, e) {
        if (!rm(e, t)) {
          let r = new TypeError("Illegal invocation");
          throw r.code = "ERR_INVALID_THIS", r;
        }
      };
      m.brandCheckMultiple = function(t) {
        let e = t.map((r) => m.util.MakeTypeAssertion(r));
        return (r) => {
          if (e.every((n) => !n(r))) {
            let n = new TypeError("Illegal invocation");
            throw n.code = "ERR_INVALID_THIS", n;
          }
        };
      };
      m.argumentLengthCheck = function({ length: t }, e, r) {
        if (t < e) throw m.errors.exception({ message: `${e} argument${e !== 1 ? "s" : ""} required, but${t ? " only" : ""} ${t} found.`, header: r });
      };
      m.illegalConstructor = function() {
        throw m.errors.exception({ header: "TypeError", message: "Illegal constructor" });
      };
      m.util.MakeTypeAssertion = function(t) {
        return (e) => rm(t, e);
      };
      m.util.Type = function(t) {
        switch (typeof t) {
          case "undefined":
            return eE;
          case "boolean":
            return tE;
          case "string":
            return Ja;
          case "symbol":
            return Wa;
          case "number":
            return rE;
          case "bigint":
            return nE;
          case "function":
          case "object":
            return t === null ? AE : Ht;
        }
      };
      m.util.Types = { UNDEFINED: eE, BOOLEAN: tE, STRING: Ja, SYMBOL: Wa, NUMBER: rE, BIGINT: nE, NULL: AE, OBJECT: Ht };
      m.util.TypeValueToString = function(t) {
        switch (m.util.Type(t)) {
          case eE:
            return "Undefined";
          case tE:
            return "Boolean";
          case Ja:
            return "String";
          case Wa:
            return "Symbol";
          case rE:
            return "Number";
          case nE:
            return "BigInt";
          case AE:
            return "Null";
          case Ht:
            return "Object";
        }
      };
      m.util.markAsUncloneable = qL || (() => {
      });
      m.util.ConvertToInt = function(t, e, r, n) {
        let A, i;
        e === 64 ? (A = Math.pow(2, 53) - 1, r === "unsigned" ? i = 0 : i = Math.pow(-2, 53) + 1) : r === "unsigned" ? (i = 0, A = Math.pow(2, e) - 1) : (i = Math.pow(-2, e) - 1, A = Math.pow(2, e - 1) - 1);
        let s = Number(t);
        if (s === 0 && (s = 0), n?.enforceRange === true) {
          if (Number.isNaN(s) || s === Number.POSITIVE_INFINITY || s === Number.NEGATIVE_INFINITY) throw m.errors.exception({ header: "Integer conversion", message: `Could not convert ${m.util.Stringify(t)} to an integer.` });
          if (s = m.util.IntegerPart(s), s < i || s > A) throw m.errors.exception({ header: "Integer conversion", message: `Value must be between ${i}-${A}, got ${s}.` });
          return s;
        }
        return !Number.isNaN(s) && n?.clamp === true ? (s = Math.min(Math.max(s, i), A), Math.floor(s) % 2 === 0 ? s = Math.floor(s) : s = Math.ceil(s), s) : Number.isNaN(s) || s === 0 && Object.is(0, s) || s === Number.POSITIVE_INFINITY || s === Number.NEGATIVE_INFINITY ? 0 : (s = m.util.IntegerPart(s), s = s % Math.pow(2, e), r === "signed" && s >= Math.pow(2, e) - 1 ? s - Math.pow(2, e) : s);
      };
      m.util.IntegerPart = function(t) {
        let e = Math.floor(Math.abs(t));
        return t < 0 ? -1 * e : e;
      };
      m.util.Stringify = function(t) {
        switch (m.util.Type(t)) {
          case Wa:
            return `Symbol(${t.description})`;
          case Ht:
            return HL(t);
          case Ja:
            return `"${t}"`;
          default:
            return `${t}`;
        }
      };
      m.sequenceConverter = function(t) {
        return (e, r, n, A) => {
          if (m.util.Type(e) !== Ht) throw m.errors.exception({ header: r, message: `${n} (${m.util.Stringify(e)}) is not iterable.` });
          let i = typeof A == "function" ? A() : e?.[Symbol.iterator]?.(), s = [], o = 0;
          if (i === void 0 || typeof i.next != "function") throw m.errors.exception({ header: r, message: `${n} is not iterable.` });
          for (; ; ) {
            let { done: a, value: c } = i.next();
            if (a) break;
            s.push(t(c, r, `${n}[${o++}]`));
          }
          return s;
        };
      };
      m.recordConverter = function(t, e) {
        return (r, n, A) => {
          if (m.util.Type(r) !== Ht) throw m.errors.exception({ header: n, message: `${A} ("${m.util.TypeValueToString(r)}") is not an Object.` });
          let i = {};
          if (!dn.isProxy(r)) {
            let o = [...Object.getOwnPropertyNames(r), ...Object.getOwnPropertySymbols(r)];
            for (let a of o) {
              let c = m.util.Stringify(a), l = t(a, n, `Key ${c} in ${A}`), u = e(r[a], n, `${A}[${c}]`);
              i[l] = u;
            }
            return i;
          }
          let s = Reflect.ownKeys(r);
          for (let o of s) if (Reflect.getOwnPropertyDescriptor(r, o)?.enumerable) {
            let c = t(o, n, A), l = e(r[o], n, A);
            i[c] = l;
          }
          return i;
        };
      };
      m.interfaceConverter = function(t, e) {
        return (r, n, A) => {
          if (!t(r)) throw m.errors.exception({ header: n, message: `Expected ${A} ("${m.util.Stringify(r)}") to be an instance of ${e}.` });
          return r;
        };
      };
      m.dictionaryConverter = function(t) {
        return (e, r, n) => {
          let A = {};
          if (e != null && m.util.Type(e) !== Ht) throw m.errors.exception({ header: r, message: `Expected ${e} to be one of: Null, Undefined, Object.` });
          for (let i of t) {
            let { key: s, defaultValue: o, required: a, converter: c } = i;
            if (a === true && (e == null || !Object.hasOwn(e, s))) throw m.errors.exception({ header: r, message: `Missing required key "${s}".` });
            let l = e?.[s], u = o !== void 0;
            if (u && l === void 0 && (l = o()), a || u || l !== void 0) {
              if (l = c(l, r, `${n}.${s}`), i.allowedValues && !i.allowedValues.includes(l)) throw m.errors.exception({ header: r, message: `${l} is not an accepted type. Expected one of ${i.allowedValues.join(", ")}.` });
              A[s] = l;
            }
          }
          return A;
        };
      };
      m.nullableConverter = function(t) {
        return (e, r, n) => e === null ? e : t(e, r, n);
      };
      m.is.ReadableStream = m.util.MakeTypeAssertion(ReadableStream);
      m.is.Blob = m.util.MakeTypeAssertion(Blob);
      m.is.URLSearchParams = m.util.MakeTypeAssertion(URLSearchParams);
      m.is.File = m.util.MakeTypeAssertion(globalThis.File ?? __require("node:buffer").File);
      m.is.URL = m.util.MakeTypeAssertion(URL);
      m.is.AbortSignal = m.util.MakeTypeAssertion(AbortSignal);
      m.is.MessagePort = m.util.MakeTypeAssertion(MessagePort);
      m.converters.DOMString = function(t, e, r, n) {
        if (t === null && n?.legacyNullToEmptyString) return "";
        if (typeof t == "symbol") throw m.errors.exception({ header: e, message: `${r} is a symbol, which cannot be converted to a DOMString.` });
        return String(t);
      };
      m.converters.ByteString = function(t, e, r) {
        if (typeof t == "symbol") throw m.errors.exception({ header: e, message: `${r} is a symbol, which cannot be converted to a ByteString.` });
        let n = String(t);
        for (let A = 0; A < n.length; A++) if (n.charCodeAt(A) > 255) throw new TypeError(`Cannot convert argument to a ByteString because the character at index ${A} has a value of ${n.charCodeAt(A)} which is greater than 255.`);
        return n;
      };
      m.converters.USVString = JL;
      m.converters.boolean = function(t) {
        return !!t;
      };
      m.converters.any = function(t) {
        return t;
      };
      m.converters["long long"] = function(t, e, r) {
        return m.util.ConvertToInt(t, 64, "signed", void 0, e, r);
      };
      m.converters["unsigned long long"] = function(t, e, r) {
        return m.util.ConvertToInt(t, 64, "unsigned", void 0, e, r);
      };
      m.converters["unsigned long"] = function(t, e, r) {
        return m.util.ConvertToInt(t, 32, "unsigned", void 0, e, r);
      };
      m.converters["unsigned short"] = function(t, e, r, n) {
        return m.util.ConvertToInt(t, 16, "unsigned", n, e, r);
      };
      m.converters.ArrayBuffer = function(t, e, r, n) {
        if (m.util.Type(t) !== Ht || !dn.isAnyArrayBuffer(t)) throw m.errors.conversionFailed({ prefix: e, argument: `${r} ("${m.util.Stringify(t)}")`, types: ["ArrayBuffer"] });
        if (n?.allowShared === false && dn.isSharedArrayBuffer(t)) throw m.errors.exception({ header: "ArrayBuffer", message: "SharedArrayBuffer is not allowed." });
        if (t.resizable || t.growable) throw m.errors.exception({ header: "ArrayBuffer", message: "Received a resizable ArrayBuffer." });
        return t;
      };
      m.converters.TypedArray = function(t, e, r, n, A) {
        if (m.util.Type(t) !== Ht || !dn.isTypedArray(t) || t.constructor.name !== e.name) throw m.errors.conversionFailed({ prefix: r, argument: `${n} ("${m.util.Stringify(t)}")`, types: [e.name] });
        if (A?.allowShared === false && dn.isSharedArrayBuffer(t.buffer)) throw m.errors.exception({ header: "ArrayBuffer", message: "SharedArrayBuffer is not allowed." });
        if (t.buffer.resizable || t.buffer.growable) throw m.errors.exception({ header: "ArrayBuffer", message: "Received a resizable ArrayBuffer." });
        return t;
      };
      m.converters.DataView = function(t, e, r, n) {
        if (m.util.Type(t) !== Ht || !dn.isDataView(t)) throw m.errors.exception({ header: e, message: `${r} is not a DataView.` });
        if (n?.allowShared === false && dn.isSharedArrayBuffer(t.buffer)) throw m.errors.exception({ header: "ArrayBuffer", message: "SharedArrayBuffer is not allowed." });
        if (t.buffer.resizable || t.buffer.growable) throw m.errors.exception({ header: "ArrayBuffer", message: "Received a resizable ArrayBuffer." });
        return t;
      };
      m.converters["sequence<ByteString>"] = m.sequenceConverter(m.converters.ByteString);
      m.converters["sequence<sequence<ByteString>>"] = m.sequenceConverter(m.converters["sequence<ByteString>"]);
      m.converters["record<ByteString, ByteString>"] = m.recordConverter(m.converters.ByteString, m.converters.ByteString);
      m.converters.Blob = m.interfaceConverter(m.is.Blob, "Blob");
      m.converters.AbortSignal = m.interfaceConverter(m.is.AbortSignal, "AbortSignal");
      nm.exports = { webidl: m };
    });
    var Ve = C((J$, Im) => {
      "use strict";
      var { Transform: WL } = __require("node:stream"), Am = __require("node:zlib"), { redirectStatusSet: _L, referrerPolicyTokens: jL, badPortsSet: ZL } = rs(), { getGlobalOrigin: im } = $g(), { collectASequenceOfCodePoints: hn, collectAnHTTPQuotedString: XL, removeChars: $L, parseMIMEType: KL } = tt(), { performance: zL } = __require("node:perf_hooks"), { ReadableStreamFrom: ev, isValidHTTPToken: sm, normalizedMethodRecordsBase: tv } = Y(), Cn = __require("node:assert"), { isUint8Array: rv } = __require("node:util/types"), { webidl: Hr } = Te(), om = [], ja;
      try {
        ja = __require("node:crypto");
        let t = ["sha256", "sha384", "sha512"];
        om = ja.getHashes().filter((e) => t.includes(e));
      } catch {
      }
      function am(t) {
        let e = t.urlList, r = e.length;
        return r === 0 ? null : e[r - 1].toString();
      }
      function nv(t, e) {
        if (!_L.has(t.status)) return null;
        let r = t.headersList.get("location", true);
        return r !== null && lm(r) && (cm(r) || (r = Av(r)), r = new URL(r, am(t))), r && !r.hash && (r.hash = e), r;
      }
      function cm(t) {
        for (let e = 0; e < t.length; ++e) {
          let r = t.charCodeAt(e);
          if (r > 126 || r < 32) return false;
        }
        return true;
      }
      function Av(t) {
        return Buffer.from(t, "binary").toString("utf8");
      }
      function Qn(t) {
        return t.urlList[t.urlList.length - 1];
      }
      function iv(t) {
        let e = Qn(t);
        return Qm(e) && ZL.has(e.port) ? "blocked" : "allowed";
      }
      function sv(t) {
        return t instanceof Error || t?.constructor?.name === "Error" || t?.constructor?.name === "DOMException";
      }
      function ov(t) {
        for (let e = 0; e < t.length; ++e) {
          let r = t.charCodeAt(e);
          if (!(r === 9 || r >= 32 && r <= 126 || r >= 128 && r <= 255)) return false;
        }
        return true;
      }
      var av = sm;
      function lm(t) {
        return (t[0] === "	" || t[0] === " " || t[t.length - 1] === "	" || t[t.length - 1] === " " || t.includes(`
`) || t.includes("\r") || t.includes("\0")) === false;
      }
      function cv(t) {
        let e = (t.headersList.get("referrer-policy", true) ?? "").split(","), r = "";
        if (e.length) for (let n = e.length; n !== 0; n--) {
          let A = e[n - 1].trim();
          if (jL.has(A)) {
            r = A;
            break;
          }
        }
        return r;
      }
      function lv(t, e) {
        let r = cv(e);
        r !== "" && (t.referrerPolicy = r);
      }
      function uv() {
        return "allowed";
      }
      function gv() {
        return "success";
      }
      function Ev() {
        return "success";
      }
      function dv(t) {
        let e = null;
        e = t.mode, t.headersList.set("sec-fetch-mode", e, true);
      }
      function hv(t) {
        let e = t.origin;
        if (!(e === "client" || e === void 0)) {
          if (t.responseTainting === "cors" || t.mode === "websocket") t.headersList.append("origin", e, true);
          else if (t.method !== "GET" && t.method !== "HEAD") {
            switch (t.referrerPolicy) {
              case "no-referrer":
                e = null;
                break;
              case "no-referrer-when-downgrade":
              case "strict-origin":
              case "strict-origin-when-cross-origin":
                t.origin && sE(t.origin) && !sE(Qn(t)) && (e = null);
                break;
              case "same-origin":
                As(t, Qn(t)) || (e = null);
                break;
              default:
            }
            t.headersList.append("origin", e, true);
          }
        }
      }
      function bA(t, e) {
        return t;
      }
      function fv(t, e, r) {
        return !t?.startTime || t.startTime < e ? { domainLookupStartTime: e, domainLookupEndTime: e, connectionStartTime: e, connectionEndTime: e, secureConnectionStartTime: e, ALPNNegotiatedProtocol: t?.ALPNNegotiatedProtocol } : { domainLookupStartTime: bA(t.domainLookupStartTime, r), domainLookupEndTime: bA(t.domainLookupEndTime, r), connectionStartTime: bA(t.connectionStartTime, r), connectionEndTime: bA(t.connectionEndTime, r), secureConnectionStartTime: bA(t.secureConnectionStartTime, r), ALPNNegotiatedProtocol: t.ALPNNegotiatedProtocol };
      }
      function Qv(t) {
        return bA(zL.now(), t);
      }
      function Cv(t) {
        return { startTime: t.startTime ?? 0, redirectStartTime: 0, redirectEndTime: 0, postRedirectStartTime: t.startTime ?? 0, finalServiceWorkerStartTime: 0, finalNetworkResponseStartTime: 0, finalNetworkRequestStartTime: 0, endTime: 0, encodedBodySize: 0, decodedBodySize: 0, finalConnectionTimingInfo: null };
      }
      function um() {
        return { referrerPolicy: "strict-origin-when-cross-origin" };
      }
      function Iv(t) {
        return { referrerPolicy: t.referrerPolicy };
      }
      function Bv(t) {
        let e = t.referrerPolicy;
        Cn(e);
        let r = null;
        if (t.referrer === "client") {
          let i = im();
          if (!i || i.origin === "null") return "no-referrer";
          r = new URL(i);
        } else Hr.is.URL(t.referrer) && (r = t.referrer);
        let n = iE(r), A = iE(r, true);
        switch (n.toString().length > 4096 && (n = A), e) {
          case "no-referrer":
            return "no-referrer";
          case "origin":
            return A ?? iE(r, true);
          case "unsafe-url":
            return n;
          case "strict-origin": {
            let i = Qn(t);
            return fn(n) && !fn(i) ? "no-referrer" : A;
          }
          case "strict-origin-when-cross-origin": {
            let i = Qn(t);
            return As(n, i) ? n : fn(n) && !fn(i) ? "no-referrer" : A;
          }
          case "same-origin":
            return As(t, n) ? n : "no-referrer";
          case "origin-when-cross-origin":
            return As(t, n) ? n : A;
          case "no-referrer-when-downgrade": {
            let i = Qn(t);
            return fn(n) && !fn(i) ? "no-referrer" : A;
          }
        }
      }
      function iE(t, e = false) {
        return Cn(Hr.is.URL(t)), t = new URL(t), fm(t) ? "no-referrer" : (t.username = "", t.password = "", t.hash = "", e === true && (t.pathname = "", t.search = ""), t);
      }
      var pv = new RegExp("^(?:(?:127\\.)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){2}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[1-9]))$"), mv = new RegExp("^(?:(?:(?:0{1,4}):){7}(?:(?:0{0,3}1))|(?:(?:0{1,4}):){1,6}(?::(?:0{0,3}1))|(?:::(?:0{0,3}1))|)$");
      function gm(t) {
        return t.includes(":") ? (t[0] === "[" && t[t.length - 1] === "]" && (t = t.slice(1, -1)), mv.test(t)) : pv.test(t);
      }
      function yv(t) {
        return t == null || t === "null" ? false : (t = new URL(t), !!(t.protocol === "https:" || t.protocol === "wss:" || gm(t.hostname) || t.hostname === "localhost" || t.hostname === "localhost." || t.hostname.endsWith(".localhost") || t.hostname.endsWith(".localhost.") || t.protocol === "file:"));
      }
      function fn(t) {
        return Hr.is.URL(t) ? t.href === "about:blank" || t.href === "about:srcdoc" || t.protocol === "data:" || t.protocol === "blob:" ? true : yv(t.origin) : false;
      }
      function wv(t, e) {
        if (ja === void 0) return true;
        let r = Em(e);
        if (r === "no metadata" || r.length === 0) return true;
        let n = Rv(r), A = Sv(r, n);
        for (let i of A) {
          let s = i.algo, o = i.hash, a = ja.createHash(s).update(t).digest("base64");
          if (a[a.length - 1] === "=" && (a[a.length - 2] === "=" ? a = a.slice(0, -2) : a = a.slice(0, -1)), bv(a, o)) return true;
        }
        return false;
      }
      var Dv = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i;
      function Em(t) {
        let e = [], r = true;
        for (let n of t.split(" ")) {
          r = false;
          let A = Dv.exec(n);
          if (A === null || A.groups === void 0 || A.groups.algo === void 0) continue;
          let i = A.groups.algo.toLowerCase();
          om.includes(i) && e.push(A.groups);
        }
        return r === true ? "no metadata" : e;
      }
      function Rv(t) {
        let e = t[0].algo;
        if (e[3] === "5") return e;
        for (let r = 1; r < t.length; ++r) {
          let n = t[r];
          if (n.algo[3] === "5") {
            e = "sha512";
            break;
          } else {
            if (e[3] === "3") continue;
            n.algo[3] === "3" && (e = "sha384");
          }
        }
        return e;
      }
      function Sv(t, e) {
        if (t.length === 1) return t;
        let r = 0;
        for (let n = 0; n < t.length; ++n) t[n].algo === e && (t[r++] = t[n]);
        return t.length = r, t;
      }
      function bv(t, e) {
        if (t.length !== e.length) return false;
        for (let r = 0; r < t.length; ++r) if (t[r] !== e[r]) {
          if (t[r] === "+" && e[r] === "-" || t[r] === "/" && e[r] === "_") continue;
          return false;
        }
        return true;
      }
      function Nv(t) {
      }
      function As(t, e) {
        return t.origin === e.origin && t.origin === "null" || t.protocol === e.protocol && t.hostname === e.hostname && t.port === e.port;
      }
      function Fv() {
        let t, e;
        return { promise: new Promise((n, A) => {
          t = n, e = A;
        }), resolve: t, reject: e };
      }
      function Tv(t) {
        return t.controller.state === "aborted";
      }
      function xv(t) {
        return t.controller.state === "aborted" || t.controller.state === "terminated";
      }
      function Uv(t) {
        return tv[t.toLowerCase()] ?? t;
      }
      function kv(t) {
        let e = JSON.stringify(t);
        if (e === void 0) throw new TypeError("Value is not JSON serializable");
        return Cn(typeof e == "string"), e;
      }
      var Mv = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
      function dm(t, e, r = 0, n = 1) {
        class A {
          #e;
          #t;
          #r;
          constructor(s, o) {
            this.#e = s, this.#t = o, this.#r = 0;
          }
          next() {
            if (typeof this != "object" || this === null || !(#e in this)) throw new TypeError(`'next' called on an object that does not implement interface ${t} Iterator.`);
            let s = this.#r, o = e(this.#e), a = o.length;
            if (s >= a) return { value: void 0, done: true };
            let { [r]: c, [n]: l } = o[s];
            this.#r = s + 1;
            let u;
            switch (this.#t) {
              case "key":
                u = c;
                break;
              case "value":
                u = l;
                break;
              case "key+value":
                u = [c, l];
                break;
            }
            return { value: u, done: false };
          }
        }
        return delete A.prototype.constructor, Object.setPrototypeOf(A.prototype, Mv), Object.defineProperties(A.prototype, { [Symbol.toStringTag]: { writable: false, enumerable: false, configurable: true, value: `${t} Iterator` }, next: { writable: true, enumerable: true, configurable: true } }), function(i, s) {
          return new A(i, s);
        };
      }
      function Lv(t, e, r, n = 0, A = 1) {
        let i = dm(t, r, n, A), s = { keys: { writable: true, enumerable: true, configurable: true, value: function() {
          return Hr.brandCheck(this, e), i(this, "key");
        } }, values: { writable: true, enumerable: true, configurable: true, value: function() {
          return Hr.brandCheck(this, e), i(this, "value");
        } }, entries: { writable: true, enumerable: true, configurable: true, value: function() {
          return Hr.brandCheck(this, e), i(this, "key+value");
        } }, forEach: { writable: true, enumerable: true, configurable: true, value: function(a, c = globalThis) {
          if (Hr.brandCheck(this, e), Hr.argumentLengthCheck(arguments, 1, `${t}.forEach`), typeof a != "function") throw new TypeError(`Failed to execute 'forEach' on '${t}': parameter 1 is not of type 'Function'.`);
          for (let { 0: l, 1: u } of i(this, "key+value")) a.call(c, u, l, this);
        } } };
        return Object.defineProperties(e.prototype, { ...s, [Symbol.iterator]: { writable: true, enumerable: false, configurable: true, value: s.entries.value } });
      }
      function vv(t, e, r) {
        let n = e, A = r, i;
        try {
          i = t.stream.getReader();
        } catch (s) {
          A(s);
          return;
        }
        hm(i, n, A);
      }
      function Pv(t) {
        try {
          t.close(), t.byobRequest?.respond(0);
        } catch (e) {
          if (!e.message.includes("Controller is already closed") && !e.message.includes("ReadableStream is already closed")) throw e;
        }
      }
      var Yv = /[^\x00-\xFF]/;
      function _a17(t) {
        return Cn(!Yv.test(t)), t;
      }
      async function hm(t, e, r) {
        let n = [], A = 0;
        try {
          do {
            let { done: i, value: s } = await t.read();
            if (i) {
              e(Buffer.concat(n, A));
              return;
            }
            if (!rv(s)) {
              r(TypeError("Received non-Uint8Array chunk"));
              return;
            }
            n.push(s), A += s.length;
          } while (true);
        } catch (i) {
          r(i);
        }
      }
      function fm(t) {
        Cn("protocol" in t);
        let e = t.protocol;
        return e === "about:" || e === "blob:" || e === "data:";
      }
      function sE(t) {
        return typeof t == "string" && t[5] === ":" && t[0] === "h" && t[1] === "t" && t[2] === "t" && t[3] === "p" && t[4] === "s" || t.protocol === "https:";
      }
      function Qm(t) {
        Cn("protocol" in t);
        let e = t.protocol;
        return e === "http:" || e === "https:";
      }
      function Gv(t, e) {
        let r = t;
        if (!r.startsWith("bytes")) return "failure";
        let n = { position: 5 };
        if (e && hn((a) => a === "	" || a === " ", r, n), r.charCodeAt(n.position) !== 61) return "failure";
        n.position++, e && hn((a) => a === "	" || a === " ", r, n);
        let A = hn((a) => {
          let c = a.charCodeAt(0);
          return c >= 48 && c <= 57;
        }, r, n), i = A.length ? Number(A) : null;
        if (e && hn((a) => a === "	" || a === " ", r, n), r.charCodeAt(n.position) !== 45) return "failure";
        n.position++, e && hn((a) => a === "	" || a === " ", r, n);
        let s = hn((a) => {
          let c = a.charCodeAt(0);
          return c >= 48 && c <= 57;
        }, r, n), o = s.length ? Number(s) : null;
        return n.position < r.length || o === null && i === null || i > o ? "failure" : { rangeStartValue: i, rangeEndValue: o };
      }
      function Ov(t, e, r) {
        let n = "bytes ";
        return n += _a17(`${t}`), n += "-", n += _a17(`${e}`), n += "/", n += _a17(`${r}`), n;
      }
      var oE = class extends WL {
        #e;
        constructor(e) {
          super(), this.#e = e;
        }
        _transform(e, r, n) {
          if (!this._inflateStream) {
            if (e.length === 0) {
              n();
              return;
            }
            this._inflateStream = (e[0] & 15) === 8 ? Am.createInflate(this.#e) : Am.createInflateRaw(this.#e), this._inflateStream.on("data", this.push.bind(this)), this._inflateStream.on("end", () => this.push(null)), this._inflateStream.on("error", (A) => this.destroy(A));
          }
          this._inflateStream.write(e, r, n);
        }
        _final(e) {
          this._inflateStream && (this._inflateStream.end(), this._inflateStream = null), e();
        }
      };
      function Vv(t) {
        return new oE(t);
      }
      function Hv(t) {
        let e = null, r = null, n = null, A = Cm("content-type", t);
        if (A === null) return "failure";
        for (let i of A) {
          let s = KL(i);
          s === "failure" || s.essence === "*/*" || (n = s, n.essence !== r ? (e = null, n.parameters.has("charset") && (e = n.parameters.get("charset")), r = n.essence) : !n.parameters.has("charset") && e !== null && n.parameters.set("charset", e));
        }
        return n ?? "failure";
      }
      function qv(t) {
        let e = t, r = { position: 0 }, n = [], A = "";
        for (; r.position < e.length; ) {
          if (A += hn((i) => i !== '"' && i !== ",", e, r), r.position < e.length) if (e.charCodeAt(r.position) === 34) {
            if (A += XL(e, r), r.position < e.length) continue;
          } else Cn(e.charCodeAt(r.position) === 44), r.position++;
          A = $L(A, true, true, (i) => i === 9 || i === 32), n.push(A), A = "";
        }
        return n;
      }
      function Cm(t, e) {
        let r = e.get(t, true);
        return r === null ? null : qv(r);
      }
      var Jv = new TextDecoder();
      function Wv(t) {
        return t.length === 0 ? "" : (t[0] === 239 && t[1] === 187 && t[2] === 191 && (t = t.subarray(3)), Jv.decode(t));
      }
      var aE = class {
        get baseUrl() {
          return im();
        }
        get origin() {
          return this.baseUrl?.origin;
        }
        policyContainer = um();
      }, cE = class {
        settingsObject = new aE();
      }, _v = new cE();
      Im.exports = { isAborted: Tv, isCancelled: xv, isValidEncodedURL: cm, createDeferredPromise: Fv, ReadableStreamFrom: ev, tryUpgradeRequestToAPotentiallyTrustworthyURL: Nv, clampAndCoarsenConnectionTimingInfo: fv, coarsenedSharedCurrentTime: Qv, determineRequestsReferrer: Bv, makePolicyContainer: um, clonePolicyContainer: Iv, appendFetchMetadata: dv, appendRequestOriginHeader: hv, TAOCheck: Ev, corsCheck: gv, crossOriginResourcePolicyCheck: uv, createOpaqueTimingInfo: Cv, setRequestReferrerPolicyOnRedirect: lv, isValidHTTPToken: sm, requestBadPort: iv, requestCurrentURL: Qn, responseURL: am, responseLocationURL: nv, isURLPotentiallyTrustworthy: fn, isValidReasonPhrase: ov, sameOrigin: As, normalizeMethod: Uv, serializeJavascriptValueToJSONString: kv, iteratorMixin: Lv, createIterator: dm, isValidHeaderName: av, isValidHeaderValue: lm, isErrorLike: sv, fullyReadBody: vv, bytesMatch: wv, readableStreamClose: Pv, isomorphicEncode: _a17, urlIsLocal: fm, urlHasHttpsScheme: sE, urlIsHttpHttpsScheme: Qm, readAllBytes: hm, simpleRangeHeaderValue: Gv, buildContentRange: Ov, parseMetadata: Em, createInflate: Vv, extractMimeType: Hv, getDecodeSplit: Cm, utf8DecodeBytes: Wv, environmentSettingsObject: _v, isOriginIPPotentiallyTrustworthy: gm };
    });
    var Za = C((W$, mm) => {
      "use strict";
      var { iteratorMixin: jv } = Ve(), { kEnumerableProperty: NA } = Y(), { webidl: X } = Te(), { File: Zv } = __require("node:buffer"), Bm = __require("node:util"), pm = globalThis.File ?? Zv, dr = class t {
        #e = [];
        constructor(e) {
          if (X.util.markAsUncloneable(this), e !== void 0) throw X.errors.conversionFailed({ prefix: "FormData constructor", argument: "Argument 1", types: ["undefined"] });
        }
        append(e, r, n = void 0) {
          X.brandCheck(this, t);
          let A = "FormData.append";
          X.argumentLengthCheck(arguments, 2, A), e = X.converters.USVString(e), arguments.length === 3 || X.is.Blob(r) ? (r = X.converters.Blob(r, A, "value"), n !== void 0 && (n = X.converters.USVString(n))) : r = X.converters.USVString(r);
          let i = lE(e, r, n);
          this.#e.push(i);
        }
        delete(e) {
          X.brandCheck(this, t), X.argumentLengthCheck(arguments, 1, "FormData.delete"), e = X.converters.USVString(e), this.#e = this.#e.filter((n) => n.name !== e);
        }
        get(e) {
          X.brandCheck(this, t), X.argumentLengthCheck(arguments, 1, "FormData.get"), e = X.converters.USVString(e);
          let n = this.#e.findIndex((A) => A.name === e);
          return n === -1 ? null : this.#e[n].value;
        }
        getAll(e) {
          return X.brandCheck(this, t), X.argumentLengthCheck(arguments, 1, "FormData.getAll"), e = X.converters.USVString(e), this.#e.filter((n) => n.name === e).map((n) => n.value);
        }
        has(e) {
          return X.brandCheck(this, t), X.argumentLengthCheck(arguments, 1, "FormData.has"), e = X.converters.USVString(e), this.#e.findIndex((n) => n.name === e) !== -1;
        }
        set(e, r, n = void 0) {
          X.brandCheck(this, t);
          let A = "FormData.set";
          X.argumentLengthCheck(arguments, 2, A), e = X.converters.USVString(e), arguments.length === 3 || X.is.Blob(r) ? (r = X.converters.Blob(r, A, "value"), n !== void 0 && (n = X.converters.USVString(n))) : r = X.converters.USVString(r);
          let i = lE(e, r, n), s = this.#e.findIndex((o) => o.name === e);
          s !== -1 ? this.#e = [...this.#e.slice(0, s), i, ...this.#e.slice(s + 1).filter((o) => o.name !== e)] : this.#e.push(i);
        }
        [Bm.inspect.custom](e, r) {
          let n = this.#e.reduce((i, s) => (i[s.name] ? Array.isArray(i[s.name]) ? i[s.name].push(s.value) : i[s.name] = [i[s.name], s.value] : i[s.name] = s.value, i), { __proto__: null });
          r.depth ??= e, r.colors ??= true;
          let A = Bm.formatWithOptions(r, n);
          return `FormData ${A.slice(A.indexOf("]") + 2)}`;
        }
        static getFormDataState(e) {
          return e.#e;
        }
        static setFormDataState(e, r) {
          e.#e = r;
        }
      }, { getFormDataState: Xv, setFormDataState: $v } = dr;
      Reflect.deleteProperty(dr, "getFormDataState");
      Reflect.deleteProperty(dr, "setFormDataState");
      jv("FormData", dr, Xv, "name", "value");
      Object.defineProperties(dr.prototype, { append: NA, delete: NA, get: NA, getAll: NA, has: NA, set: NA, [Symbol.toStringTag]: { value: "FormData", configurable: true } });
      function lE(t, e, r) {
        if (typeof e != "string") {
          if (X.is.File(e) || (e = new pm([e], "blob", { type: e.type })), r !== void 0) {
            let n = { type: e.type, lastModified: e.lastModified };
            e = new pm([e], r, n);
          }
        }
        return { name: t, value: e };
      }
      X.is.FormData = X.util.MakeTypeAssertion(dr);
      mm.exports = { FormData: dr, makeEntry: lE, setFormDataState: $v };
    });
    var Sm = C((_$, Rm) => {
      "use strict";
      var { isUSVString: ym, bufferToLowerCasedHeaderName: Kv } = Y(), { utf8DecodeBytes: zv } = Ve(), { HTTP_TOKEN_CODEPOINTS: eP, isomorphicDecode: wm } = tt(), { makeEntry: tP } = Za(), { webidl: rP } = Te(), Xa = __require("node:assert"), { File: nP } = __require("node:buffer"), AP = globalThis.File ?? nP, iP = Buffer.from('form-data; name="'), sP = Buffer.from("filename"), oP = Buffer.from("--"), aP = Buffer.from(`--\r
`);
      function cP(t) {
        for (let e = 0; e < t.length; ++e) if ((t.charCodeAt(e) & -128) !== 0) return false;
        return true;
      }
      function lP(t) {
        let e = t.length;
        if (e < 27 || e > 70) return false;
        for (let r = 0; r < e; ++r) {
          let n = t.charCodeAt(r);
          if (!(n >= 48 && n <= 57 || n >= 65 && n <= 90 || n >= 97 && n <= 122 || n === 39 || n === 45 || n === 95)) return false;
        }
        return true;
      }
      function uP(t, e) {
        Xa(e !== "failure" && e.essence === "multipart/form-data");
        let r = e.parameters.get("boundary");
        if (r === void 0) throw Et("missing boundary in content-type header");
        let n = Buffer.from(`--${r}`, "utf8"), A = [], i = { position: 0 };
        for (; t[i.position] === 13 && t[i.position + 1] === 10; ) i.position += 2;
        let s = t.length;
        for (; t[s - 1] === 10 && t[s - 2] === 13; ) s -= 2;
        for (s !== t.length && (t = t.subarray(0, s)); ; ) {
          if (t.subarray(i.position, i.position + n.length).equals(n)) i.position += n.length;
          else throw Et("expected a value starting with -- and the boundary");
          if (i.position === t.length - 2 && $a(t, oP, i) || i.position === t.length - 4 && $a(t, aP, i)) return A;
          if (t[i.position] !== 13 || t[i.position + 1] !== 10) throw Et("expected CRLF");
          i.position += 2;
          let o = gP(t, i), { name: a, filename: c, contentType: l, encoding: u } = o;
          i.position += 2;
          let g;
          {
            let h = t.indexOf(n.subarray(2), i.position);
            if (h === -1) throw Et("expected boundary after body");
            g = t.subarray(i.position, h - 4), i.position += g.length, u === "base64" && (g = Buffer.from(g.toString(), "base64"));
          }
          if (t[i.position] !== 13 || t[i.position + 1] !== 10) throw Et("expected CRLF");
          i.position += 2;
          let E;
          c !== null ? (l ??= "text/plain", cP(l) || (l = ""), E = new AP([g], c, { type: l })) : E = zv(Buffer.from(g)), Xa(ym(a)), Xa(typeof E == "string" && ym(E) || rP.is.File(E)), A.push(tP(a, E, c));
        }
      }
      function gP(t, e) {
        let r = null, n = null, A = null, i = null;
        for (; ; ) {
          if (t[e.position] === 13 && t[e.position + 1] === 10) {
            if (r === null) throw Et("header name is null");
            return { name: r, filename: n, contentType: A, encoding: i };
          }
          let s = hr((o) => o !== 10 && o !== 13 && o !== 58, t, e);
          if (s = uE(s, true, true, (o) => o === 9 || o === 32), !eP.test(s.toString())) throw Et("header name does not match the field-name token production");
          if (t[e.position] !== 58) throw Et("expected :");
          switch (e.position++, hr((o) => o === 32 || o === 9, t, e), Kv(s)) {
            case "content-disposition": {
              if (r = n = null, !$a(t, iP, e)) throw Et('expected form-data; name=" for content-disposition header');
              if (e.position += 17, r = Dm(t, e), t[e.position] === 59 && t[e.position + 1] === 32) {
                let o = { position: e.position + 2 };
                if ($a(t, sP, o)) if (t[o.position + 8] === 42) {
                  o.position += 10, hr((c) => c === 32 || c === 9, t, o);
                  let a = hr((c) => c !== 32 && c !== 13 && c !== 10, t, o);
                  if (a[0] !== 117 && a[0] !== 85 || a[1] !== 116 && a[1] !== 84 || a[2] !== 102 && a[2] !== 70 || a[3] !== 45 || a[4] !== 56) throw Et("unknown encoding, expected utf-8''");
                  n = decodeURIComponent(new TextDecoder().decode(a.subarray(7))), e.position = o.position;
                } else e.position += 11, hr((a) => a === 32 || a === 9, t, e), e.position++, n = Dm(t, e);
              }
              break;
            }
            case "content-type": {
              let o = hr((a) => a !== 10 && a !== 13, t, e);
              o = uE(o, false, true, (a) => a === 9 || a === 32), A = wm(o);
              break;
            }
            case "content-transfer-encoding": {
              let o = hr((a) => a !== 10 && a !== 13, t, e);
              o = uE(o, false, true, (a) => a === 9 || a === 32), i = wm(o);
              break;
            }
            default:
              hr((o) => o !== 10 && o !== 13, t, e);
          }
          if (t[e.position] !== 13 && t[e.position + 1] !== 10) throw Et("expected CRLF");
          e.position += 2;
        }
      }
      function Dm(t, e) {
        Xa(t[e.position - 1] === 34);
        let r = hr((n) => n !== 10 && n !== 13 && n !== 34, t, e);
        if (t[e.position] !== 34) throw Et('expected "');
        return e.position++, r = new TextDecoder().decode(r).replace(/%0A/ig, `
`).replace(/%0D/ig, "\r").replace(/%22/g, '"'), r;
      }
      function hr(t, e, r) {
        let n = r.position;
        for (; n < e.length && t(e[n]); ) ++n;
        return e.subarray(r.position, r.position = n);
      }
      function uE(t, e, r, n) {
        let A = 0, i = t.length - 1;
        if (e) for (; A < t.length && n(t[A]); ) A++;
        if (r) for (; i > 0 && n(t[i]); ) i--;
        return A === 0 && i === t.length - 1 ? t : t.subarray(A, i + 1);
      }
      function $a(t, e, r) {
        if (t.length < e.length) return false;
        for (let n = 0; n < e.length; n++) if (e[n] !== t[r.position + n]) return false;
        return true;
      }
      function Et(t) {
        return new TypeError("Failed to parse body as FormData.", { cause: new TypeError(t) });
      }
      Rm.exports = { multipartFormDataParser: uP, validateBoundary: lP };
    });
    var TA = C((j$, km) => {
      "use strict";
      var za = Y(), { ReadableStreamFrom: EP, readableStreamClose: dP, createDeferredPromise: hP, fullyReadBody: fP, extractMimeType: QP, utf8DecodeBytes: Fm } = Ve(), { FormData: bm, setFormDataState: CP } = Za(), { webidl: fr } = Te(), { Blob: IP } = __require("node:buffer"), gE = __require("node:assert"), { isErrored: Tm, isDisturbed: BP } = __require("node:stream"), { isArrayBuffer: pP } = __require("node:util/types"), { serializeAMimeType: mP } = tt(), { multipartFormDataParser: yP } = Sm(), EE;
      try {
        let t = __require("node:crypto");
        EE = (e) => t.randomInt(0, e);
      } catch {
        EE = (t) => Math.floor(Math.random() * t);
      }
      var Ka = new TextEncoder();
      function wP() {
      }
      var dE = globalThis.FinalizationRegistry && process.version.indexOf("v18") !== 0, hE;
      dE && (hE = new FinalizationRegistry((t) => {
        let e = t.deref();
        e && !e.locked && !BP(e) && !Tm(e) && e.cancel("Response object has been garbage collected").catch(wP);
      }));
      function xm(t, e = false) {
        let r = null;
        fr.is.ReadableStream(t) ? r = t : fr.is.Blob(t) ? r = t.stream() : r = new ReadableStream({ async pull(a) {
          let c = typeof A == "string" ? Ka.encode(A) : A;
          c.byteLength && a.enqueue(c), queueMicrotask(() => dP(a));
        }, start() {
        }, type: "bytes" }), gE(fr.is.ReadableStream(r));
        let n = null, A = null, i = null, s = null;
        if (typeof t == "string") A = t, s = "text/plain;charset=UTF-8";
        else if (fr.is.URLSearchParams(t)) A = t.toString(), s = "application/x-www-form-urlencoded;charset=UTF-8";
        else if (pP(t)) A = new Uint8Array(t.slice());
        else if (ArrayBuffer.isView(t)) A = new Uint8Array(t.buffer.slice(t.byteOffset, t.byteOffset + t.byteLength));
        else if (fr.is.FormData(t)) {
          let a = `----formdata-undici-0${`${EE(1e11)}`.padStart(11, "0")}`, c = `--${a}\r
Content-Disposition: form-data`;
          let l = (B) => B.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22"), u = (B) => B.replace(/\r?\n|\r/g, `\r
`), g = [], E = new Uint8Array([13, 10]);
          i = 0;
          let h = false;
          for (let [B, Q] of t) if (typeof Q == "string") {
            let I = Ka.encode(c + `; name="${l(u(B))}"\r
\r
${u(Q)}\r
`);
            g.push(I), i += I.byteLength;
          } else {
            let I = Ka.encode(`${c}; name="${l(u(B))}"` + (Q.name ? `; filename="${l(Q.name)}"` : "") + `\r
Content-Type: ${Q.type || "application/octet-stream"}\r
\r
`);
            g.push(I, Q, E), typeof Q.size == "number" ? i += I.byteLength + Q.size + E.byteLength : h = true;
          }
          let f = Ka.encode(`--${a}--\r
`);
          g.push(f), i += f.byteLength, h && (i = null), A = t, n = async function* () {
            for (let B of g) B.stream ? yield* B.stream() : yield B;
          }, s = `multipart/form-data; boundary=${a}`;
        } else if (fr.is.Blob(t)) A = t, i = t.size, t.type && (s = t.type);
        else if (typeof t[Symbol.asyncIterator] == "function") {
          if (e) throw new TypeError("keepalive");
          if (za.isDisturbed(t) || t.locked) throw new TypeError("Response body object should not be disturbed or locked");
          r = fr.is.ReadableStream(t) ? t : EP(t);
        }
        if ((typeof A == "string" || za.isBuffer(A)) && (i = Buffer.byteLength(A)), n != null) {
          let a;
          r = new ReadableStream({ async start() {
            a = n(t)[Symbol.asyncIterator]();
          }, async pull(c) {
            let { value: l, done: u } = await a.next();
            if (u) queueMicrotask(() => {
              c.close(), c.byobRequest?.respond(0);
            });
            else if (!Tm(r)) {
              let g = new Uint8Array(l);
              g.byteLength && c.enqueue(g);
            }
            return c.desiredSize > 0;
          }, async cancel(c) {
            await a.return();
          }, type: "bytes" });
        }
        return [{ stream: r, source: A, length: i }, s];
      }
      function DP(t, e = false) {
        return fr.is.ReadableStream(t) && (gE(!za.isDisturbed(t), "The body has already been consumed."), gE(!t.locked, "The stream is locked.")), xm(t, e);
      }
      function RP(t, e) {
        let [r, n] = e.stream.tee();
        return dE && hE.register(t, new WeakRef(r)), e.stream = r, { stream: n, length: e.length, source: e.source };
      }
      function SP(t) {
        if (t.aborted) throw new DOMException("The operation was aborted.", "AbortError");
      }
      function bP(t, e) {
        return { blob() {
          return FA(this, (n) => {
            let A = Nm(e(this));
            return A === null ? A = "" : A && (A = mP(A)), new IP([n], { type: A });
          }, t, e);
        }, arrayBuffer() {
          return FA(this, (n) => new Uint8Array(n).buffer, t, e);
        }, text() {
          return FA(this, Fm, t, e);
        }, json() {
          return FA(this, FP, t, e);
        }, formData() {
          return FA(this, (n) => {
            let A = Nm(e(this));
            if (A !== null) switch (A.essence) {
              case "multipart/form-data": {
                let i = yP(n, A), s = new bm();
                return CP(s, i), s;
              }
              case "application/x-www-form-urlencoded": {
                let i = new URLSearchParams(n.toString()), s = new bm();
                for (let [o, a] of i) s.append(o, a);
                return s;
              }
            }
            throw new TypeError('Content-Type was not one of "multipart/form-data" or "application/x-www-form-urlencoded".');
          }, t, e);
        }, bytes() {
          return FA(this, (n) => new Uint8Array(n), t, e);
        } };
      }
      function NP(t, e) {
        Object.assign(t.prototype, bP(t, e));
      }
      async function FA(t, e, r, n) {
        fr.brandCheck(t, r);
        let A = n(t);
        if (Um(A)) throw new TypeError("Body is unusable: Body has already been read");
        SP(A);
        let i = hP(), s = (a) => i.reject(a), o = (a) => {
          try {
            i.resolve(e(a));
          } catch (c) {
            s(c);
          }
        };
        return A.body == null ? (o(Buffer.allocUnsafe(0)), i.promise) : (fP(A.body, o, s), i.promise);
      }
      function Um(t) {
        let e = t.body;
        return e != null && (e.stream.locked || za.isDisturbed(e.stream));
      }
      function FP(t) {
        return JSON.parse(Fm(t));
      }
      function Nm(t) {
        let e = t.headersList, r = QP(e);
        return r === "failure" ? null : r;
      }
      km.exports = { extractBody: xm, safelyExtractBody: DP, cloneBody: RP, mixinBody: NP, streamRegistry: hE, hasFinalizationRegistry: dE, bodyUnusable: Um };
    });
    var Jm = C((Z$, qm) => {
      "use strict";
      var U = __require("node:assert"), k = Y(), { channels: Mm } = lr(), fE = qg(), { RequestContentLengthMismatchError: In, ResponseContentLengthMismatchError: TP, RequestAbortedError: Om, HeadersTimeoutError: xP, HeadersOverflowError: UP, SocketError: os, InformationalError: xA, BodyTimeoutError: kP, HTTPParserError: MP, ResponseExceededMaxSizeError: LP } = H(), { kUrl: Vm, kReset: je, kClient: wE, kParser: de, kBlocking: as, kRunning: Me, kPending: vP, kSize: Lm, kWriting: Jr, kQueue: yt, kNoRef: is, kKeepAliveDefaultTimeout: PP, kHostHeader: YP, kPendingIdx: GP, kRunningIdx: dt, kError: ht, kPipelining: rc, kSocket: UA, kKeepAliveTimeoutValue: Ac, kMaxHeadersSize: OP, kKeepAliveMaxTimeout: VP, kKeepAliveTimeoutThreshold: HP, kHeadersTimeout: qP, kBodyTimeout: JP, kStrictContentLength: IE, kMaxRequests: vm, kCounter: WP, kMaxResponseSize: _P, kOnError: jP, kResume: qr, kHTTPContext: Hm, kClosed: BE } = ne(), qt = Lp(), ZP = Buffer.alloc(0), ec = Buffer[Symbol.species], XP = k.removeAllListeners, QE;
      async function $P() {
        let t = process.env.JEST_WORKER_ID ? jg() : void 0, e;
        try {
          e = await WebAssembly.compile(Yp());
        } catch {
          e = await WebAssembly.compile(t || jg());
        }
        return await WebAssembly.instantiate(e, { env: { wasm_on_url: (r, n, A) => 0, wasm_on_status: (r, n, A) => {
          U(ye.ptr === r);
          let i = n - Wt + Jt.byteOffset;
          return ye.onStatus(new ec(Jt.buffer, i, A));
        }, wasm_on_message_begin: (r) => (U(ye.ptr === r), ye.onMessageBegin()), wasm_on_header_field: (r, n, A) => {
          U(ye.ptr === r);
          let i = n - Wt + Jt.byteOffset;
          return ye.onHeaderField(new ec(Jt.buffer, i, A));
        }, wasm_on_header_value: (r, n, A) => {
          U(ye.ptr === r);
          let i = n - Wt + Jt.byteOffset;
          return ye.onHeaderValue(new ec(Jt.buffer, i, A));
        }, wasm_on_headers_complete: (r, n, A, i) => (U(ye.ptr === r), ye.onHeadersComplete(n, A === 1, i === 1)), wasm_on_body: (r, n, A) => {
          U(ye.ptr === r);
          let i = n - Wt + Jt.byteOffset;
          return ye.onBody(new ec(Jt.buffer, i, A));
        }, wasm_on_message_complete: (r) => (U(ye.ptr === r), ye.onMessageComplete()) } });
      }
      var CE = null, pE = $P();
      pE.catch();
      var ye = null, Jt = null, tc = 0, Wt = null, KP = 0, ss = 1, kA = 2 | ss, nc = 4 | ss, mE = 8 | KP, yE = class {
        constructor(e, r, { exports: n }) {
          this.llhttp = n, this.ptr = this.llhttp.llhttp_alloc(qt.TYPE.RESPONSE), this.client = e, this.socket = r, this.timeout = null, this.timeoutValue = null, this.timeoutType = null, this.statusCode = 0, this.statusText = "", this.upgrade = false, this.headers = [], this.headersSize = 0, this.headersMaxSize = e[OP], this.shouldKeepAlive = false, this.paused = false, this.resume = this.resume.bind(this), this.bytesRead = 0, this.keepAlive = "", this.contentLength = "", this.connection = "", this.maxResponseSize = e[_P];
        }
        setTimeout(e, r) {
          e !== this.timeoutValue || r & ss ^ this.timeoutType & ss ? (this.timeout && (fE.clearTimeout(this.timeout), this.timeout = null), e && (r & ss ? this.timeout = fE.setFastTimeout(Pm, e, new WeakRef(this)) : (this.timeout = setTimeout(Pm, e, new WeakRef(this)), this.timeout.unref())), this.timeoutValue = e) : this.timeout && this.timeout.refresh && this.timeout.refresh(), this.timeoutType = r;
        }
        resume() {
          this.socket.destroyed || !this.paused || (U(this.ptr != null), U(ye === null), this.llhttp.llhttp_resume(this.ptr), U(this.timeoutType === nc), this.timeout && this.timeout.refresh && this.timeout.refresh(), this.paused = false, this.execute(this.socket.read() || ZP), this.readMore());
        }
        readMore() {
          for (; !this.paused && this.ptr; ) {
            let e = this.socket.read();
            if (e === null) break;
            this.execute(e);
          }
        }
        execute(e) {
          U(ye === null), U(this.ptr != null), U(!this.paused);
          let { socket: r, llhttp: n } = this;
          e.length > tc && (Wt && n.free(Wt), tc = Math.ceil(e.length / 4096) * 4096, Wt = n.malloc(tc)), new Uint8Array(n.memory.buffer, Wt, tc).set(e);
          try {
            let A;
            try {
              Jt = e, ye = this, A = n.llhttp_execute(this.ptr, Wt, e.length);
            } catch (i) {
              throw i;
            } finally {
              ye = null, Jt = null;
            }
            if (A !== qt.ERROR.OK) {
              let i = e.subarray(n.llhttp_get_error_pos(this.ptr) - Wt);
              if (A === qt.ERROR.PAUSED_UPGRADE) this.onUpgrade(i);
              else if (A === qt.ERROR.PAUSED) this.paused = true, r.unshift(i);
              else {
                let s = n.llhttp_get_error_reason(this.ptr), o = "";
                if (s) {
                  let a = new Uint8Array(n.memory.buffer, s).indexOf(0);
                  o = "Response does not match the HTTP/1.1 protocol (" + Buffer.from(n.memory.buffer, s, a).toString() + ")";
                }
                throw new MP(o, qt.ERROR[A], i);
              }
            }
          } catch (A) {
            k.destroy(r, A);
          }
        }
        destroy() {
          U(ye === null), U(this.ptr != null), this.llhttp.llhttp_free(this.ptr), this.ptr = null, this.timeout && fE.clearTimeout(this.timeout), this.timeout = null, this.timeoutValue = null, this.timeoutType = null, this.paused = false;
        }
        onStatus(e) {
          return this.statusText = e.toString(), 0;
        }
        onMessageBegin() {
          let { socket: e, client: r } = this;
          if (e.destroyed) return -1;
          let n = r[yt][r[dt]];
          return n ? (n.onResponseStarted(), 0) : -1;
        }
        onHeaderField(e) {
          let r = this.headers.length;
          return (r & 1) === 0 ? this.headers.push(e) : this.headers[r - 1] = Buffer.concat([this.headers[r - 1], e]), this.trackHeader(e.length), 0;
        }
        onHeaderValue(e) {
          let r = this.headers.length;
          (r & 1) === 1 ? (this.headers.push(e), r += 1) : this.headers[r - 1] = Buffer.concat([this.headers[r - 1], e]);
          let n = this.headers[r - 2];
          if (n.length === 10) {
            let A = k.bufferToLowerCasedHeaderName(n);
            A === "keep-alive" ? this.keepAlive += e.toString() : A === "connection" && (this.connection += e.toString());
          } else n.length === 14 && k.bufferToLowerCasedHeaderName(n) === "content-length" && (this.contentLength += e.toString());
          return this.trackHeader(e.length), 0;
        }
        trackHeader(e) {
          this.headersSize += e, this.headersSize >= this.headersMaxSize && k.destroy(this.socket, new UP());
        }
        onUpgrade(e) {
          let { upgrade: r, client: n, socket: A, headers: i, statusCode: s } = this;
          U(r), U(n[UA] === A), U(!A.destroyed), U(!this.paused), U((i.length & 1) === 0);
          let o = n[yt][n[dt]];
          U(o), U(o.upgrade || o.method === "CONNECT"), this.statusCode = 0, this.statusText = "", this.shouldKeepAlive = false, this.headers = [], this.headersSize = 0, A.unshift(e), A[de].destroy(), A[de] = null, A[wE] = null, A[ht] = null, XP(A), n[UA] = null, n[Hm] = null, n[yt][n[dt]++] = null, n.emit("disconnect", n[Vm], [n], new xA("upgrade"));
          try {
            o.onUpgrade(s, i, A);
          } catch (a) {
            k.destroy(A, a);
          }
          n[qr]();
        }
        onHeadersComplete(e, r, n) {
          let { client: A, socket: i, headers: s, statusText: o } = this;
          if (i.destroyed) return -1;
          let a = A[yt][A[dt]];
          if (!a) return -1;
          if (U(!this.upgrade), U(this.statusCode < 200), e === 100) return k.destroy(i, new os("bad response", k.getSocketInfo(i))), -1;
          if (r && !a.upgrade) return k.destroy(i, new os("bad upgrade", k.getSocketInfo(i))), -1;
          if (U(this.timeoutType === kA), this.statusCode = e, this.shouldKeepAlive = n || a.method === "HEAD" && !i[je] && this.connection.toLowerCase() === "keep-alive", this.statusCode >= 200) {
            let l = a.bodyTimeout != null ? a.bodyTimeout : A[JP];
            this.setTimeout(l, nc);
          } else this.timeout && this.timeout.refresh && this.timeout.refresh();
          if (a.method === "CONNECT") return U(A[Me] === 1), this.upgrade = true, 2;
          if (r) return U(A[Me] === 1), this.upgrade = true, 2;
          if (U((this.headers.length & 1) === 0), this.headers = [], this.headersSize = 0, this.shouldKeepAlive && A[rc]) {
            let l = this.keepAlive ? k.parseKeepAliveTimeout(this.keepAlive) : null;
            if (l != null) {
              let u = Math.min(l - A[HP], A[VP]);
              u <= 0 ? i[je] = true : A[Ac] = u;
            } else A[Ac] = A[PP];
          } else i[je] = true;
          let c = a.onHeaders(e, s, this.resume, o) === false;
          return a.aborted ? -1 : a.method === "HEAD" || e < 200 ? 1 : (i[as] && (i[as] = false, A[qr]()), c ? qt.ERROR.PAUSED : 0);
        }
        onBody(e) {
          let { client: r, socket: n, statusCode: A, maxResponseSize: i } = this;
          if (n.destroyed) return -1;
          let s = r[yt][r[dt]];
          return U(s), U(this.timeoutType === nc), this.timeout && this.timeout.refresh && this.timeout.refresh(), U(A >= 200), i > -1 && this.bytesRead + e.length > i ? (k.destroy(n, new LP()), -1) : (this.bytesRead += e.length, s.onData(e) === false ? qt.ERROR.PAUSED : 0);
        }
        onMessageComplete() {
          let { client: e, socket: r, statusCode: n, upgrade: A, headers: i, contentLength: s, bytesRead: o, shouldKeepAlive: a } = this;
          if (r.destroyed && (!n || a)) return -1;
          if (A) return 0;
          U(n >= 100), U((this.headers.length & 1) === 0);
          let c = e[yt][e[dt]];
          if (U(c), this.statusCode = 0, this.statusText = "", this.bytesRead = 0, this.contentLength = "", this.keepAlive = "", this.connection = "", this.headers = [], this.headersSize = 0, n < 200) return 0;
          if (c.method !== "HEAD" && s && o !== parseInt(s, 10)) return k.destroy(r, new TP()), -1;
          if (c.onComplete(i), e[yt][e[dt]++] = null, r[Jr]) return U(e[Me] === 0), k.destroy(r, new xA("reset")), qt.ERROR.PAUSED;
          if (a) {
            if (r[je] && e[Me] === 0) return k.destroy(r, new xA("reset")), qt.ERROR.PAUSED;
            e[rc] == null || e[rc] === 1 ? setImmediate(() => e[qr]()) : e[qr]();
          } else return k.destroy(r, new xA("reset")), qt.ERROR.PAUSED;
          return 0;
        }
      };
      function Pm(t) {
        let { socket: e, timeoutType: r, client: n, paused: A } = t.deref();
        r === kA ? (!e[Jr] || e.writableNeedDrain || n[Me] > 1) && (U(!A, "cannot be paused while waiting for headers"), k.destroy(e, new xP())) : r === nc ? A || k.destroy(e, new kP()) : r === mE && (U(n[Me] === 0 && n[Ac]), k.destroy(e, new xA("socket idle timeout")));
      }
      async function zP(t, e) {
        if (t[UA] = e, !CE) {
          let r = () => {
          };
          e.on("error", r), CE = await pE, pE = null, e.off("error", r);
        }
        if (e.errored) throw e.errored;
        if (e.destroyed) throw new os("destroyed");
        return e[is] = false, e[Jr] = false, e[je] = false, e[as] = false, e[de] = new yE(t, e, CE), k.addListener(e, "error", e1), k.addListener(e, "readable", t1), k.addListener(e, "end", r1), k.addListener(e, "close", n1), e[BE] = false, e.on("close", A1), { version: "h1", defaultPipelining: 1, write(r) {
          return o1(t, r);
        }, resume() {
          i1(t);
        }, destroy(r, n) {
          e[BE] ? queueMicrotask(n) : (e.on("close", n), e.destroy(r));
        }, get destroyed() {
          return e.destroyed;
        }, busy(r) {
          return !!(e[Jr] || e[je] || e[as] || r && (t[Me] > 0 && !r.idempotent || t[Me] > 0 && (r.upgrade || r.method === "CONNECT") || t[Me] > 0 && k.bodyLength(r.body) !== 0 && (k.isStream(r.body) || k.isAsyncIterable(r.body) || k.isFormDataLike(r.body))));
        } };
      }
      function e1(t) {
        U(t.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
        let e = this[de];
        if (t.code === "ECONNRESET" && e.statusCode && !e.shouldKeepAlive) {
          e.onMessageComplete();
          return;
        }
        this[ht] = t, this[wE][jP](t);
      }
      function t1() {
        this[de]?.readMore();
      }
      function r1() {
        let t = this[de];
        if (t.statusCode && !t.shouldKeepAlive) {
          t.onMessageComplete();
          return;
        }
        k.destroy(this, new os("other side closed", k.getSocketInfo(this)));
      }
      function n1() {
        let t = this[de];
        t && (!this[ht] && t.statusCode && !t.shouldKeepAlive && t.onMessageComplete(), this[de].destroy(), this[de] = null);
        let e = this[ht] || new os("closed", k.getSocketInfo(this)), r = this[wE];
        if (r[UA] = null, r[Hm] = null, r.destroyed) {
          U(r[vP] === 0);
          let n = r[yt].splice(r[dt]);
          for (let A = 0; A < n.length; A++) {
            let i = n[A];
            k.errorRequest(r, i, e);
          }
        } else if (r[Me] > 0 && e.code !== "UND_ERR_INFO") {
          let n = r[yt][r[dt]];
          r[yt][r[dt]++] = null, k.errorRequest(r, n, e);
        }
        r[GP] = r[dt], U(r[Me] === 0), r.emit("disconnect", r[Vm], [r], e), r[qr]();
      }
      function A1() {
        this[BE] = true;
      }
      function i1(t) {
        let e = t[UA];
        if (e && !e.destroyed) {
          if (t[Lm] === 0 ? !e[is] && e.unref && (e.unref(), e[is] = true) : e[is] && e.ref && (e.ref(), e[is] = false), t[Lm] === 0) e[de].timeoutType !== mE && e[de].setTimeout(t[Ac], mE);
          else if (t[Me] > 0 && e[de].statusCode < 200 && e[de].timeoutType !== kA) {
            let r = t[yt][t[dt]], n = r.headersTimeout != null ? r.headersTimeout : t[qP];
            e[de].setTimeout(n, kA);
          }
        }
      }
      function s1(t) {
        return t !== "GET" && t !== "HEAD" && t !== "OPTIONS" && t !== "TRACE" && t !== "CONNECT";
      }
      function o1(t, e) {
        let { method: r, path: n, host: A, upgrade: i, blocking: s, reset: o } = e, { body: a, headers: c, contentLength: l } = e, u = r === "PUT" || r === "POST" || r === "PATCH" || r === "QUERY" || r === "PROPFIND" || r === "PROPPATCH";
        if (k.isFormDataLike(a)) {
          QE || (QE = TA().extractBody);
          let [B, Q] = QE(a);
          e.contentType == null && c.push("content-type", Q), a = B.stream, l = B.length;
        } else k.isBlobLike(a) && e.contentType == null && a.type && c.push("content-type", a.type);
        a && typeof a.read == "function" && a.read(0);
        let g = k.bodyLength(a);
        if (l = g ?? l, l === null && (l = e.contentLength), l === 0 && !u && (l = null), s1(r) && l > 0 && e.contentLength !== null && e.contentLength !== l) {
          if (t[IE]) return k.errorRequest(t, e, new In()), false;
          process.emitWarning(new In());
        }
        let E = t[UA], h = (B) => {
          e.aborted || e.completed || (k.errorRequest(t, e, B || new Om()), k.destroy(a), k.destroy(E, new xA("aborted")));
        };
        try {
          e.onConnect(h);
        } catch (B) {
          k.errorRequest(t, e, B);
        }
        if (e.aborted) return false;
        r === "HEAD" && (E[je] = true), (i || r === "CONNECT") && (E[je] = true), o != null && (E[je] = o), t[vm] && E[WP]++ >= t[vm] && (E[je] = true), s && (E[as] = true);
        let f = `${r} ${n} HTTP/1.1\r
`;
        if (typeof A == "string" ? f += `host: ${A}\r
` : f += t[YP], i ? f += `connection: upgrade\r
upgrade: ${i}\r
` : t[rc] && !E[je] ? f += `connection: keep-alive\r
` : f += `connection: close\r
`, Array.isArray(c)) for (let B = 0; B < c.length; B += 2) {
          let Q = c[B + 0], I = c[B + 1];
          if (Array.isArray(I)) for (let p = 0; p < I.length; p++) f += `${Q}: ${I[p]}\r
`;
          else f += `${Q}: ${I}\r
`;
        }
        return Mm.sendHeaders.hasSubscribers && Mm.sendHeaders.publish({ request: e, headers: f, socket: E }), !a || g === 0 ? Ym(h, null, t, e, E, l, f, u) : k.isBuffer(a) ? Ym(h, a, t, e, E, l, f, u) : k.isBlobLike(a) ? typeof a.stream == "function" ? Gm(h, a.stream(), t, e, E, l, f, u) : c1(h, a, t, e, E, l, f, u) : k.isStream(a) ? a1(h, a, t, e, E, l, f, u) : k.isIterable(a) ? Gm(h, a, t, e, E, l, f, u) : U(false), true;
      }
      function a1(t, e, r, n, A, i, s, o) {
        U(i !== 0 || r[Me] === 0, "stream body cannot be pipelined");
        let a = false, c = new ic({ abort: t, socket: A, request: n, contentLength: i, client: r, expectsPayload: o, header: s }), l = function(h) {
          if (!a) try {
            !c.write(h) && this.pause && this.pause();
          } catch (f) {
            k.destroy(this, f);
          }
        }, u = function() {
          a || e.resume && e.resume();
        }, g = function() {
          if (queueMicrotask(() => {
            e.removeListener("error", E);
          }), !a) {
            let h = new Om();
            queueMicrotask(() => E(h));
          }
        }, E = function(h) {
          if (!a) {
            if (a = true, U(A.destroyed || A[Jr] && r[Me] <= 1), A.off("drain", u).off("error", E), e.removeListener("data", l).removeListener("end", E).removeListener("close", g), !h) try {
              c.end();
            } catch (f) {
              h = f;
            }
            c.destroy(h), h && (h.code !== "UND_ERR_INFO" || h.message !== "reset") ? k.destroy(e, h) : k.destroy(e);
          }
        };
        e.on("data", l).on("end", E).on("error", E).on("close", g), e.resume && e.resume(), A.on("drain", u).on("error", E), e.errorEmitted ?? e.errored ? setImmediate(() => E(e.errored)) : (e.endEmitted ?? e.readableEnded) && setImmediate(() => E(null)), (e.closeEmitted ?? e.closed) && setImmediate(g);
      }
      function Ym(t, e, r, n, A, i, s, o) {
        try {
          e ? k.isBuffer(e) && (U(i === e.byteLength, "buffer body must have content length"), A.cork(), A.write(`${s}content-length: ${i}\r
\r
`, "latin1"), A.write(e), A.uncork(), n.onBodySent(e), !o && n.reset !== false && (A[je] = true)) : i === 0 ? A.write(`${s}content-length: 0\r
\r
`, "latin1") : (U(i === null, "no body must not have content length"), A.write(`${s}\r
`, "latin1")), n.onRequestSent(), r[qr]();
        } catch (a) {
          t(a);
        }
      }
      async function c1(t, e, r, n, A, i, s, o) {
        U(i === e.size, "blob body must have content length");
        try {
          if (i != null && i !== e.size) throw new In();
          let a = Buffer.from(await e.arrayBuffer());
          A.cork(), A.write(`${s}content-length: ${i}\r
\r
`, "latin1"), A.write(a), A.uncork(), n.onBodySent(a), n.onRequestSent(), !o && n.reset !== false && (A[je] = true), r[qr]();
        } catch (a) {
          t(a);
        }
      }
      async function Gm(t, e, r, n, A, i, s, o) {
        U(i !== 0 || r[Me] === 0, "iterator body cannot be pipelined");
        let a = null;
        function c() {
          if (a) {
            let g = a;
            a = null, g();
          }
        }
        let l = () => new Promise((g, E) => {
          U(a === null), A[ht] ? E(A[ht]) : a = g;
        });
        A.on("close", c).on("drain", c);
        let u = new ic({ abort: t, socket: A, request: n, contentLength: i, client: r, expectsPayload: o, header: s });
        try {
          for await (let g of e) {
            if (A[ht]) throw A[ht];
            u.write(g) || await l();
          }
          u.end();
        } catch (g) {
          u.destroy(g);
        } finally {
          A.off("close", c).off("drain", c);
        }
      }
      var ic = class {
        constructor({ abort: e, socket: r, request: n, contentLength: A, client: i, expectsPayload: s, header: o }) {
          this.socket = r, this.request = n, this.contentLength = A, this.client = i, this.bytesWritten = 0, this.expectsPayload = s, this.header = o, this.abort = e, r[Jr] = true;
        }
        write(e) {
          let { socket: r, request: n, contentLength: A, client: i, bytesWritten: s, expectsPayload: o, header: a } = this;
          if (r[ht]) throw r[ht];
          if (r.destroyed) return false;
          let c = Buffer.byteLength(e);
          if (!c) return true;
          if (A !== null && s + c > A) {
            if (i[IE]) throw new In();
            process.emitWarning(new In());
          }
          r.cork(), s === 0 && (!o && n.reset !== false && (r[je] = true), A === null ? r.write(`${a}transfer-encoding: chunked\r
`, "latin1") : r.write(`${a}content-length: ${A}\r
\r
`, "latin1")), A === null && r.write(`\r
${c.toString(16)}\r
`, "latin1"), this.bytesWritten += c;
          let l = r.write(e);
          return r.uncork(), n.onBodySent(e), l || r[de].timeout && r[de].timeoutType === kA && r[de].timeout.refresh && r[de].timeout.refresh(), l;
        }
        end() {
          let { socket: e, contentLength: r, client: n, bytesWritten: A, expectsPayload: i, header: s, request: o } = this;
          if (o.onRequestSent(), e[Jr] = false, e[ht]) throw e[ht];
          if (!e.destroyed) {
            if (A === 0 ? i ? e.write(`${s}content-length: 0\r
\r
`, "latin1") : e.write(`${s}\r
`, "latin1") : r === null && e.write(`\r
0\r
\r
`, "latin1"), r !== null && A !== r) {
              if (n[IE]) throw new In();
              process.emitWarning(new In());
            }
            e[de].timeout && e[de].timeoutType === kA && e[de].timeout.refresh && e[de].timeout.refresh(), n[qr]();
          }
        }
        destroy(e) {
          let { socket: r, client: n, abort: A } = this;
          r[Jr] = false, e && (U(n[Me] <= 1, "pipeline should only contain this request"), A(e));
        }
      };
      qm.exports = zP;
    });
    var Km = C((X$, $m) => {
      "use strict";
      var Qt = __require("node:assert"), { pipeline: l1 } = __require("node:stream"), J = Y(), { RequestContentLengthMismatchError: DE, RequestAbortedError: u1, SocketError: cs, InformationalError: sc } = H(), { kUrl: ac, kReset: cc, kClient: Bn, kRunning: lc, kPending: g1, kQueue: Wr, kPendingIdx: SE, kRunningIdx: wt, kError: Dt, kSocket: fe, kStrictContentLength: E1, kOnError: uc, kMaxConcurrentStreams: Xm, kHTTP2Session: _t, kResume: Qr, kSize: d1, kHTTPContext: bE, kClosed: RE, kBodyTimeout: h1 } = ne(), { channels: Wm } = lr(), ft = Symbol("open streams"), _m, oc;
      try {
        oc = __require("node:http2");
      } catch {
        oc = { constants: {} };
      }
      var { constants: { HTTP2_HEADER_AUTHORITY: f1, HTTP2_HEADER_METHOD: Q1, HTTP2_HEADER_PATH: C1, HTTP2_HEADER_SCHEME: I1, HTTP2_HEADER_CONTENT_LENGTH: B1, HTTP2_HEADER_EXPECT: p1, HTTP2_HEADER_STATUS: m1 } } = oc;
      function y1(t) {
        let e = [];
        for (let [r, n] of Object.entries(t)) if (Array.isArray(n)) for (let A of n) e.push(Buffer.from(r), Buffer.from(A));
        else e.push(Buffer.from(r), Buffer.from(n));
        return e;
      }
      async function w1(t, e) {
        t[fe] = e;
        let r = oc.connect(t[ac], { createConnection: () => e, peerMaxConcurrentStreams: t[Xm], settings: { enablePush: false } });
        return r[ft] = 0, r[Bn] = t, r[fe] = e, r[_t] = null, J.addListener(r, "error", R1), J.addListener(r, "frameError", S1), J.addListener(r, "end", b1), J.addListener(r, "goaway", N1), J.addListener(r, "close", F1), r.unref(), t[_t] = r, e[_t] = r, J.addListener(e, "error", x1), J.addListener(e, "end", U1), J.addListener(e, "close", T1), e[RE] = false, e.on("close", k1), { version: "h2", defaultPipelining: 1 / 0, write(n) {
          return L1(t, n);
        }, resume() {
          D1(t);
        }, destroy(n, A) {
          e[RE] ? queueMicrotask(A) : e.destroy(n).on("close", A);
        }, get destroyed() {
          return e.destroyed;
        }, busy() {
          return false;
        } };
      }
      function D1(t) {
        let e = t[fe];
        e?.destroyed === false && (t[d1] === 0 || t[Xm] === 0 ? (e.unref(), t[_t].unref()) : (e.ref(), t[_t].ref()));
      }
      function R1(t) {
        Qt(t.code !== "ERR_TLS_CERT_ALTNAME_INVALID"), this[fe][Dt] = t, this[Bn][uc](t);
      }
      function S1(t, e, r) {
        if (r === 0) {
          let n = new sc(`HTTP/2: "frameError" received - type ${t}, code ${e}`);
          this[fe][Dt] = n, this[Bn][uc](n);
        }
      }
      function b1() {
        let t = new cs("other side closed", J.getSocketInfo(this[fe]));
        this.destroy(t), J.destroy(this[fe], t);
      }
      function N1(t) {
        let e = this[Dt] || new cs(`HTTP/2: "GOAWAY" frame received with code ${t}`, J.getSocketInfo(this[fe])), r = this[Bn];
        if (r[fe] = null, r[bE] = null, this.close(), this[_t] = null, J.destroy(this[fe], e), r[wt] < r[Wr].length) {
          let n = r[Wr][r[wt]];
          r[Wr][r[wt]++] = null, J.errorRequest(r, n, e), r[SE] = r[wt];
        }
        Qt(r[lc] === 0), r.emit("disconnect", r[ac], [r], e), r[Qr]();
      }
      function F1() {
        let { [Bn]: t } = this, { [fe]: e } = t, r = this[fe][Dt] || this[Dt] || new cs("closed", J.getSocketInfo(e));
        if (t[fe] = null, t[bE] = null, t.destroyed) {
          Qt(t[g1] === 0);
          let n = t[Wr].splice(t[wt]);
          for (let A = 0; A < n.length; A++) {
            let i = n[A];
            J.errorRequest(t, i, r);
          }
        }
      }
      function T1() {
        let t = this[Dt] || new cs("closed", J.getSocketInfo(this)), e = this[_t][Bn];
        e[fe] = null, e[bE] = null, this[_t] !== null && this[_t].destroy(t), e[SE] = e[wt], Qt(e[lc] === 0), e.emit("disconnect", e[ac], [e], t), e[Qr]();
      }
      function x1(t) {
        Qt(t.code !== "ERR_TLS_CERT_ALTNAME_INVALID"), this[Dt] = t, this[Bn][uc](t);
      }
      function U1() {
        J.destroy(this, new cs("other side closed", J.getSocketInfo(this)));
      }
      function k1() {
        this[RE] = true;
      }
      function M1(t) {
        return t !== "GET" && t !== "HEAD" && t !== "OPTIONS" && t !== "TRACE" && t !== "CONNECT";
      }
      function L1(t, e) {
        let r = e.bodyTimeout ?? t[h1], n = t[_t], { method: A, path: i, host: s, upgrade: o, expectContinue: a, signal: c, headers: l } = e, { body: u } = e;
        if (o) return J.errorRequest(t, e, new Error("Upgrade not supported for H2")), false;
        let g = {};
        for (let D = 0; D < l.length; D += 2) {
          let v = l[D + 0], $ = l[D + 1];
          if (Array.isArray($)) for (let W = 0; W < $.length; W++) g[v] ? g[v] += `,${$[W]}` : g[v] = $[W];
          else g[v] = $;
        }
        let E = null, { hostname: h, port: f } = t[ac];
        g[f1] = s || `${h}${f ? `:${f}` : ""}`, g[Q1] = A;
        let B = (D) => {
          e.aborted || e.completed || (D = D || new u1(), J.errorRequest(t, e, D), E != null && (E.removeAllListeners("data"), E.close(), t[uc](D), t[Qr]()), J.destroy(u, D));
        };
        try {
          e.onConnect(B);
        } catch (D) {
          J.errorRequest(t, e, D);
        }
        if (e.aborted) return false;
        if (A === "CONNECT") return n.ref(), E = n.request(g, { endStream: false, signal: c }), E.pending ? E.once("ready", () => {
          e.onUpgrade(null, null, E), ++n[ft], t[Wr][t[wt]++] = null;
        }) : (e.onUpgrade(null, null, E), ++n[ft], t[Wr][t[wt]++] = null), E.once("close", () => {
          n[ft] -= 1, n[ft] === 0 && n.unref();
        }), E.setTimeout(r), true;
        g[C1] = i, g[I1] = "https";
        let Q = A === "PUT" || A === "POST" || A === "PATCH";
        u && typeof u.read == "function" && u.read(0);
        let I = J.bodyLength(u);
        if (J.isFormDataLike(u)) {
          _m ??= TA().extractBody;
          let [D, v] = _m(u);
          g["content-type"] = v, u = D.stream, I = D.length;
        }
        if (I == null && (I = e.contentLength), (I === 0 || !Q) && (I = null), M1(A) && I > 0 && e.contentLength != null && e.contentLength !== I) {
          if (t[E1]) return J.errorRequest(t, e, new DE()), false;
          process.emitWarning(new DE());
        }
        if (I != null && (Qt(u, "no body must not have content length"), g[B1] = `${I}`), n.ref(), Wm.sendHeaders.hasSubscribers) {
          let D = "";
          for (let v in g) D += `${v}: ${g[v]}\r
`;
          Wm.sendHeaders.publish({ request: e, headers: D, socket: n[fe] });
        }
        let p = A === "GET" || A === "HEAD" || u === null;
        return a ? (g[p1] = "100-continue", E = n.request(g, { endStream: p, signal: c }), E.once("continue", w)) : (E = n.request(g, { endStream: p, signal: c }), w()), ++n[ft], E.setTimeout(r), E.once("response", (D) => {
          let { [m1]: v, ...$ } = D;
          if (e.onResponseStarted(), e.aborted) {
            E.removeAllListeners("data");
            return;
          }
          e.onHeaders(Number(v), y1($), E.resume.bind(E), "") === false && E.pause();
        }), E.on("data", (D) => {
          e.onData(D) === false && E.pause();
        }), E.once("end", (D) => {
          E.removeAllListeners("data"), E.state?.state == null || E.state.state < 6 ? (!e.aborted && !e.completed && e.onComplete({}), t[Wr][t[wt]++] = null, t[Qr]()) : (--n[ft], n[ft] === 0 && n.unref(), B(D ?? new sc("HTTP/2: stream half-closed (remote)")), t[Wr][t[wt]++] = null, t[SE] = t[wt], t[Qr]());
        }), E.once("close", () => {
          E.removeAllListeners("data"), n[ft] -= 1, n[ft] === 0 && n.unref();
        }), E.once("error", function(D) {
          E.removeAllListeners("data"), B(D);
        }), E.once("frameError", (D, v) => {
          E.removeAllListeners("data"), B(new sc(`HTTP/2: "frameError" received - type ${D}, code ${v}`));
        }), E.on("aborted", () => {
          E.removeAllListeners("data");
        }), E.on("timeout", () => {
          let D = new sc(`HTTP/2: "stream timeout after ${r}"`);
          E.removeAllListeners("data"), n[ft] -= 1, n[ft] === 0 && n.unref(), B(D);
        }), E.once("trailers", (D) => {
          e.aborted || e.completed || e.onComplete(D);
        }), true;
        function w() {
          !u || I === 0 ? jm(B, E, null, t, e, t[fe], I, Q) : J.isBuffer(u) ? jm(B, E, u, t, e, t[fe], I, Q) : J.isBlobLike(u) ? typeof u.stream == "function" ? Zm(B, E, u.stream(), t, e, t[fe], I, Q) : P1(B, E, u, t, e, t[fe], I, Q) : J.isStream(u) ? v1(B, t[fe], Q, E, u, t, e, I) : J.isIterable(u) ? Zm(B, E, u, t, e, t[fe], I, Q) : Qt(false);
        }
      }
      function jm(t, e, r, n, A, i, s, o) {
        try {
          r != null && J.isBuffer(r) && (Qt(s === r.byteLength, "buffer body must have content length"), e.cork(), e.write(r), e.uncork(), e.end(), A.onBodySent(r)), o || (i[cc] = true), A.onRequestSent(), n[Qr]();
        } catch (a) {
          t(a);
        }
      }
      function v1(t, e, r, n, A, i, s, o) {
        Qt(o !== 0 || i[lc] === 0, "stream body cannot be pipelined");
        let a = l1(A, n, (l) => {
          l ? (J.destroy(a, l), t(l)) : (J.removeAllListeners(a), s.onRequestSent(), r || (e[cc] = true), i[Qr]());
        });
        J.addListener(a, "data", c);
        function c(l) {
          s.onBodySent(l);
        }
      }
      async function P1(t, e, r, n, A, i, s, o) {
        Qt(s === r.size, "blob body must have content length");
        try {
          if (s != null && s !== r.size) throw new DE();
          let a = Buffer.from(await r.arrayBuffer());
          e.cork(), e.write(a), e.uncork(), e.end(), A.onBodySent(a), A.onRequestSent(), o || (i[cc] = true), n[Qr]();
        } catch (a) {
          t(a);
        }
      }
      async function Zm(t, e, r, n, A, i, s, o) {
        Qt(s !== 0 || n[lc] === 0, "iterator body cannot be pipelined");
        let a = null;
        function c() {
          if (a) {
            let u = a;
            a = null, u();
          }
        }
        let l = () => new Promise((u, g) => {
          Qt(a === null), i[Dt] ? g(i[Dt]) : a = u;
        });
        e.on("close", c).on("drain", c);
        try {
          for await (let u of r) {
            if (i[Dt]) throw i[Dt];
            let g = e.write(u);
            A.onBodySent(u), g || await l();
          }
          e.end(), A.onRequestSent(), o || (i[cc] = true), n[Qr]();
        } catch (u) {
          t(u);
        } finally {
          e.off("close", c).off("drain", c);
        }
      }
      $m.exports = w1;
    });
    var Qs = C(($$, sy) => {
      "use strict";
      var Cr = __require("node:assert"), ry = __require("node:net"), ls = __require("node:http"), pn = Y(), { channels: MA } = lr(), Y1 = Cp(), G1 = DA(), { InvalidArgumentError: Qe, InformationalError: O1, ClientDestroyedError: V1 } = H(), H1 = ts(), { kUrl: jt, kServerName: _r, kClient: q1, kBusy: NE, kConnect: J1, kResuming: mn, kRunning: hs, kPending: fs, kSize: ds, kQueue: Rt, kConnected: W1, kConnecting: LA, kNeedDrain: Zr, kKeepAliveDefaultTimeout: zm, kHostHeader: _1, kPendingIdx: St, kRunningIdx: Ir, kError: j1, kPipelining: gc, kKeepAliveTimeoutValue: Z1, kMaxHeadersSize: X1, kKeepAliveMaxTimeout: $1, kKeepAliveTimeoutThreshold: K1, kHeadersTimeout: z1, kBodyTimeout: eY, kStrictContentLength: tY, kConnector: us, kMaxRequests: FE, kCounter: rY, kClose: nY, kDestroy: AY, kDispatch: iY, kLocalAddress: gs, kMaxResponseSize: sY, kOnError: oY, kHTTPContext: Ce, kMaxConcurrentStreams: aY, kResume: Es } = ne(), cY = Jm(), lY = Km(), jr = Symbol("kClosedResolve"), uY = ls && ls.maxHeaderSize && Number.isInteger(ls.maxHeaderSize) && ls.maxHeaderSize > 0 ? () => ls.maxHeaderSize : () => {
        throw new Qe("http module not available or http.maxHeaderSize invalid");
      }, ey = () => {
      };
      function ny(t) {
        return t[gc] ?? t[Ce]?.defaultPipelining ?? 1;
      }
      var TE = class extends G1 {
        constructor(e, { maxHeaderSize: r, headersTimeout: n, socketTimeout: A, requestTimeout: i, connectTimeout: s, bodyTimeout: o, idleTimeout: a, keepAlive: c, keepAliveTimeout: l, maxKeepAliveTimeout: u, keepAliveMaxTimeout: g, keepAliveTimeoutThreshold: E, socketPath: h, pipelining: f, tls: B, strictContentLength: Q, maxCachedSessions: I, connect: p, maxRequestsPerClient: w, localAddress: D, maxResponseSize: v, autoSelectFamily: $, autoSelectFamilyAttemptTimeout: W, maxConcurrentStreams: ae, allowH2: xe } = {}) {
          if (c !== void 0) throw new Qe("unsupported keepAlive, use pipelining=0 instead");
          if (A !== void 0) throw new Qe("unsupported socketTimeout, use headersTimeout & bodyTimeout instead");
          if (i !== void 0) throw new Qe("unsupported requestTimeout, use headersTimeout & bodyTimeout instead");
          if (a !== void 0) throw new Qe("unsupported idleTimeout, use keepAliveTimeout instead");
          if (u !== void 0) throw new Qe("unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead");
          if (r != null) {
            if (!Number.isInteger(r) || r < 1) throw new Qe("invalid maxHeaderSize");
          } else r = uY();
          if (h != null && typeof h != "string") throw new Qe("invalid socketPath");
          if (s != null && (!Number.isFinite(s) || s < 0)) throw new Qe("invalid connectTimeout");
          if (l != null && (!Number.isFinite(l) || l <= 0)) throw new Qe("invalid keepAliveTimeout");
          if (g != null && (!Number.isFinite(g) || g <= 0)) throw new Qe("invalid keepAliveMaxTimeout");
          if (E != null && !Number.isFinite(E)) throw new Qe("invalid keepAliveTimeoutThreshold");
          if (n != null && (!Number.isInteger(n) || n < 0)) throw new Qe("headersTimeout must be a positive integer or zero");
          if (o != null && (!Number.isInteger(o) || o < 0)) throw new Qe("bodyTimeout must be a positive integer or zero");
          if (p != null && typeof p != "function" && typeof p != "object") throw new Qe("connect must be a function or an object");
          if (w != null && (!Number.isInteger(w) || w < 0)) throw new Qe("maxRequestsPerClient must be a positive number");
          if (D != null && (typeof D != "string" || ry.isIP(D) === 0)) throw new Qe("localAddress must be valid string IP address");
          if (v != null && (!Number.isInteger(v) || v < -1)) throw new Qe("maxResponseSize must be a positive number");
          if (W != null && (!Number.isInteger(W) || W < -1)) throw new Qe("autoSelectFamilyAttemptTimeout must be a positive number");
          if (xe != null && typeof xe != "boolean") throw new Qe("allowH2 must be a valid boolean value");
          if (ae != null && (typeof ae != "number" || ae < 1)) throw new Qe("maxConcurrentStreams must be a positive integer, greater than 0");
          super(), typeof p != "function" && (p = H1({ ...B, maxCachedSessions: I, allowH2: xe, socketPath: h, timeout: s, ...$ ? { autoSelectFamily: $, autoSelectFamilyAttemptTimeout: W } : void 0, ...p })), this[jt] = pn.parseOrigin(e), this[us] = p, this[gc] = f ?? 1, this[X1] = r, this[zm] = l ?? 4e3, this[$1] = g ?? 6e5, this[K1] = E ?? 2e3, this[Z1] = this[zm], this[_r] = null, this[gs] = D ?? null, this[mn] = 0, this[Zr] = 0, this[_1] = `host: ${this[jt].hostname}${this[jt].port ? `:${this[jt].port}` : ""}\r
`, this[eY] = o ?? 3e5, this[z1] = n ?? 3e5, this[tY] = Q ?? true, this[FE] = w, this[jr] = null, this[sY] = v > -1 ? v : -1, this[aY] = ae ?? 100, this[Ce] = null, this[Rt] = [], this[Ir] = 0, this[St] = 0, this[Es] = (te) => xE(this, te), this[oY] = (te) => Ay(this, te);
        }
        get pipelining() {
          return this[gc];
        }
        set pipelining(e) {
          this[gc] = e, this[Es](true);
        }
        get [fs]() {
          return this[Rt].length - this[St];
        }
        get [hs]() {
          return this[St] - this[Ir];
        }
        get [ds]() {
          return this[Rt].length - this[Ir];
        }
        get [W1]() {
          return !!this[Ce] && !this[LA] && !this[Ce].destroyed;
        }
        get [NE]() {
          return !!(this[Ce]?.busy(null) || this[ds] >= (ny(this) || 1) || this[fs] > 0);
        }
        [J1](e) {
          iy(this), this.once("connect", e);
        }
        [iY](e, r) {
          let n = e.origin || this[jt].origin, A = new Y1(n, e, r);
          return this[Rt].push(A), this[mn] || (pn.bodyLength(A.body) == null && pn.isIterable(A.body) ? (this[mn] = 1, queueMicrotask(() => xE(this))) : this[Es](true)), this[mn] && this[Zr] !== 2 && this[NE] && (this[Zr] = 2), this[Zr] < 2;
        }
        async [nY]() {
          return new Promise((e) => {
            this[ds] ? this[jr] = e : e(null);
          });
        }
        async [AY](e) {
          return new Promise((r) => {
            let n = this[Rt].splice(this[St]);
            for (let i = 0; i < n.length; i++) {
              let s = n[i];
              pn.errorRequest(this, s, e);
            }
            let A = () => {
              this[jr] && (this[jr](), this[jr] = null), r(null);
            };
            this[Ce] ? (this[Ce].destroy(e, A), this[Ce] = null) : queueMicrotask(A), this[Es]();
          });
        }
      };
      function Ay(t, e) {
        if (t[hs] === 0 && e.code !== "UND_ERR_INFO" && e.code !== "UND_ERR_SOCKET") {
          Cr(t[St] === t[Ir]);
          let r = t[Rt].splice(t[Ir]);
          for (let n = 0; n < r.length; n++) {
            let A = r[n];
            pn.errorRequest(t, A, e);
          }
          Cr(t[ds] === 0);
        }
      }
      async function iy(t) {
        Cr(!t[LA]), Cr(!t[Ce]);
        let { host: e, hostname: r, protocol: n, port: A } = t[jt];
        if (r[0] === "[") {
          let i = r.indexOf("]");
          Cr(i !== -1);
          let s = r.substring(1, i);
          Cr(ry.isIPv6(s)), r = s;
        }
        t[LA] = true, MA.beforeConnect.hasSubscribers && MA.beforeConnect.publish({ connectParams: { host: e, hostname: r, protocol: n, port: A, version: t[Ce]?.version, servername: t[_r], localAddress: t[gs] }, connector: t[us] });
        try {
          let i = await new Promise((s, o) => {
            t[us]({ host: e, hostname: r, protocol: n, port: A, servername: t[_r], localAddress: t[gs] }, (a, c) => {
              a ? o(a) : s(c);
            });
          });
          if (t.destroyed) {
            pn.destroy(i.on("error", ey), new V1());
            return;
          }
          Cr(i);
          try {
            t[Ce] = i.alpnProtocol === "h2" ? await lY(t, i) : await cY(t, i);
          } catch (s) {
            throw i.destroy().on("error", ey), s;
          }
          t[LA] = false, i[rY] = 0, i[FE] = t[FE], i[q1] = t, i[j1] = null, MA.connected.hasSubscribers && MA.connected.publish({ connectParams: { host: e, hostname: r, protocol: n, port: A, version: t[Ce]?.version, servername: t[_r], localAddress: t[gs] }, connector: t[us], socket: i }), t.emit("connect", t[jt], [t]);
        } catch (i) {
          if (t.destroyed) return;
          if (t[LA] = false, MA.connectError.hasSubscribers && MA.connectError.publish({ connectParams: { host: e, hostname: r, protocol: n, port: A, version: t[Ce]?.version, servername: t[_r], localAddress: t[gs] }, connector: t[us], error: i }), i.code === "ERR_TLS_CERT_ALTNAME_INVALID") for (Cr(t[hs] === 0); t[fs] > 0 && t[Rt][t[St]].servername === t[_r]; ) {
            let s = t[Rt][t[St]++];
            pn.errorRequest(t, s, i);
          }
          else Ay(t, i);
          t.emit("connectionError", t[jt], [t], i);
        }
        t[Es]();
      }
      function ty(t) {
        t[Zr] = 0, t.emit("drain", t[jt], [t]);
      }
      function xE(t, e) {
        t[mn] !== 2 && (t[mn] = 2, gY(t, e), t[mn] = 0, t[Ir] > 256 && (t[Rt].splice(0, t[Ir]), t[St] -= t[Ir], t[Ir] = 0));
      }
      function gY(t, e) {
        for (; ; ) {
          if (t.destroyed) {
            Cr(t[fs] === 0);
            return;
          }
          if (t[jr] && !t[ds]) {
            t[jr](), t[jr] = null;
            return;
          }
          if (t[Ce] && t[Ce].resume(), t[NE]) t[Zr] = 2;
          else if (t[Zr] === 2) {
            e ? (t[Zr] = 1, queueMicrotask(() => ty(t))) : ty(t);
            continue;
          }
          if (t[fs] === 0 || t[hs] >= (ny(t) || 1)) return;
          let r = t[Rt][t[St]];
          if (t[jt].protocol === "https:" && t[_r] !== r.servername) {
            if (t[hs] > 0) return;
            t[_r] = r.servername, t[Ce]?.destroy(new O1("servername changed"), () => {
              t[Ce] = null, xE(t);
            });
          }
          if (t[LA]) return;
          if (!t[Ce]) {
            iy(t);
            return;
          }
          if (t[Ce].destroyed || t[Ce].busy(r)) return;
          !r.aborted && t[Ce].write(r) ? t[St]++ : t[Rt].splice(t[St], 1);
        }
      }
      sy.exports = TE;
    });
    var UE = C((z$, oy) => {
      "use strict";
      var Ec = class {
        constructor() {
          this.bottom = 0, this.top = 0, this.list = new Array(2048).fill(void 0), this.next = null;
        }
        isEmpty() {
          return this.top === this.bottom;
        }
        isFull() {
          return (this.top + 1 & 2047) === this.bottom;
        }
        push(e) {
          this.list[this.top] = e, this.top = this.top + 1 & 2047;
        }
        shift() {
          let e = this.list[this.bottom];
          return e === void 0 ? null : (this.list[this.bottom] = void 0, this.bottom = this.bottom + 1 & 2047, e);
        }
      };
      oy.exports = class {
        constructor() {
          this.head = this.tail = new Ec();
        }
        isEmpty() {
          return this.head.isEmpty();
        }
        push(e) {
          this.head.isFull() && (this.head = this.head.next = new Ec()), this.head.push(e);
        }
        shift() {
          let e = this.tail, r = e.shift();
          return e.isEmpty() && e.next !== null && (this.tail = e.next, e.next = null), r;
        }
      };
    });
    var cy = C((eK, ay) => {
      "use strict";
      var { kFree: EY, kConnected: dY, kPending: hY, kQueued: fY, kRunning: QY, kSize: CY } = ne(), yn = Symbol("pool"), kE = class {
        constructor(e) {
          this[yn] = e;
        }
        get connected() {
          return this[yn][dY];
        }
        get free() {
          return this[yn][EY];
        }
        get pending() {
          return this[yn][hY];
        }
        get queued() {
          return this[yn][fY];
        }
        get running() {
          return this[yn][QY];
        }
        get size() {
          return this[yn][CY];
        }
      };
      ay.exports = kE;
    });
    var GE = C((tK, Iy) => {
      "use strict";
      var IY = DA(), BY = UE(), { kConnected: ME, kSize: ly, kRunning: uy, kPending: gy, kQueued: Cs, kBusy: pY, kFree: mY, kUrl: yY, kClose: wY, kDestroy: DY, kDispatch: RY } = ne(), SY = cy(), Ze = Symbol("clients"), He = Symbol("needDrain"), Is = Symbol("queue"), LE = Symbol("closed resolve"), vE = Symbol("onDrain"), Ey = Symbol("onConnect"), dy = Symbol("onDisconnect"), hy = Symbol("onConnectionError"), PE = Symbol("get dispatcher"), Qy = Symbol("add client"), Cy = Symbol("remove client"), fy = Symbol("stats"), YE = class extends IY {
        constructor() {
          super(), this[Is] = new BY(), this[Ze] = [], this[Cs] = 0;
          let e = this;
          this[vE] = function(n, A) {
            let i = e[Is], s = false;
            for (; !s; ) {
              let o = i.shift();
              if (!o) break;
              e[Cs]--, s = !this.dispatch(o.opts, o.handler);
            }
            this[He] = s, !this[He] && e[He] && (e[He] = false, e.emit("drain", n, [e, ...A])), e[LE] && i.isEmpty() && Promise.all(e[Ze].map((o) => o.close())).then(e[LE]);
          }, this[Ey] = (r, n) => {
            e.emit("connect", r, [e, ...n]);
          }, this[dy] = (r, n, A) => {
            e.emit("disconnect", r, [e, ...n], A);
          }, this[hy] = (r, n, A) => {
            e.emit("connectionError", r, [e, ...n], A);
          }, this[fy] = new SY(this);
        }
        get [pY]() {
          return this[He];
        }
        get [ME]() {
          return this[Ze].filter((e) => e[ME]).length;
        }
        get [mY]() {
          return this[Ze].filter((e) => e[ME] && !e[He]).length;
        }
        get [gy]() {
          let e = this[Cs];
          for (let { [gy]: r } of this[Ze]) e += r;
          return e;
        }
        get [uy]() {
          let e = 0;
          for (let { [uy]: r } of this[Ze]) e += r;
          return e;
        }
        get [ly]() {
          let e = this[Cs];
          for (let { [ly]: r } of this[Ze]) e += r;
          return e;
        }
        get stats() {
          return this[fy];
        }
        async [wY]() {
          this[Is].isEmpty() ? await Promise.all(this[Ze].map((e) => e.close())) : await new Promise((e) => {
            this[LE] = e;
          });
        }
        async [DY](e) {
          for (; ; ) {
            let r = this[Is].shift();
            if (!r) break;
            r.handler.onError(e);
          }
          await Promise.all(this[Ze].map((r) => r.destroy(e)));
        }
        [RY](e, r) {
          let n = this[PE]();
          return n ? n.dispatch(e, r) || (n[He] = true, this[He] = !this[PE]()) : (this[He] = true, this[Is].push({ opts: e, handler: r }), this[Cs]++), !this[He];
        }
        [Qy](e) {
          return e.on("drain", this[vE]).on("connect", this[Ey]).on("disconnect", this[dy]).on("connectionError", this[hy]), this[Ze].push(e), this[He] && queueMicrotask(() => {
            this[He] && this[vE](e[yY], [this, e]);
          }), this;
        }
        [Cy](e) {
          e.close(() => {
            let r = this[Ze].indexOf(e);
            r !== -1 && this[Ze].splice(r, 1);
          }), this[He] = this[Ze].some((r) => !r[He] && r.closed !== true && r.destroyed !== true);
        }
      };
      Iy.exports = { PoolBase: YE, kClients: Ze, kNeedDrain: He, kAddClient: Qy, kRemoveClient: Cy, kGetDispatcher: PE };
    });
    var vA = C((rK, wy) => {
      "use strict";
      var { PoolBase: bY, kClients: By, kNeedDrain: NY, kAddClient: FY, kGetDispatcher: TY } = GE(), xY = Qs(), { InvalidArgumentError: OE } = H(), py = Y(), { kUrl: my } = ne(), UY = ts(), VE = Symbol("options"), HE = Symbol("connections"), yy = Symbol("factory");
      function kY(t, e) {
        return new xY(t, e);
      }
      var qE = class extends bY {
        constructor(e, { connections: r, factory: n = kY, connect: A, connectTimeout: i, tls: s, maxCachedSessions: o, socketPath: a, autoSelectFamily: c, autoSelectFamilyAttemptTimeout: l, allowH2: u, ...g } = {}) {
          if (r != null && (!Number.isFinite(r) || r < 0)) throw new OE("invalid connections");
          if (typeof n != "function") throw new OE("factory must be a function.");
          if (A != null && typeof A != "function" && typeof A != "object") throw new OE("connect must be a function or an object");
          super(), typeof A != "function" && (A = UY({ ...s, maxCachedSessions: o, allowH2: u, socketPath: a, timeout: i, ...c ? { autoSelectFamily: c, autoSelectFamilyAttemptTimeout: l } : void 0, ...A })), this[HE] = r || null, this[my] = py.parseOrigin(e), this[VE] = { ...py.deepClone(g), connect: A, allowH2: u }, this[VE].interceptors = g.interceptors ? { ...g.interceptors } : void 0, this[yy] = n;
        }
        [TY]() {
          for (let e of this[By]) if (!e[NY]) return e;
          if (!this[HE] || this[By].length < this[HE]) {
            let e = this[yy](this[my], this[VE]);
            return this[FY](e), e;
          }
        }
      };
      wy.exports = qE;
    });
    var Ny = C((nK, by) => {
      "use strict";
      var { BalancedPoolMissingUpstreamError: MY, InvalidArgumentError: LY } = H(), { PoolBase: vY, kClients: Le, kNeedDrain: Bs, kAddClient: PY, kRemoveClient: YY, kGetDispatcher: GY } = GE(), OY = vA(), { kUrl: JE } = ne(), { parseOrigin: Dy } = Y(), Ry = Symbol("factory"), dc = Symbol("options"), Sy = Symbol("kGreatestCommonDivisor"), wn = Symbol("kCurrentWeight"), Dn = Symbol("kIndex"), Ct = Symbol("kWeight"), hc = Symbol("kMaxWeightPerServer"), fc = Symbol("kErrorPenalty");
      function VY(t, e) {
        if (t === 0) return e;
        for (; e !== 0; ) {
          let r = e;
          e = t % e, t = r;
        }
        return t;
      }
      function HY(t, e) {
        return new OY(t, e);
      }
      var WE = class extends vY {
        constructor(e = [], { factory: r = HY, ...n } = {}) {
          if (typeof r != "function") throw new LY("factory must be a function.");
          super(), this[dc] = n, this[Dn] = -1, this[wn] = 0, this[hc] = this[dc].maxWeightPerServer || 100, this[fc] = this[dc].errorPenalty || 15, Array.isArray(e) || (e = [e]), this[Ry] = r;
          for (let A of e) this.addUpstream(A);
          this._updateBalancedPoolStats();
        }
        addUpstream(e) {
          let r = Dy(e).origin;
          if (this[Le].find((A) => A[JE].origin === r && A.closed !== true && A.destroyed !== true)) return this;
          let n = this[Ry](r, Object.assign({}, this[dc]));
          this[PY](n), n.on("connect", () => {
            n[Ct] = Math.min(this[hc], n[Ct] + this[fc]);
          }), n.on("connectionError", () => {
            n[Ct] = Math.max(1, n[Ct] - this[fc]), this._updateBalancedPoolStats();
          }), n.on("disconnect", (...A) => {
            let i = A[2];
            i && i.code === "UND_ERR_SOCKET" && (n[Ct] = Math.max(1, n[Ct] - this[fc]), this._updateBalancedPoolStats());
          });
          for (let A of this[Le]) A[Ct] = this[hc];
          return this._updateBalancedPoolStats(), this;
        }
        _updateBalancedPoolStats() {
          let e = 0;
          for (let r = 0; r < this[Le].length; r++) e = VY(this[Le][r][Ct], e);
          this[Sy] = e;
        }
        removeUpstream(e) {
          let r = Dy(e).origin, n = this[Le].find((A) => A[JE].origin === r && A.closed !== true && A.destroyed !== true);
          return n && this[YY](n), this;
        }
        get upstreams() {
          return this[Le].filter((e) => e.closed !== true && e.destroyed !== true).map((e) => e[JE].origin);
        }
        [GY]() {
          if (this[Le].length === 0) throw new MY();
          if (!this[Le].find((i) => !i[Bs] && i.closed !== true && i.destroyed !== true) || this[Le].map((i) => i[Bs]).reduce((i, s) => i && s, true)) return;
          let n = 0, A = this[Le].findIndex((i) => !i[Bs]);
          for (; n++ < this[Le].length; ) {
            this[Dn] = (this[Dn] + 1) % this[Le].length;
            let i = this[Le][this[Dn]];
            if (i[Ct] > this[Le][A][Ct] && !i[Bs] && (A = this[Dn]), this[Dn] === 0 && (this[wn] = this[wn] - this[Sy], this[wn] <= 0 && (this[wn] = this[hc])), i[Ct] >= this[wn] && !i[Bs]) return i;
          }
          return this[wn] = this[Le][A][Ct], this[Dn] = A, this[Le][A];
        }
      };
      by.exports = WE;
    });
    var PA = C((AK, vy) => {
      "use strict";
      var { InvalidArgumentError: _E } = H(), { kClients: Xr, kRunning: Fy, kClose: qY, kDestroy: JY, kDispatch: WY } = ne(), _Y = DA(), jY = vA(), ZY = Qs(), XY = Y(), Ty = Symbol("onConnect"), xy = Symbol("onDisconnect"), Uy = Symbol("onConnectionError"), ky = Symbol("onDrain"), My = Symbol("factory"), Ly = Symbol("options");
      function $Y(t, e) {
        return e && e.connections === 1 ? new ZY(t, e) : new jY(t, e);
      }
      var jE = class extends _Y {
        constructor({ factory: e = $Y, connect: r, ...n } = {}) {
          if (typeof e != "function") throw new _E("factory must be a function.");
          if (r != null && typeof r != "function" && typeof r != "object") throw new _E("connect must be a function or an object");
          super(), r && typeof r != "function" && (r = { ...r }), this[Ly] = { ...XY.deepClone(n), connect: r }, this[My] = e, this[Xr] = /* @__PURE__ */ new Map(), this[ky] = (A, i) => {
            this.emit("drain", A, [this, ...i]);
          }, this[Ty] = (A, i) => {
            this.emit("connect", A, [this, ...i]);
          }, this[xy] = (A, i, s) => {
            this.emit("disconnect", A, [this, ...i], s);
          }, this[Uy] = (A, i, s) => {
            this.emit("connectionError", A, [this, ...i], s);
          };
        }
        get [Fy]() {
          let e = 0;
          for (let r of this[Xr].values()) e += r[Fy];
          return e;
        }
        [WY](e, r) {
          let n;
          if (e.origin && (typeof e.origin == "string" || e.origin instanceof URL)) n = String(e.origin);
          else throw new _E("opts.origin must be a non-empty string or URL.");
          let A = this[Xr].get(n);
          return A || (A = this[My](e.origin, this[Ly]).on("drain", this[ky]).on("connect", this[Ty]).on("disconnect", this[xy]).on("connectionError", this[Uy]), this[Xr].set(n, A)), A.dispatch(e, r);
        }
        async [qY]() {
          let e = [];
          for (let r of this[Xr].values()) e.push(r.close());
          this[Xr].clear(), await Promise.all(e);
        }
        async [JY](e) {
          let r = [];
          for (let n of this[Xr].values()) r.push(n.destroy(e));
          this[Xr].clear(), await Promise.all(r);
        }
      };
      vy.exports = jE;
    });
    var $E = C((iK, Oy) => {
      "use strict";
      var { kProxy: KY, kClose: zY, kDestroy: e2 } = ne(), { URL: ps } = __require("node:url"), t2 = PA(), r2 = vA(), n2 = DA(), { InvalidArgumentError: Ic, RequestAbortedError: A2, SecureProxyConnectionError: i2 } = H(), Py = ts(), Qc = Symbol("proxy agent"), Cc = Symbol("proxy client"), ms = Symbol("proxy headers"), ZE = Symbol("request tls settings"), Yy = Symbol("proxy tls settings"), Gy = Symbol("connect endpoint function");
      function s2(t) {
        return t === "https:" ? 443 : 80;
      }
      function o2(t, e) {
        return new r2(t, e);
      }
      var a2 = () => {
      }, XE = class extends n2 {
        constructor(e) {
          if (!e || typeof e == "object" && !(e instanceof ps) && !e.uri) throw new Ic("Proxy uri is mandatory");
          let { clientFactory: r = o2 } = e;
          if (typeof r != "function") throw new Ic("Proxy opts.clientFactory must be a function.");
          super();
          let n = this.#e(e), { href: A, origin: i, port: s, protocol: o, username: a, password: c, hostname: l } = n;
          if (this[KY] = { uri: A, protocol: o }, this[ZE] = e.requestTls, this[Yy] = e.proxyTls, this[ms] = e.headers || {}, e.auth && e.token) throw new Ic("opts.auth cannot be used in combination with opts.token");
          e.auth ? this[ms]["proxy-authorization"] = `Basic ${e.auth}` : e.token ? this[ms]["proxy-authorization"] = e.token : a && c && (this[ms]["proxy-authorization"] = `Basic ${Buffer.from(`${decodeURIComponent(a)}:${decodeURIComponent(c)}`).toString("base64")}`);
          let u = Py({ ...e.proxyTls });
          this[Gy] = Py({ ...e.requestTls }), this[Cc] = r(n, { connect: u }), this[Qc] = new t2({ ...e, connect: async (g, E) => {
            let h = g.host;
            g.port || (h += `:${s2(g.protocol)}`);
            try {
              let { socket: f, statusCode: B } = await this[Cc].connect({ origin: i, port: s, path: h, signal: g.signal, headers: { ...this[ms], host: g.host }, servername: this[Yy]?.servername || l });
              if (B !== 200 && (f.on("error", a2).destroy(), E(new A2(`Proxy response (${B}) !== 200 when HTTP Tunneling`))), g.protocol !== "https:") {
                E(null, f);
                return;
              }
              let Q;
              this[ZE] ? Q = this[ZE].servername : Q = g.servername, this[Gy]({ ...g, servername: Q, httpSocket: f }, E);
            } catch (f) {
              f.code === "ERR_TLS_CERT_ALTNAME_INVALID" ? E(new i2(f)) : E(f);
            }
          } });
        }
        dispatch(e, r) {
          let n = c2(e.headers);
          if (l2(n), n && !("host" in n) && !("Host" in n)) {
            let { host: A } = new ps(e.origin);
            n.host = A;
          }
          return this[Qc].dispatch({ ...e, headers: n }, r);
        }
        #e(e) {
          return typeof e == "string" ? new ps(e) : e instanceof ps ? e : new ps(e.uri);
        }
        async [zY]() {
          await this[Qc].close(), await this[Cc].close();
        }
        async [e2]() {
          await this[Qc].destroy(), await this[Cc].destroy();
        }
      };
      function c2(t) {
        if (Array.isArray(t)) {
          let e = {};
          for (let r = 0; r < t.length; r += 2) e[t[r]] = t[r + 1];
          return e;
        }
        return t;
      }
      function l2(t) {
        if (t && Object.keys(t).find((r) => r.toLowerCase() === "proxy-authorization")) throw new Ic("Proxy-Authorization should be sent in ProxyAgent constructor");
      }
      Oy.exports = XE;
    });
    var Wy = C((sK, Jy) => {
      "use strict";
      var u2 = DA(), { kClose: g2, kDestroy: E2, kClosed: Vy, kDestroyed: Hy, kDispatch: d2, kNoProxyAgent: ys, kHttpProxyAgent: $r, kHttpsProxyAgent: Rn } = ne(), qy = $E(), h2 = PA(), f2 = { "http:": 80, "https:": 443 }, KE = class extends u2 {
        #e = null;
        #t = null;
        #r = null;
        constructor(e = {}) {
          super(), this.#r = e;
          let { httpProxy: r, httpsProxy: n, noProxy: A, ...i } = e;
          this[ys] = new h2(i);
          let s = r ?? process.env.http_proxy ?? process.env.HTTP_PROXY;
          s ? this[$r] = new qy({ ...i, uri: s }) : this[$r] = this[ys];
          let o = n ?? process.env.https_proxy ?? process.env.HTTPS_PROXY;
          o ? this[Rn] = new qy({ ...i, uri: o }) : this[Rn] = this[$r], this.#A();
        }
        [d2](e, r) {
          let n = new URL(e.origin);
          return this.#n(n).dispatch(e, r);
        }
        async [g2]() {
          await this[ys].close(), this[$r][Vy] || await this[$r].close(), this[Rn][Vy] || await this[Rn].close();
        }
        async [E2](e) {
          await this[ys].destroy(e), this[$r][Hy] || await this[$r].destroy(e), this[Rn][Hy] || await this[Rn].destroy(e);
        }
        #n(e) {
          let { protocol: r, host: n, port: A } = e;
          return n = n.replace(/:\d*$/, "").toLowerCase(), A = Number.parseInt(A, 10) || f2[r] || 0, this.#i(n, A) ? r === "https:" ? this[Rn] : this[$r] : this[ys];
        }
        #i(e, r) {
          if (this.#a && this.#A(), this.#t.length === 0) return true;
          if (this.#e === "*") return false;
          for (let n = 0; n < this.#t.length; n++) {
            let A = this.#t[n];
            if (!(A.port && A.port !== r)) {
              if (/^[.*]/.test(A.hostname)) {
                if (e.endsWith(A.hostname.replace(/^\*/, ""))) return false;
              } else if (e === A.hostname) return false;
            }
          }
          return true;
        }
        #A() {
          let e = this.#r.noProxy ?? this.#s, r = e.split(/[,\s]/), n = [];
          for (let A = 0; A < r.length; A++) {
            let i = r[A];
            if (!i) continue;
            let s = i.match(/^(.+):(\d+)$/);
            n.push({ hostname: (s ? s[1] : i).toLowerCase(), port: s ? Number.parseInt(s[2], 10) : 0 });
          }
          this.#e = e, this.#t = n;
        }
        get #a() {
          return this.#r.noProxy !== void 0 ? false : this.#e !== this.#s;
        }
        get #s() {
          return process.env.no_proxy ?? process.env.NO_PROXY ?? "";
        }
      };
      Jy.exports = KE;
    });
    var Bc = C((oK, Xy) => {
      "use strict";
      var YA = __require("node:assert"), { kRetryHandlerDefaultRetry: _y } = ne(), { RequestRetryError: ws } = H(), Q2 = va(), { isDisturbed: jy, parseRangeHeader: Zy, wrapRequestBody: C2 } = Y();
      function I2(t) {
        let e = Date.now();
        return new Date(t).getTime() - e;
      }
      var zE = class t {
        constructor(e, { dispatch: r, handler: n }) {
          let { retryOptions: A, ...i } = e, { retry: s, maxRetries: o, maxTimeout: a, minTimeout: c, timeoutFactor: l, methods: u, errorCodes: g, retryAfter: E, statusCodes: h } = A ?? {};
          this.dispatch = r, this.handler = Q2.wrap(n), this.opts = { ...i, body: C2(e.body) }, this.retryOpts = { retry: s ?? t[_y], retryAfter: E ?? true, maxTimeout: a ?? 30 * 1e3, minTimeout: c ?? 500, timeoutFactor: l ?? 2, maxRetries: o ?? 5, methods: u ?? ["GET", "HEAD", "OPTIONS", "PUT", "DELETE", "TRACE"], statusCodes: h ?? [500, 502, 503, 504, 429], errorCodes: g ?? ["ECONNRESET", "ECONNREFUSED", "ENOTFOUND", "ENETDOWN", "ENETUNREACH", "EHOSTDOWN", "EHOSTUNREACH", "EPIPE", "UND_ERR_SOCKET"] }, this.retryCount = 0, this.retryCountCheckpoint = 0, this.headersSent = false, this.start = 0, this.end = null, this.etag = null;
        }
        onRequestStart(e, r) {
          this.headersSent || this.handler.onRequestStart?.(e, r);
        }
        onRequestUpgrade(e, r, n, A) {
          this.handler.onRequestUpgrade?.(e, r, n, A);
        }
        static [_y](e, { state: r, opts: n }, A) {
          let { statusCode: i, code: s, headers: o } = e, { method: a, retryOptions: c } = n, { maxRetries: l, minTimeout: u, maxTimeout: g, timeoutFactor: E, statusCodes: h, errorCodes: f, methods: B } = c, { counter: Q } = r;
          if (s && s !== "UND_ERR_REQ_RETRY" && !f.includes(s)) {
            A(e);
            return;
          }
          if (Array.isArray(B) && !B.includes(a)) {
            A(e);
            return;
          }
          if (i != null && Array.isArray(h) && !h.includes(i)) {
            A(e);
            return;
          }
          if (Q > l) {
            A(e);
            return;
          }
          let I = o?.["retry-after"];
          I && (I = Number(I), I = Number.isNaN(I) ? I2(I) : I * 1e3);
          let p = I > 0 ? Math.min(I, g) : Math.min(u * E ** (Q - 1), g);
          setTimeout(() => A(null), p);
        }
        onResponseStart(e, r, n, A) {
          if (this.retryCount += 1, r >= 300) if (this.retryOpts.statusCodes.includes(r) === false) {
            this.headersSent = true, this.handler.onResponseStart?.(e, r, n, A);
            return;
          } else throw new ws("Request failed", r, { headers: n, data: { count: this.retryCount } });
          if (this.headersSent) {
            if (r !== 206 && (this.start > 0 || r !== 200)) throw new ws("server does not support the range header and the payload was partially consumed", r, { headers: n, data: { count: this.retryCount } });
            let i = Zy(n["content-range"]);
            if (!i) throw new ws("Content-Range mismatch", r, { headers: n, data: { count: this.retryCount } });
            if (this.etag != null && this.etag !== n.etag) throw new ws("ETag mismatch", r, { headers: n, data: { count: this.retryCount } });
            let { start: s, size: o, end: a = o ? o - 1 : null } = i;
            YA(this.start === s, "content-range mismatch"), YA(this.end == null || this.end === a, "content-range mismatch");
            return;
          }
          if (this.end == null) {
            if (r === 206) {
              let i = Zy(n["content-range"]);
              if (i == null) {
                this.headersSent = true, this.handler.onResponseStart?.(e, r, n, A);
                return;
              }
              let { start: s, size: o, end: a = o ? o - 1 : null } = i;
              YA(s != null && Number.isFinite(s), "content-range mismatch"), YA(a != null && Number.isFinite(a), "invalid content-length"), this.start = s, this.end = a;
            }
            if (this.end == null) {
              let i = n["content-length"];
              this.end = i != null ? Number(i) - 1 : null;
            }
            YA(Number.isFinite(this.start)), YA(this.end == null || Number.isFinite(this.end), "invalid content-length"), this.resume = true, this.etag = n.etag != null ? n.etag : null, this.etag != null && this.etag[0] === "W" && this.etag[1] === "/" && (this.etag = null), this.headersSent = true, this.handler.onResponseStart?.(e, r, n, A);
          } else throw new ws("Request failed", r, { headers: n, data: { count: this.retryCount } });
        }
        onResponseData(e, r) {
          this.start += r.length, this.handler.onResponseData?.(e, r);
        }
        onResponseEnd(e, r) {
          return this.retryCount = 0, this.handler.onResponseEnd?.(e, r);
        }
        onResponseError(e, r) {
          if (e?.aborted || jy(this.opts.body)) {
            this.handler.onResponseError?.(e, r);
            return;
          }
          this.retryCount - this.retryCountCheckpoint > 0 ? this.retryCount = this.retryCountCheckpoint + (this.retryCount - this.retryCountCheckpoint) : this.retryCount += 1, this.retryOpts.retry(r, { state: { counter: this.retryCount }, opts: { retryOptions: this.retryOpts, ...this.opts } }, n.bind(this));
          function n(A) {
            if (A != null || e?.aborted || jy(this.opts.body)) return this.handler.onResponseError?.(e, A);
            if (this.start !== 0) {
              let i = { range: `bytes=${this.start}-${this.end ?? ""}` };
              this.etag != null && (i["if-match"] = this.etag), this.opts = { ...this.opts, headers: { ...this.opts.headers, ...i } };
            }
            try {
              this.retryCountCheckpoint = this.retryCount, this.dispatch(this.opts, this);
            } catch (i) {
              this.handler.onResponseError?.(e, i);
            }
          }
        }
      };
      Xy.exports = zE;
    });
    var Ky = C((aK, $y) => {
      "use strict";
      var B2 = zi(), p2 = Bc(), ed = class extends B2 {
        #e = null;
        #t = null;
        constructor(e, r = {}) {
          super(r), this.#e = e, this.#t = r;
        }
        dispatch(e, r) {
          let n = new p2({ ...e, retryOptions: this.#t }, { dispatch: this.#e.dispatch.bind(this.#e), handler: r });
          return this.#e.dispatch(e, n);
        }
        close() {
          return this.#e.close();
        }
        destroy() {
          return this.#e.destroy();
        }
      };
      $y.exports = ed;
    });
    var ow = C((cK, sw) => {
      "use strict";
      var rw = __require("node:assert"), { Readable: m2 } = __require("node:stream"), { RequestAbortedError: nw, NotSupportedError: y2, InvalidArgumentError: w2, AbortError: td } = H(), Aw = Y(), { ReadableStreamFrom: D2 } = Y(), rt = Symbol("kConsume"), pc = Symbol("kReading"), Sn = Symbol("kBody"), zy = Symbol("kAbort"), iw = Symbol("kContentType"), rd = Symbol("kContentLength"), nd = Symbol("kUsed"), mc = Symbol("kBytesRead"), R2 = () => {
      }, Ad = class extends m2 {
        constructor({ resume: e, abort: r, contentType: n = "", contentLength: A, highWaterMark: i = 64 * 1024 }) {
          super({ autoDestroy: true, read: e, highWaterMark: i }), this._readableState.dataEmitted = false, this[zy] = r, this[rt] = null, this[mc] = 0, this[Sn] = null, this[nd] = false, this[iw] = n, this[rd] = Number.isFinite(A) ? A : null, this[pc] = false;
        }
        _destroy(e, r) {
          !e && !this._readableState.endEmitted && (e = new nw()), e && this[zy](), this[nd] ? r(e) : setImmediate(() => {
            r(e);
          });
        }
        on(e, r) {
          return (e === "data" || e === "readable") && (this[pc] = true, this[nd] = true), super.on(e, r);
        }
        addListener(e, r) {
          return this.on(e, r);
        }
        off(e, r) {
          let n = super.off(e, r);
          return (e === "data" || e === "readable") && (this[pc] = this.listenerCount("data") > 0 || this.listenerCount("readable") > 0), n;
        }
        removeListener(e, r) {
          return this.off(e, r);
        }
        push(e) {
          return this[mc] += e ? e.length : 0, this[rt] && e !== null ? (sd(this[rt], e), this[pc] ? super.push(e) : true) : super.push(e);
        }
        text() {
          return Ds(this, "text");
        }
        json() {
          return Ds(this, "json");
        }
        blob() {
          return Ds(this, "blob");
        }
        bytes() {
          return Ds(this, "bytes");
        }
        arrayBuffer() {
          return Ds(this, "arrayBuffer");
        }
        async formData() {
          throw new y2();
        }
        get bodyUsed() {
          return Aw.isDisturbed(this);
        }
        get body() {
          return this[Sn] || (this[Sn] = D2(this), this[rt] && (this[Sn].getReader(), rw(this[Sn].locked))), this[Sn];
        }
        async dump(e) {
          let r = e?.signal;
          if (r != null && (typeof r != "object" || !("aborted" in r))) throw new w2("signal must be an AbortSignal");
          let n = e?.limit && Number.isFinite(e.limit) ? e.limit : 128 * 1024;
          return r?.throwIfAborted(), this._readableState.closeEmitted ? null : await new Promise((A, i) => {
            if ((this[rd] && this[rd] > n || this[mc] > n) && this.destroy(new td()), r) {
              let s = () => {
                this.destroy(r.reason ?? new td());
              };
              r.addEventListener("abort", s), this.on("close", function() {
                r.removeEventListener("abort", s), r.aborted ? i(r.reason ?? new td()) : A(null);
              });
            } else this.on("close", A);
            this.on("error", R2).on("data", () => {
              this[mc] > n && this.destroy();
            }).resume();
          });
        }
        setEncoding(e) {
          return Buffer.isEncoding(e) && (this._readableState.encoding = e), this;
        }
      };
      function S2(t) {
        return t[Sn]?.locked === true || t[rt] !== null;
      }
      function b2(t) {
        return Aw.isDisturbed(t) || S2(t);
      }
      function Ds(t, e) {
        return rw(!t[rt]), new Promise((r, n) => {
          if (b2(t)) {
            let A = t._readableState;
            A.destroyed && A.closeEmitted === false ? t.on("error", (i) => {
              n(i);
            }).on("close", () => {
              n(new TypeError("unusable"));
            }) : n(A.errored ?? new TypeError("unusable"));
          } else queueMicrotask(() => {
            t[rt] = { type: e, stream: t, resolve: r, reject: n, length: 0, body: [] }, t.on("error", function(A) {
              od(this[rt], A);
            }).on("close", function() {
              this[rt].body !== null && od(this[rt], new nw());
            }), N2(t[rt]);
          });
        });
      }
      function N2(t) {
        if (t.body === null) return;
        let { _readableState: e } = t.stream;
        if (e.bufferIndex) {
          let r = e.bufferIndex, n = e.buffer.length;
          for (let A = r; A < n; A++) sd(t, e.buffer[A]);
        } else for (let r of e.buffer) sd(t, r);
        for (e.endEmitted ? tw(this[rt], this._readableState.encoding) : t.stream.on("end", function() {
          tw(this[rt], this._readableState.encoding);
        }), t.stream.resume(); t.stream.read() != null; ) ;
      }
      function id(t, e, r) {
        if (t.length === 0 || e === 0) return "";
        let n = t.length === 1 ? t[0] : Buffer.concat(t, e), A = n.length, i = A > 2 && n[0] === 239 && n[1] === 187 && n[2] === 191 ? 3 : 0;
        return !r || r === "utf8" || r === "utf-8" ? n.utf8Slice(i, A) : n.subarray(i, A).toString(r);
      }
      function ew(t, e) {
        if (t.length === 0 || e === 0) return new Uint8Array(0);
        if (t.length === 1) return new Uint8Array(t[0]);
        let r = new Uint8Array(Buffer.allocUnsafeSlow(e).buffer), n = 0;
        for (let A = 0; A < t.length; ++A) {
          let i = t[A];
          r.set(i, n), n += i.length;
        }
        return r;
      }
      function tw(t, e) {
        let { type: r, body: n, resolve: A, stream: i, length: s } = t;
        try {
          r === "text" ? A(id(n, s, e)) : r === "json" ? A(JSON.parse(id(n, s, e))) : r === "arrayBuffer" ? A(ew(n, s).buffer) : r === "blob" ? A(new Blob(n, { type: i[iw] })) : r === "bytes" && A(ew(n, s)), od(t);
        } catch (o) {
          i.destroy(o);
        }
      }
      function sd(t, e) {
        t.length += e.length, t.body.push(e);
      }
      function od(t, e) {
        t.body !== null && (e ? t.reject(e) : t.resolve(), t.type = null, t.stream = null, t.resolve = null, t.reject = null, t.length = 0, t.body = null);
      }
      sw.exports = { Readable: Ad, chunksDecode: id };
    });
    var lw = C((lK, ad) => {
      "use strict";
      var F2 = __require("node:assert"), { AsyncResource: T2 } = __require("node:async_hooks"), { Readable: x2 } = ow(), { InvalidArgumentError: GA, RequestAbortedError: aw } = H(), bt = Y();
      function yc() {
      }
      var wc = class extends T2 {
        constructor(e, r) {
          if (!e || typeof e != "object") throw new GA("invalid opts");
          let { signal: n, method: A, opaque: i, body: s, onInfo: o, responseHeaders: a, highWaterMark: c } = e;
          try {
            if (typeof r != "function") throw new GA("invalid callback");
            if (c && (typeof c != "number" || c < 0)) throw new GA("invalid highWaterMark");
            if (n && typeof n.on != "function" && typeof n.addEventListener != "function") throw new GA("signal must be an EventEmitter or EventTarget");
            if (A === "CONNECT") throw new GA("invalid method");
            if (o && typeof o != "function") throw new GA("invalid onInfo callback");
            super("UNDICI_REQUEST");
          } catch (l) {
            throw bt.isStream(s) && bt.destroy(s.on("error", yc), l), l;
          }
          this.method = A, this.responseHeaders = a || null, this.opaque = i || null, this.callback = r, this.res = null, this.abort = null, this.body = s, this.trailers = {}, this.context = null, this.onInfo = o || null, this.highWaterMark = c, this.reason = null, this.removeAbortListener = null, n?.aborted ? this.reason = n.reason ?? new aw() : n && (this.removeAbortListener = bt.addAbortListener(n, () => {
            this.reason = n.reason ?? new aw(), this.res ? bt.destroy(this.res.on("error", yc), this.reason) : this.abort && this.abort(this.reason);
          }));
        }
        onConnect(e, r) {
          if (this.reason) {
            e(this.reason);
            return;
          }
          F2(this.callback), this.abort = e, this.context = r;
        }
        onHeaders(e, r, n, A) {
          let { callback: i, opaque: s, abort: o, context: a, responseHeaders: c, highWaterMark: l } = this, u = c === "raw" ? bt.parseRawHeaders(r) : bt.parseHeaders(r);
          if (e < 200) {
            this.onInfo && this.onInfo({ statusCode: e, headers: u });
            return;
          }
          let g = c === "raw" ? bt.parseHeaders(r) : u, E = g["content-type"], h = g["content-length"], f = new x2({ resume: n, abort: o, contentType: E, contentLength: this.method !== "HEAD" && h ? Number(h) : null, highWaterMark: l });
          this.removeAbortListener && (f.on("close", this.removeAbortListener), this.removeAbortListener = null), this.callback = null, this.res = f, i !== null && this.runInAsyncScope(i, null, null, { statusCode: e, headers: u, trailers: this.trailers, opaque: s, body: f, context: a });
        }
        onData(e) {
          return this.res.push(e);
        }
        onComplete(e) {
          bt.parseHeaders(e, this.trailers), this.res.push(null);
        }
        onError(e) {
          let { res: r, callback: n, body: A, opaque: i } = this;
          n && (this.callback = null, queueMicrotask(() => {
            this.runInAsyncScope(n, null, e, { opaque: i });
          })), r && (this.res = null, queueMicrotask(() => {
            bt.destroy(r.on("error", yc), e);
          })), A && (this.body = null, bt.isStream(A) && (A.on("error", yc), bt.destroy(A, e))), this.removeAbortListener && (this.removeAbortListener(), this.removeAbortListener = null);
        }
      };
      function cw(t, e) {
        if (e === void 0) return new Promise((r, n) => {
          cw.call(this, t, (A, i) => A ? n(A) : r(i));
        });
        try {
          let r = new wc(t, e);
          this.dispatch(t, r);
        } catch (r) {
          if (typeof e != "function") throw r;
          let n = t?.opaque;
          queueMicrotask(() => e(r, { opaque: n }));
        }
      }
      ad.exports = cw;
      ad.exports.RequestHandler = wc;
    });
    var Rs = C((uK, Ew) => {
      "use strict";
      var { addAbortListener: U2 } = Y(), { RequestAbortedError: k2 } = H(), OA = Symbol("kListener"), Zt = Symbol("kSignal");
      function uw(t) {
        t.abort ? t.abort(t[Zt]?.reason) : t.reason = t[Zt]?.reason ?? new k2(), gw(t);
      }
      function M2(t, e) {
        if (t.reason = null, t[Zt] = null, t[OA] = null, !!e) {
          if (e.aborted) {
            uw(t);
            return;
          }
          t[Zt] = e, t[OA] = () => {
            uw(t);
          }, U2(t[Zt], t[OA]);
        }
      }
      function gw(t) {
        t[Zt] && ("removeEventListener" in t[Zt] ? t[Zt].removeEventListener("abort", t[OA]) : t[Zt].removeListener("abort", t[OA]), t[Zt] = null, t[OA] = null);
      }
      Ew.exports = { addSignal: M2, removeSignal: gw };
    });
    var Qw = C((gK, fw) => {
      "use strict";
      var L2 = __require("node:assert"), { finished: v2 } = __require("node:stream"), { AsyncResource: P2 } = __require("node:async_hooks"), { InvalidArgumentError: VA, InvalidReturnValueError: Y2 } = H(), Br = Y(), { addSignal: G2, removeSignal: dw } = Rs();
      function O2() {
      }
      var cd = class extends P2 {
        constructor(e, r, n) {
          if (!e || typeof e != "object") throw new VA("invalid opts");
          let { signal: A, method: i, opaque: s, body: o, onInfo: a, responseHeaders: c } = e;
          try {
            if (typeof n != "function") throw new VA("invalid callback");
            if (typeof r != "function") throw new VA("invalid factory");
            if (A && typeof A.on != "function" && typeof A.addEventListener != "function") throw new VA("signal must be an EventEmitter or EventTarget");
            if (i === "CONNECT") throw new VA("invalid method");
            if (a && typeof a != "function") throw new VA("invalid onInfo callback");
            super("UNDICI_STREAM");
          } catch (l) {
            throw Br.isStream(o) && Br.destroy(o.on("error", O2), l), l;
          }
          this.responseHeaders = c || null, this.opaque = s || null, this.factory = r, this.callback = n, this.res = null, this.abort = null, this.context = null, this.trailers = null, this.body = o, this.onInfo = a || null, Br.isStream(o) && o.on("error", (l) => {
            this.onError(l);
          }), G2(this, A);
        }
        onConnect(e, r) {
          if (this.reason) {
            e(this.reason);
            return;
          }
          L2(this.callback), this.abort = e, this.context = r;
        }
        onHeaders(e, r, n, A) {
          let { factory: i, opaque: s, context: o, responseHeaders: a } = this, c = a === "raw" ? Br.parseRawHeaders(r) : Br.parseHeaders(r);
          if (e < 200) {
            this.onInfo && this.onInfo({ statusCode: e, headers: c });
            return;
          }
          if (this.factory = null, i === null) return;
          let l = this.runInAsyncScope(i, null, { statusCode: e, headers: c, opaque: s, context: o });
          if (!l || typeof l.write != "function" || typeof l.end != "function" || typeof l.on != "function") throw new Y2("expected Writable");
          return v2(l, { readable: false }, (g) => {
            let { callback: E, res: h, opaque: f, trailers: B, abort: Q } = this;
            this.res = null, (g || !h.readable) && Br.destroy(h, g), this.callback = null, this.runInAsyncScope(E, null, g || null, { opaque: f, trailers: B }), g && Q();
          }), l.on("drain", n), this.res = l, (l.writableNeedDrain !== void 0 ? l.writableNeedDrain : l._writableState?.needDrain) !== true;
        }
        onData(e) {
          let { res: r } = this;
          return r ? r.write(e) : true;
        }
        onComplete(e) {
          let { res: r } = this;
          dw(this), r && (this.trailers = Br.parseHeaders(e), r.end());
        }
        onError(e) {
          let { res: r, callback: n, opaque: A, body: i } = this;
          dw(this), this.factory = null, r ? (this.res = null, Br.destroy(r, e)) : n && (this.callback = null, queueMicrotask(() => {
            this.runInAsyncScope(n, null, e, { opaque: A });
          })), i && (this.body = null, Br.destroy(i, e));
        }
      };
      function hw(t, e, r) {
        if (r === void 0) return new Promise((n, A) => {
          hw.call(this, t, e, (i, s) => i ? A(i) : n(s));
        });
        try {
          let n = new cd(t, e, r);
          this.dispatch(t, n);
        } catch (n) {
          if (typeof r != "function") throw n;
          let A = t?.opaque;
          queueMicrotask(() => r(n, { opaque: A }));
        }
      }
      fw.exports = hw;
    });
    var pw = C((EK, Bw) => {
      "use strict";
      var { Readable: Iw, Duplex: V2, PassThrough: H2 } = __require("node:stream"), q2 = __require("node:assert"), { AsyncResource: J2 } = __require("node:async_hooks"), { InvalidArgumentError: Ss, InvalidReturnValueError: W2, RequestAbortedError: ld } = H(), Xt = Y(), { addSignal: _2, removeSignal: j2 } = Rs();
      function Cw() {
      }
      var HA = Symbol("resume"), ud = class extends Iw {
        constructor() {
          super({ autoDestroy: true }), this[HA] = null;
        }
        _read() {
          let { [HA]: e } = this;
          e && (this[HA] = null, e());
        }
        _destroy(e, r) {
          this._read(), r(e);
        }
      }, gd = class extends Iw {
        constructor(e) {
          super({ autoDestroy: true }), this[HA] = e;
        }
        _read() {
          this[HA]();
        }
        _destroy(e, r) {
          !e && !this._readableState.endEmitted && (e = new ld()), r(e);
        }
      }, Ed = class extends J2 {
        constructor(e, r) {
          if (!e || typeof e != "object") throw new Ss("invalid opts");
          if (typeof r != "function") throw new Ss("invalid handler");
          let { signal: n, method: A, opaque: i, onInfo: s, responseHeaders: o } = e;
          if (n && typeof n.on != "function" && typeof n.addEventListener != "function") throw new Ss("signal must be an EventEmitter or EventTarget");
          if (A === "CONNECT") throw new Ss("invalid method");
          if (s && typeof s != "function") throw new Ss("invalid onInfo callback");
          super("UNDICI_PIPELINE"), this.opaque = i || null, this.responseHeaders = o || null, this.handler = r, this.abort = null, this.context = null, this.onInfo = s || null, this.req = new ud().on("error", Cw), this.ret = new V2({ readableObjectMode: e.objectMode, autoDestroy: true, read: () => {
            let { body: a } = this;
            a?.resume && a.resume();
          }, write: (a, c, l) => {
            let { req: u } = this;
            u.push(a, c) || u._readableState.destroyed ? l() : u[HA] = l;
          }, destroy: (a, c) => {
            let { body: l, req: u, res: g, ret: E, abort: h } = this;
            !a && !E._readableState.endEmitted && (a = new ld()), h && a && h(), Xt.destroy(l, a), Xt.destroy(u, a), Xt.destroy(g, a), j2(this), c(a);
          } }).on("prefinish", () => {
            let { req: a } = this;
            a.push(null);
          }), this.res = null, _2(this, n);
        }
        onConnect(e, r) {
          let { res: n } = this;
          if (this.reason) {
            e(this.reason);
            return;
          }
          q2(!n, "pipeline cannot be retried"), this.abort = e, this.context = r;
        }
        onHeaders(e, r, n) {
          let { opaque: A, handler: i, context: s } = this;
          if (e < 200) {
            if (this.onInfo) {
              let a = this.responseHeaders === "raw" ? Xt.parseRawHeaders(r) : Xt.parseHeaders(r);
              this.onInfo({ statusCode: e, headers: a });
            }
            return;
          }
          this.res = new gd(n);
          let o;
          try {
            this.handler = null;
            let a = this.responseHeaders === "raw" ? Xt.parseRawHeaders(r) : Xt.parseHeaders(r);
            o = this.runInAsyncScope(i, null, { statusCode: e, headers: a, opaque: A, body: this.res, context: s });
          } catch (a) {
            throw this.res.on("error", Cw), a;
          }
          if (!o || typeof o.on != "function") throw new W2("expected Readable");
          o.on("data", (a) => {
            let { ret: c, body: l } = this;
            !c.push(a) && l.pause && l.pause();
          }).on("error", (a) => {
            let { ret: c } = this;
            Xt.destroy(c, a);
          }).on("end", () => {
            let { ret: a } = this;
            a.push(null);
          }).on("close", () => {
            let { ret: a } = this;
            a._readableState.ended || Xt.destroy(a, new ld());
          }), this.body = o;
        }
        onData(e) {
          let { res: r } = this;
          return r.push(e);
        }
        onComplete(e) {
          let { res: r } = this;
          r.push(null);
        }
        onError(e) {
          let { ret: r } = this;
          this.handler = null, Xt.destroy(r, e);
        }
      };
      function Z2(t, e) {
        try {
          let r = new Ed(t, e);
          return this.dispatch({ ...t, body: r.req }, r), r.ret;
        } catch (r) {
          return new H2().destroy(r);
        }
      }
      Bw.exports = Z2;
    });
    var Sw = C((dK, Rw) => {
      "use strict";
      var { InvalidArgumentError: dd, SocketError: X2 } = H(), { AsyncResource: $2 } = __require("node:async_hooks"), mw = __require("node:assert"), yw = Y(), { addSignal: K2, removeSignal: ww } = Rs(), hd = class extends $2 {
        constructor(e, r) {
          if (!e || typeof e != "object") throw new dd("invalid opts");
          if (typeof r != "function") throw new dd("invalid callback");
          let { signal: n, opaque: A, responseHeaders: i } = e;
          if (n && typeof n.on != "function" && typeof n.addEventListener != "function") throw new dd("signal must be an EventEmitter or EventTarget");
          super("UNDICI_UPGRADE"), this.responseHeaders = i || null, this.opaque = A || null, this.callback = r, this.abort = null, this.context = null, K2(this, n);
        }
        onConnect(e, r) {
          if (this.reason) {
            e(this.reason);
            return;
          }
          mw(this.callback), this.abort = e, this.context = null;
        }
        onHeaders() {
          throw new X2("bad upgrade", null);
        }
        onUpgrade(e, r, n) {
          mw(e === 101);
          let { callback: A, opaque: i, context: s } = this;
          ww(this), this.callback = null;
          let o = this.responseHeaders === "raw" ? yw.parseRawHeaders(r) : yw.parseHeaders(r);
          this.runInAsyncScope(A, null, null, { headers: o, socket: n, opaque: i, context: s });
        }
        onError(e) {
          let { callback: r, opaque: n } = this;
          ww(this), r && (this.callback = null, queueMicrotask(() => {
            this.runInAsyncScope(r, null, e, { opaque: n });
          }));
        }
      };
      function Dw(t, e) {
        if (e === void 0) return new Promise((r, n) => {
          Dw.call(this, t, (A, i) => A ? n(A) : r(i));
        });
        try {
          let r = new hd(t, e), n = { ...t, method: t.method || "GET", upgrade: t.protocol || "Websocket" };
          this.dispatch(n, r);
        } catch (r) {
          if (typeof e != "function") throw r;
          let n = t?.opaque;
          queueMicrotask(() => e(r, { opaque: n }));
        }
      }
      Rw.exports = Dw;
    });
    var xw = C((hK, Tw) => {
      "use strict";
      var z22 = __require("node:assert"), { AsyncResource: eG } = __require("node:async_hooks"), { InvalidArgumentError: fd, SocketError: tG } = H(), bw = Y(), { addSignal: rG, removeSignal: Nw } = Rs(), Qd = class extends eG {
        constructor(e, r) {
          if (!e || typeof e != "object") throw new fd("invalid opts");
          if (typeof r != "function") throw new fd("invalid callback");
          let { signal: n, opaque: A, responseHeaders: i } = e;
          if (n && typeof n.on != "function" && typeof n.addEventListener != "function") throw new fd("signal must be an EventEmitter or EventTarget");
          super("UNDICI_CONNECT"), this.opaque = A || null, this.responseHeaders = i || null, this.callback = r, this.abort = null, rG(this, n);
        }
        onConnect(e, r) {
          if (this.reason) {
            e(this.reason);
            return;
          }
          z22(this.callback), this.abort = e, this.context = r;
        }
        onHeaders() {
          throw new tG("bad connect", null);
        }
        onUpgrade(e, r, n) {
          let { callback: A, opaque: i, context: s } = this;
          Nw(this), this.callback = null;
          let o = r;
          o != null && (o = this.responseHeaders === "raw" ? bw.parseRawHeaders(r) : bw.parseHeaders(r)), this.runInAsyncScope(A, null, null, { statusCode: e, headers: o, socket: n, opaque: i, context: s });
        }
        onError(e) {
          let { callback: r, opaque: n } = this;
          Nw(this), r && (this.callback = null, queueMicrotask(() => {
            this.runInAsyncScope(r, null, e, { opaque: n });
          }));
        }
      };
      function Fw(t, e) {
        if (e === void 0) return new Promise((r, n) => {
          Fw.call(this, t, (A, i) => A ? n(A) : r(i));
        });
        try {
          let r = new Qd(t, e), n = { ...t, method: "CONNECT" };
          this.dispatch(n, r);
        } catch (r) {
          if (typeof e != "function") throw r;
          let n = t?.opaque;
          queueMicrotask(() => e(r, { opaque: n }));
        }
      }
      Tw.exports = Fw;
    });
    var Uw = C((fK, qA) => {
      "use strict";
      qA.exports.request = lw();
      qA.exports.stream = Qw();
      qA.exports.pipeline = pw();
      qA.exports.upgrade = Sw();
      qA.exports.connect = xw();
    });
    var Id = C((QK, kw) => {
      "use strict";
      var { UndiciError: nG } = H(), Cd = class extends nG {
        constructor(e) {
          super(e), this.name = "MockNotMatchedError", this.message = e || "The request does not match any registered mock dispatches", this.code = "UND_MOCK_ERR_MOCK_NOT_MATCHED";
        }
      };
      kw.exports = { MockNotMatchedError: Cd };
    });
    var JA = C((CK, Mw) => {
      "use strict";
      Mw.exports = { kAgent: Symbol("agent"), kOptions: Symbol("options"), kFactory: Symbol("factory"), kDispatches: Symbol("dispatches"), kDispatchKey: Symbol("dispatch key"), kDefaultHeaders: Symbol("default headers"), kDefaultTrailers: Symbol("default trailers"), kContentLength: Symbol("content length"), kMockAgent: Symbol("mock agent"), kMockAgentSet: Symbol("mock agent set"), kMockAgentGet: Symbol("mock agent get"), kMockDispatch: Symbol("mock dispatch"), kClose: Symbol("close"), kOriginalClose: Symbol("original agent close"), kOriginalDispatch: Symbol("original dispatch"), kOrigin: Symbol("origin"), kIsMockActive: Symbol("is mock active"), kNetConnect: Symbol("net connect"), kGetNetConnect: Symbol("get net connect"), kConnected: Symbol("connected"), kIgnoreTrailingSlash: Symbol("ignore trailing slash") };
    });
    var bs = C((IK, Ww) => {
      "use strict";
      var { MockNotMatchedError: bn } = Id(), { kDispatches: Dc, kMockAgent: AG, kOriginalDispatch: iG, kOrigin: sG, kGetNetConnect: oG } = JA(), { serializePathWithQuery: aG } = Y(), { STATUS_CODES: cG } = __require("node:http"), { types: { isPromise: lG } } = __require("node:util");
      function $t(t, e) {
        return typeof t == "string" ? t === e : t instanceof RegExp ? t.test(e) : typeof t == "function" ? t(e) === true : false;
      }
      function vw(t) {
        return Object.fromEntries(Object.entries(t).map(([e, r]) => [e.toLocaleLowerCase(), r]));
      }
      function Pw(t, e) {
        if (Array.isArray(t)) {
          for (let r = 0; r < t.length; r += 2) if (t[r].toLocaleLowerCase() === e.toLocaleLowerCase()) return t[r + 1];
          return;
        } else return typeof t.get == "function" ? t.get(e) : vw(t)[e.toLocaleLowerCase()];
      }
      function yd(t) {
        let e = t.slice(), r = [];
        for (let n = 0; n < e.length; n += 2) r.push([e[n], e[n + 1]]);
        return Object.fromEntries(r);
      }
      function Yw(t, e) {
        if (typeof t.headers == "function") return Array.isArray(e) && (e = yd(e)), t.headers(e ? vw(e) : {});
        if (typeof t.headers > "u") return true;
        if (typeof e != "object" || typeof t.headers != "object") return false;
        for (let [r, n] of Object.entries(t.headers)) {
          let A = Pw(e, r);
          if (!$t(n, A)) return false;
        }
        return true;
      }
      function Bd(t) {
        if (typeof t != "string") return t;
        let e = t.split("?");
        if (e.length !== 2) return t;
        let r = new URLSearchParams(e.pop());
        return r.sort(), [...e, r.toString()].join("?");
      }
      function uG(t, { path: e, method: r, body: n, headers: A }) {
        let i = $t(t.path, e), s = $t(t.method, r), o = typeof t.body < "u" ? $t(t.body, n) : true, a = Yw(t, A);
        return i && s && o && a;
      }
      function Gw(t) {
        return Buffer.isBuffer(t) || t instanceof Uint8Array || t instanceof ArrayBuffer ? t : typeof t == "object" ? JSON.stringify(t) : t ? t.toString() : "";
      }
      function Ow(t, e) {
        let r = e.query ? aG(e.path, e.query) : e.path, n = typeof r == "string" ? Bd(r) : r, A = Lw(n), i = t.filter(({ consumed: s }) => !s).filter(({ path: s, ignoreTrailingSlash: o }) => o ? $t(Lw(Bd(s)), A) : $t(Bd(s), n));
        if (i.length === 0) throw new bn(`Mock dispatch not matched for path '${n}'`);
        if (i = i.filter(({ method: s }) => $t(s, e.method)), i.length === 0) throw new bn(`Mock dispatch not matched for method '${e.method}' on path '${n}'`);
        if (i = i.filter(({ body: s }) => typeof s < "u" ? $t(s, e.body) : true), i.length === 0) throw new bn(`Mock dispatch not matched for body '${e.body}' on path '${n}'`);
        if (i = i.filter((s) => Yw(s, e.headers)), i.length === 0) {
          let s = typeof e.headers == "object" ? JSON.stringify(e.headers) : e.headers;
          throw new bn(`Mock dispatch not matched for headers '${s}' on path '${n}'`);
        }
        return i[0];
      }
      function gG(t, e, r, n) {
        let A = { timesInvoked: 0, times: 1, persist: false, consumed: false, ...n }, i = typeof r == "function" ? { callback: r } : { ...r }, s = { ...A, ...e, pending: true, data: { error: null, ...i } };
        return t.push(s), s;
      }
      function pd(t, e) {
        let r = t.findIndex((n) => n.consumed ? uG(n, e) : false);
        r !== -1 && t.splice(r, 1);
      }
      function Lw(t) {
        for (; t.endsWith("/"); ) t = t.slice(0, -1);
        return t.length === 0 && (t = "/"), t;
      }
      function Vw(t) {
        let { path: e, method: r, body: n, headers: A, query: i } = t;
        return { path: e, method: r, body: n, headers: A, query: i };
      }
      function md(t) {
        let e = Object.keys(t), r = [];
        for (let n = 0; n < e.length; ++n) {
          let A = e[n], i = t[A], s = Buffer.from(`${A}`);
          if (Array.isArray(i)) for (let o = 0; o < i.length; ++o) r.push(s, Buffer.from(`${i[o]}`));
          else r.push(s, Buffer.from(`${i}`));
        }
        return r;
      }
      function Hw(t) {
        return cG[t] || "unknown";
      }
      async function EG(t) {
        let e = [];
        for await (let r of t) e.push(r);
        return Buffer.concat(e).toString("utf8");
      }
      function qw(t, e) {
        let r = Vw(t), n = Ow(this[Dc], r);
        n.timesInvoked++, n.data.callback && (n.data = { ...n.data, ...n.data.callback(t) });
        let { data: { statusCode: A, data: i, headers: s, trailers: o, error: a }, delay: c, persist: l } = n, { timesInvoked: u, times: g } = n;
        if (n.consumed = !l && u >= g, n.pending = u < g, a !== null) return pd(this[Dc], r), e.onError(a), true;
        typeof c == "number" && c > 0 ? setTimeout(() => {
          E(this[Dc]);
        }, c) : E(this[Dc]);
        function E(f, B = i) {
          let Q = Array.isArray(t.headers) ? yd(t.headers) : t.headers, I = typeof B == "function" ? B({ ...t, headers: Q }) : B;
          if (lG(I)) {
            I.then((v) => E(f, v));
            return;
          }
          let p = Gw(I), w = md(s), D = md(o);
          e.onConnect?.((v) => e.onError(v), null), e.onHeaders?.(A, w, h, Hw(A)), e.onData?.(Buffer.from(p)), e.onComplete?.(D), pd(f, r);
        }
        function h() {
        }
        return true;
      }
      function dG() {
        let t = this[AG], e = this[sG], r = this[iG];
        return function(A, i) {
          if (t.isMockActive) try {
            qw.call(this, A, i);
          } catch (s) {
            if (s instanceof bn) {
              let o = t[oG]();
              if (o === false) throw new bn(`${s.message}: subsequent request to origin ${e} was not allowed (net.connect disabled)`);
              if (Jw(o, e)) r.call(this, A, i);
              else throw new bn(`${s.message}: subsequent request to origin ${e} was not allowed (net.connect is not enabled for this origin)`);
            } else throw s;
          }
          else r.call(this, A, i);
        };
      }
      function Jw(t, e) {
        let r = new URL(e);
        return t === true ? true : !!(Array.isArray(t) && t.some((n) => $t(n, r.host)));
      }
      function hG(t) {
        if (t) {
          let { agent: e, ...r } = t;
          return r;
        }
      }
      Ww.exports = { getResponseData: Gw, getMockDispatch: Ow, addMockDispatch: gG, deleteMockDispatch: pd, buildKey: Vw, generateKeyValues: md, matchValue: $t, getResponse: EG, getStatusText: Hw, mockDispatch: qw, buildMockDispatch: dG, checkNetConnect: Jw, buildMockOptions: hG, getHeaderByName: Pw, buildHeadersFromArray: yd };
    });
    var Fd = C((BK, Nd) => {
      "use strict";
      var { getResponseData: fG, buildKey: QG, addMockDispatch: wd } = bs(), { kDispatches: Rc, kDispatchKey: Sc, kDefaultHeaders: Dd, kDefaultTrailers: Rd, kContentLength: Sd, kMockDispatch: bc, kIgnoreTrailingSlash: Nc } = JA(), { InvalidArgumentError: Kt } = H(), { serializePathWithQuery: CG } = Y(), WA = class {
        constructor(e) {
          this[bc] = e;
        }
        delay(e) {
          if (typeof e != "number" || !Number.isInteger(e) || e <= 0) throw new Kt("waitInMs must be a valid integer > 0");
          return this[bc].delay = e, this;
        }
        persist() {
          return this[bc].persist = true, this;
        }
        times(e) {
          if (typeof e != "number" || !Number.isInteger(e) || e <= 0) throw new Kt("repeatTimes must be a valid integer > 0");
          return this[bc].times = e, this;
        }
      }, bd = class {
        constructor(e, r) {
          if (typeof e != "object") throw new Kt("opts must be an object");
          if (typeof e.path > "u") throw new Kt("opts.path must be defined");
          if (typeof e.method > "u" && (e.method = "GET"), typeof e.path == "string") if (e.query) e.path = CG(e.path, e.query);
          else {
            let n = new URL(e.path, "data://");
            e.path = n.pathname + n.search;
          }
          typeof e.method == "string" && (e.method = e.method.toUpperCase()), this[Sc] = QG(e), this[Rc] = r, this[Nc] = e.ignoreTrailingSlash ?? false, this[Dd] = {}, this[Rd] = {}, this[Sd] = false;
        }
        createMockScopeDispatchData({ statusCode: e, data: r, responseOptions: n }) {
          let A = fG(r), i = this[Sd] ? { "content-length": A.length } : {}, s = { ...this[Dd], ...i, ...n.headers }, o = { ...this[Rd], ...n.trailers };
          return { statusCode: e, data: r, headers: s, trailers: o };
        }
        validateReplyParameters(e) {
          if (typeof e.statusCode > "u") throw new Kt("statusCode must be defined");
          if (typeof e.responseOptions != "object" || e.responseOptions === null) throw new Kt("responseOptions must be an object");
        }
        reply(e) {
          if (typeof e == "function") {
            let i = (o) => {
              let a = e(o);
              if (typeof a != "object" || a === null) throw new Kt("reply options callback must return an object");
              let c = { data: "", responseOptions: {}, ...a };
              return this.validateReplyParameters(c), { ...this.createMockScopeDispatchData(c) };
            }, s = wd(this[Rc], this[Sc], i, { ignoreTrailingSlash: this[Nc] });
            return new WA(s);
          }
          let r = { statusCode: e, data: arguments[1] === void 0 ? "" : arguments[1], responseOptions: arguments[2] === void 0 ? {} : arguments[2] };
          this.validateReplyParameters(r);
          let n = this.createMockScopeDispatchData(r), A = wd(this[Rc], this[Sc], n, { ignoreTrailingSlash: this[Nc] });
          return new WA(A);
        }
        replyWithError(e) {
          if (typeof e > "u") throw new Kt("error must be defined");
          let r = wd(this[Rc], this[Sc], { error: e }, { ignoreTrailingSlash: this[Nc] });
          return new WA(r);
        }
        defaultReplyHeaders(e) {
          if (typeof e > "u") throw new Kt("headers must be defined");
          return this[Dd] = e, this;
        }
        defaultReplyTrailers(e) {
          if (typeof e > "u") throw new Kt("trailers must be defined");
          return this[Rd] = e, this;
        }
        replyContentLength() {
          return this[Sd] = true, this;
        }
      };
      Nd.exports.MockInterceptor = bd;
      Nd.exports.MockScope = WA;
    });
    var Ud = C((pK, eD) => {
      "use strict";
      var { promisify: IG } = __require("node:util"), BG = Qs(), { buildMockDispatch: pG } = bs(), { kDispatches: _w, kMockAgent: jw, kClose: Zw, kOriginalClose: Xw, kOrigin: $w, kOriginalDispatch: mG, kConnected: Td, kIgnoreTrailingSlash: Kw } = JA(), { MockInterceptor: yG } = Fd(), zw = ne(), { InvalidArgumentError: wG } = H(), xd = class extends BG {
        constructor(e, r) {
          if (!r || !r.agent || typeof r.agent.dispatch != "function") throw new wG("Argument opts.agent must implement Agent");
          super(e, r), this[jw] = r.agent, this[$w] = e, this[Kw] = r.ignoreTrailingSlash ?? false, this[_w] = [], this[Td] = 1, this[mG] = this.dispatch, this[Xw] = this.close.bind(this), this.dispatch = pG.call(this), this.close = this[Zw];
        }
        get [zw.kConnected]() {
          return this[Td];
        }
        intercept(e) {
          return new yG(e && { ignoreTrailingSlash: this[Kw], ...e }, this[_w]);
        }
        async [Zw]() {
          await IG(this[Xw])(), this[Td] = 0, this[jw][zw.kClients].delete(this[$w]);
        }
      };
      eD.exports = xd;
    });
    var Ld = C((mK, aD) => {
      "use strict";
      var { promisify: DG } = __require("node:util"), RG = vA(), { buildMockDispatch: SG } = bs(), { kDispatches: tD, kMockAgent: rD, kClose: nD, kOriginalClose: AD, kOrigin: iD, kOriginalDispatch: bG, kConnected: kd, kIgnoreTrailingSlash: sD } = JA(), { MockInterceptor: NG } = Fd(), oD = ne(), { InvalidArgumentError: FG } = H(), Md = class extends RG {
        constructor(e, r) {
          if (!r || !r.agent || typeof r.agent.dispatch != "function") throw new FG("Argument opts.agent must implement Agent");
          super(e, r), this[rD] = r.agent, this[iD] = e, this[sD] = r.ignoreTrailingSlash ?? false, this[tD] = [], this[kd] = 1, this[bG] = this.dispatch, this[AD] = this.close.bind(this), this.dispatch = SG.call(this), this.close = this[nD];
        }
        get [oD.kConnected]() {
          return this[kd];
        }
        intercept(e) {
          return new NG(e && { ignoreTrailingSlash: this[sD], ...e }, this[tD]);
        }
        async [nD]() {
          await DG(this[AD])(), this[kd] = 0, this[rD][oD.kClients].delete(this[iD]);
        }
      };
      aD.exports = Md;
    });
    var lD = C((wK, cD) => {
      "use strict";
      var { Transform: TG } = __require("node:stream"), { Console: xG } = __require("node:console"), UG = process.versions.icu ? "✅" : "Y ", kG = process.versions.icu ? "❌" : "N ";
      cD.exports = class {
        constructor({ disableColors: e } = {}) {
          this.transform = new TG({ transform(r, n, A) {
            A(null, r);
          } }), this.logger = new xG({ stdout: this.transform, inspectOptions: { colors: !e && !process.env.CI } });
        }
        format(e) {
          let r = e.map(({ method: n, path: A, data: { statusCode: i }, persist: s, times: o, timesInvoked: a, origin: c }) => ({ Method: n, Origin: c, Path: A, "Status code": i, Persistent: s ? UG : kG, Invocations: a, Remaining: s ? 1 / 0 : o - a }));
          return this.logger.table(r), this.transform.read().toString();
        }
      };
    });
    var dD = C((DK, ED) => {
      "use strict";
      var { kClients: Nn } = ne(), MG = PA(), { kAgent: vd, kMockAgentSet: Fc, kMockAgentGet: uD, kDispatches: Pd, kIsMockActive: Tc, kNetConnect: Fn, kGetNetConnect: LG, kOptions: xc, kFactory: Uc } = JA(), vG = Ud(), PG = Ld(), { matchValue: YG, buildMockOptions: GG } = bs(), { InvalidArgumentError: gD, UndiciError: OG } = H(), VG = zi(), HG = lD(), Yd = class extends VG {
        constructor(e) {
          if (super(e), this[Fn] = true, this[Tc] = true, e?.agent && typeof e.agent.dispatch != "function") throw new gD("Argument opts.agent must implement Agent");
          let r = e?.agent ? e.agent : new MG(e);
          this[vd] = r, this[Nn] = r[Nn], this[xc] = GG(e);
        }
        get(e) {
          let r = this[uD](e);
          return r || (r = this[Uc](e), this[Fc](e, r)), r;
        }
        dispatch(e, r) {
          return this.get(e.origin), this[vd].dispatch(e, r);
        }
        async close() {
          await this[vd].close(), this[Nn].clear();
        }
        deactivate() {
          this[Tc] = false;
        }
        activate() {
          this[Tc] = true;
        }
        enableNetConnect(e) {
          if (typeof e == "string" || typeof e == "function" || e instanceof RegExp) Array.isArray(this[Fn]) ? this[Fn].push(e) : this[Fn] = [e];
          else if (typeof e > "u") this[Fn] = true;
          else throw new gD("Unsupported matcher. Must be one of String|Function|RegExp.");
        }
        disableNetConnect() {
          this[Fn] = false;
        }
        get isMockActive() {
          return this[Tc];
        }
        [Fc](e, r) {
          this[Nn].set(e, r);
        }
        [Uc](e) {
          let r = Object.assign({ agent: this }, this[xc]);
          return this[xc] && this[xc].connections === 1 ? new vG(e, r) : new PG(e, r);
        }
        [uD](e) {
          let r = this[Nn].get(e);
          if (r) return r;
          if (typeof e != "string") {
            let n = this[Uc]("http://localhost:9999");
            return this[Fc](e, n), n;
          }
          for (let [n, A] of Array.from(this[Nn])) if (A && typeof n != "string" && YG(n, e)) {
            let i = this[Uc](e);
            return this[Fc](e, i), i[Pd] = A[Pd], i;
          }
        }
        [LG]() {
          return this[Fn];
        }
        pendingInterceptors() {
          let e = this[Nn];
          return Array.from(e.entries()).flatMap(([r, n]) => n[Pd].map((A) => ({ ...A, origin: r }))).filter(({ pending: r }) => r);
        }
        assertNoPendingInterceptors({ pendingInterceptorsFormatter: e = new HG() } = {}) {
          let r = this.pendingInterceptors();
          if (r.length !== 0) throw new OG(r.length === 1 ? `1 interceptor is pending:

${e.format(r)}`.trim() : `${r.length} interceptors are pending:

${e.format(r)}`.trim());
        }
      };
      ED.exports = Yd;
    });
    var kc = C((RK, CD) => {
      "use strict";
      var hD = Symbol.for("undici.globalDispatcher.1"), { InvalidArgumentError: qG } = H(), JG = PA();
      QD() === void 0 && fD(new JG());
      function fD(t) {
        if (!t || typeof t.dispatch != "function") throw new qG("Argument agent must implement Agent");
        Object.defineProperty(globalThis, hD, { value: t, writable: true, enumerable: false, configurable: false });
      }
      function QD() {
        return globalThis[hD];
      }
      CD.exports = { setGlobalDispatcher: fD, getGlobalDispatcher: QD };
    });
    var Ns = C((bK, ID) => {
      "use strict";
      var pr = __require("node:assert"), WG = va();
      ID.exports = class {
        #e;
        #t = false;
        #r = false;
        #n = false;
        constructor(e) {
          if (typeof e != "object" || e === null) throw new TypeError("handler must be an object");
          this.#e = WG.wrap(e);
        }
        onRequestStart(...e) {
          this.#e.onRequestStart?.(...e);
        }
        onRequestUpgrade(...e) {
          return pr(!this.#t), pr(!this.#r), this.#e.onRequestUpgrade?.(...e);
        }
        onResponseStart(...e) {
          return pr(!this.#t), pr(!this.#r), pr(!this.#n), this.#n = true, this.#e.onResponseStart?.(...e);
        }
        onResponseData(...e) {
          return pr(!this.#t), pr(!this.#r), this.#e.onResponseData?.(...e);
        }
        onResponseEnd(...e) {
          return pr(!this.#t), pr(!this.#r), this.#t = true, this.#e.onResponseEnd?.(...e);
        }
        onResponseError(...e) {
          return this.#r = true, this.#e.onResponseError?.(...e);
        }
        onBodySent() {
        }
      };
    });
    var Vd = C((NK, wD) => {
      "use strict";
      var nt = Y(), { kBodyUsed: Fs } = ne(), Od = __require("node:assert"), { InvalidArgumentError: BD } = H(), _G = __require("node:events"), jG = [300, 301, 302, 303, 307, 308], pD = Symbol("body"), mD = () => {
      }, Mc = class {
        constructor(e) {
          this[pD] = e, this[Fs] = false;
        }
        async *[Symbol.asyncIterator]() {
          Od(!this[Fs], "disturbed"), this[Fs] = true, yield* this[pD];
        }
      }, Gd = class t {
        static buildDispatch(e, r) {
          if (r != null && (!Number.isInteger(r) || r < 0)) throw new BD("maxRedirections must be a positive number");
          let n = e.dispatch.bind(e);
          return (A, i) => n(A, new t(n, r, A, i));
        }
        constructor(e, r, n, A) {
          if (r != null && (!Number.isInteger(r) || r < 0)) throw new BD("maxRedirections must be a positive number");
          this.dispatch = e, this.location = null, this.opts = { ...n, maxRedirections: 0 }, this.maxRedirections = r, this.handler = A, this.history = [], nt.isStream(this.opts.body) ? (nt.bodyLength(this.opts.body) === 0 && this.opts.body.on("data", function() {
            Od(false);
          }), typeof this.opts.body.readableDidRead != "boolean" && (this.opts.body[Fs] = false, _G.prototype.on.call(this.opts.body, "data", function() {
            this[Fs] = true;
          }))) : this.opts.body && typeof this.opts.body.pipeTo == "function" ? this.opts.body = new Mc(this.opts.body) : this.opts.body && typeof this.opts.body != "string" && !ArrayBuffer.isView(this.opts.body) && nt.isIterable(this.opts.body) && !nt.isFormDataLike(this.opts.body) && (this.opts.body = new Mc(this.opts.body));
        }
        onRequestStart(e, r) {
          this.handler.onRequestStart?.(e, { ...r, history: this.history });
        }
        onRequestUpgrade(e, r, n, A) {
          this.handler.onRequestUpgrade?.(e, r, n, A);
        }
        onResponseStart(e, r, n, A) {
          if (this.opts.throwOnMaxRedirect && this.history.length >= this.maxRedirections) throw new Error("max redirects");
          if ((r === 301 || r === 302) && this.opts.method === "POST" && (this.opts.method = "GET", nt.isStream(this.opts.body) && nt.destroy(this.opts.body.on("error", mD)), this.opts.body = null), r === 303 && this.opts.method !== "HEAD" && (this.opts.method = "GET", nt.isStream(this.opts.body) && nt.destroy(this.opts.body.on("error", mD)), this.opts.body = null), this.location = this.history.length >= this.maxRedirections || nt.isDisturbed(this.opts.body) || jG.indexOf(r) === -1 ? null : n.location, this.opts.origin && this.history.push(new URL(this.opts.path, this.opts.origin)), !this.location) {
            this.handler.onResponseStart?.(e, r, n, A);
            return;
          }
          let { origin: i, pathname: s, search: o } = nt.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin))), a = o ? `${s}${o}` : s;
          this.opts.headers = ZG(this.opts.headers, r === 303, this.opts.origin !== i), this.opts.path = a, this.opts.origin = i, this.opts.maxRedirections = 0, this.opts.query = null;
        }
        onResponseData(e, r) {
          this.location || this.handler.onResponseData?.(e, r);
        }
        onResponseEnd(e, r) {
          this.location ? this.dispatch(this.opts, this) : this.handler.onResponseEnd(e, r);
        }
        onResponseError(e, r) {
          this.handler.onResponseError?.(e, r);
        }
      };
      function yD(t, e, r) {
        if (t.length === 4) return nt.headerNameToString(t) === "host";
        if (e && nt.headerNameToString(t).startsWith("content-")) return true;
        if (r && (t.length === 13 || t.length === 6 || t.length === 19)) {
          let n = nt.headerNameToString(t);
          return n === "authorization" || n === "cookie" || n === "proxy-authorization";
        }
        return false;
      }
      function ZG(t, e, r) {
        let n = [];
        if (Array.isArray(t)) for (let A = 0; A < t.length; A += 2) yD(t[A], e, r) || n.push(t[A], t[A + 1]);
        else if (t && typeof t == "object") {
          let A = typeof t[Symbol.iterator] == "function" ? t : Object.entries(t);
          for (let [i, s] of A) yD(i, e, r) || n.push(i, s);
        } else Od(t == null, "headers must be an object or an array");
        return n;
      }
      wD.exports = Gd;
    });
    var RD = C((FK, DD) => {
      "use strict";
      var XG = Vd();
      function $G({ maxRedirections: t } = {}) {
        return (e) => function(n, A) {
          let { maxRedirections: i = t, ...s } = n;
          if (i == null || i === 0) return e(n, A);
          let o = { ...s, maxRedirections: 0 }, a = new XG(e, i, o, A);
          return e(o, a);
        };
      }
      DD.exports = $G;
    });
    var bD = C((TK, SD) => {
      "use strict";
      var KG = Ns(), { ResponseError: zG } = H(), Hd = class extends KG {
        #e;
        #t;
        #r;
        #n;
        #i;
        constructor(e, { handler: r }) {
          super(r);
        }
        #A(e) {
          return (this.#t ?? "").indexOf(e) === 0;
        }
        onRequestStart(e, r) {
          return this.#e = 0, this.#t = null, this.#r = null, this.#n = null, this.#i = "", super.onRequestStart(e, r);
        }
        onResponseStart(e, r, n, A) {
          if (this.#e = r, this.#n = n, this.#t = n["content-type"], this.#e < 400) return super.onResponseStart(e, r, n, A);
          (this.#A("application/json") || this.#A("text/plain")) && (this.#r = new TextDecoder("utf-8"));
        }
        onResponseData(e, r) {
          if (this.#e < 400) return super.onResponseData(e, r);
          this.#i += this.#r?.decode(r, { stream: true }) ?? "";
        }
        onResponseEnd(e, r) {
          if (this.#e >= 400) {
            if (this.#i += this.#r?.decode(void 0, { stream: false }) ?? "", this.#A("application/json")) try {
              this.#i = JSON.parse(this.#i);
            } catch {
            }
            let n, A = Error.stackTraceLimit;
            Error.stackTraceLimit = 0;
            try {
              n = new zG("Response Error", this.#e, { body: this.#i, headers: this.#n });
            } finally {
              Error.stackTraceLimit = A;
            }
            super.onResponseError(e, n);
          } else super.onResponseEnd(e, r);
        }
        onResponseError(e, r) {
          super.onResponseError(e, r);
        }
      };
      SD.exports = () => (t) => function(r, n) {
        return t(r, new Hd(r, { handler: n }));
      };
    });
    var FD = C((xK, ND) => {
      "use strict";
      var eO = Bc();
      ND.exports = (t) => (e) => function(n, A) {
        return e(n, new eO({ ...n, retryOptions: { ...t, ...n.retryOptions } }, { handler: A, dispatch: e }));
      };
    });
    var xD = C((UK, TD) => {
      "use strict";
      var { InvalidArgumentError: tO, RequestAbortedError: rO } = H(), nO = Ns(), qd = class extends nO {
        #e = 1024 * 1024;
        #t = false;
        #r = 0;
        #n = null;
        aborted = false;
        reason = false;
        constructor({ maxSize: e, signal: r }, n) {
          if (e != null && (!Number.isFinite(e) || e < 1)) throw new tO("maxSize must be a number greater than 0");
          super(n), this.#e = e ?? this.#e;
        }
        #i(e) {
          this.aborted = true, this.reason = e;
        }
        onRequestStart(e, r) {
          return e.abort = this.#i.bind(this), this.#n = e, super.onRequestStart(e, r);
        }
        onResponseStart(e, r, n, A) {
          let i = n["content-length"];
          if (i != null && i > this.#e) throw new rO(`Response size (${i}) larger than maxSize (${this.#e})`);
          return this.aborted === true ? true : super.onResponseStart(e, r, n, A);
        }
        onResponseError(e, r) {
          this.#t || (r = this.#n.reason ?? r, super.onResponseError(e, r));
        }
        onResponseData(e, r) {
          return this.#r = this.#r + r.length, this.#r >= this.#e && (this.#t = true, this.aborted === true ? super.onResponseError(e, this.reason) : super.onResponseEnd(e, {})), true;
        }
        onResponseEnd(e, r) {
          if (!this.#t) {
            if (this.#n.aborted === true) {
              super.onResponseError(e, this.reason);
              return;
            }
            super.onResponseEnd(e, r);
          }
        }
      };
      function AO({ maxSize: t } = { maxSize: 1024 * 1024 }) {
        return (e) => function(n, A) {
          let { dumpMaxSize: i = t } = n, s = new qd({ maxSize: i, signal: n.signal }, A);
          return e(n, s);
        };
      }
      TD.exports = AO;
    });
    var kD = C((kK, UD) => {
      "use strict";
      var { isIP: iO } = __require("node:net"), { lookup: sO } = __require("node:dns"), oO = Ns(), { InvalidArgumentError: _A, InformationalError: aO } = H(), Jd = Math.pow(2, 31) - 1, Wd = class {
        #e = 0;
        #t = 0;
        #r = /* @__PURE__ */ new Map();
        dualStack = true;
        affinity = null;
        lookup = null;
        pick = null;
        constructor(e) {
          this.#e = e.maxTTL, this.#t = e.maxItems, this.dualStack = e.dualStack, this.affinity = e.affinity, this.lookup = e.lookup ?? this.#n, this.pick = e.pick ?? this.#i;
        }
        get full() {
          return this.#r.size === this.#t;
        }
        runLookup(e, r, n) {
          let A = this.#r.get(e.hostname);
          if (A == null && this.full) {
            n(null, e);
            return;
          }
          let i = { affinity: this.affinity, dualStack: this.dualStack, lookup: this.lookup, pick: this.pick, ...r.dns, maxTTL: this.#e, maxItems: this.#t };
          if (A == null) this.lookup(e, i, (s, o) => {
            if (s || o == null || o.length === 0) {
              n(s ?? new aO("No DNS entries found"));
              return;
            }
            this.setRecords(e, o);
            let a = this.#r.get(e.hostname), c = this.pick(e, a, i.affinity), l;
            typeof c.port == "number" ? l = `:${c.port}` : e.port !== "" ? l = `:${e.port}` : l = "", n(null, new URL(`${e.protocol}//${c.family === 6 ? `[${c.address}]` : c.address}${l}`));
          });
          else {
            let s = this.pick(e, A, i.affinity);
            if (s == null) {
              this.#r.delete(e.hostname), this.runLookup(e, r, n);
              return;
            }
            let o;
            typeof s.port == "number" ? o = `:${s.port}` : e.port !== "" ? o = `:${e.port}` : o = "", n(null, new URL(`${e.protocol}//${s.family === 6 ? `[${s.address}]` : s.address}${o}`));
          }
        }
        #n(e, r, n) {
          sO(e.hostname, { all: true, family: this.dualStack === false ? this.affinity : 0, order: "ipv4first" }, (A, i) => {
            if (A) return n(A);
            let s = /* @__PURE__ */ new Map();
            for (let o of i) s.set(`${o.address}:${o.family}`, o);
            n(null, s.values());
          });
        }
        #i(e, r, n) {
          let A = null, { records: i, offset: s } = r, o;
          if (this.dualStack ? (n == null && (s == null || s === Jd ? (r.offset = 0, n = 4) : (r.offset++, n = (r.offset & 1) === 1 ? 6 : 4)), i[n] != null && i[n].ips.length > 0 ? o = i[n] : o = i[n === 4 ? 6 : 4]) : o = i[n], o == null || o.ips.length === 0) return A;
          o.offset == null || o.offset === Jd ? o.offset = 0 : o.offset++;
          let a = o.offset % o.ips.length;
          return A = o.ips[a] ?? null, A == null ? A : Date.now() - A.timestamp > A.ttl ? (o.ips.splice(a, 1), this.pick(e, r, n)) : A;
        }
        pickFamily(e, r) {
          let n = this.#r.get(e.hostname)?.records;
          if (!n) return null;
          let A = n[r];
          if (!A) return null;
          A.offset == null || A.offset === Jd ? A.offset = 0 : A.offset++;
          let i = A.offset % A.ips.length, s = A.ips[i] ?? null;
          return s == null || Date.now() - s.timestamp > s.ttl && A.ips.splice(i, 1), s;
        }
        setRecords(e, r) {
          let n = Date.now(), A = { records: { 4: null, 6: null } };
          for (let i of r) {
            i.timestamp = n, typeof i.ttl == "number" ? i.ttl = Math.min(i.ttl, this.#e) : i.ttl = this.#e;
            let s = A.records[i.family] ?? { ips: [] };
            s.ips.push(i), A.records[i.family] = s;
          }
          this.#r.set(e.hostname, A);
        }
        deleteRecords(e) {
          this.#r.delete(e.hostname);
        }
        getHandler(e, r) {
          return new _d(this, e, r);
        }
      }, _d = class extends oO {
        #e = null;
        #t = null;
        #r = null;
        #n = null;
        #i = null;
        #A = null;
        #a = true;
        constructor(e, { origin: r, handler: n, dispatch: A, newOrigin: i }, s) {
          super(n), this.#n = r, this.#A = i, this.#t = { ...s }, this.#e = e, this.#r = A;
        }
        onResponseError(e, r) {
          switch (r.code) {
            case "ETIMEDOUT":
            case "ECONNREFUSED": {
              if (this.#e.dualStack) {
                if (!this.#a) {
                  super.onResponseError(e, r);
                  return;
                }
                this.#a = false;
                let n = this.#A.hostname[0] === "[" ? 4 : 6, A = this.#e.pickFamily(this.#n, n);
                if (A == null) {
                  super.onResponseError(e, r);
                  return;
                }
                let i;
                typeof A.port == "number" ? i = `:${A.port}` : this.#n.port !== "" ? i = `:${this.#n.port}` : i = "";
                let s = { ...this.#t, origin: `${this.#n.protocol}//${A.family === 6 ? `[${A.address}]` : A.address}${i}` };
                this.#r(s, this);
                return;
              }
              super.onResponseError(e, r);
              break;
            }
            case "ENOTFOUND":
              this.#e.deleteRecords(this.#n), super.onResponseError(e, r);
              break;
            default:
              super.onResponseError(e, r);
              break;
          }
        }
      };
      UD.exports = (t) => {
        if (t?.maxTTL != null && (typeof t?.maxTTL != "number" || t?.maxTTL < 0)) throw new _A("Invalid maxTTL. Must be a positive number");
        if (t?.maxItems != null && (typeof t?.maxItems != "number" || t?.maxItems < 1)) throw new _A("Invalid maxItems. Must be a positive number and greater than zero");
        if (t?.affinity != null && t?.affinity !== 4 && t?.affinity !== 6) throw new _A("Invalid affinity. Must be either 4 or 6");
        if (t?.dualStack != null && typeof t?.dualStack != "boolean") throw new _A("Invalid dualStack. Must be a boolean");
        if (t?.lookup != null && typeof t?.lookup != "function") throw new _A("Invalid lookup. Must be a function");
        if (t?.pick != null && typeof t?.pick != "function") throw new _A("Invalid pick. Must be a function");
        let e = t?.dualStack ?? true, r;
        e ? r = t?.affinity ?? null : r = t?.affinity ?? 4;
        let n = { maxTTL: t?.maxTTL ?? 1e4, lookup: t?.lookup ?? null, pick: t?.pick ?? null, dualStack: e, affinity: r, maxItems: t?.maxItems ?? 1 / 0 }, A = new Wd(n);
        return (i) => function(o, a) {
          let c = o.origin.constructor === URL ? o.origin : new URL(o.origin);
          return iO(c.hostname) !== 0 ? i(o, a) : (A.runLookup(c, o, (l, u) => {
            if (l) return a.onResponseError(null, l);
            let g = { ...o, servername: c.hostname, origin: u.origin, headers: { host: c.host, ...o.headers } };
            i(g, A.getHandler({ origin: c, dispatch: i, handler: a, newOrigin: u }, o));
          }), true);
        };
      };
    });
    var Ts = C((MK, LD) => {
      "use strict";
      var { safeHTTPMethods: MD } = Y();
      function cO(t) {
        if (!t.origin) throw new Error("opts.origin is undefined");
        let e;
        if (t.headers == null) e = {};
        else if (typeof t.headers[Symbol.iterator] == "function") {
          e = {};
          for (let r of t.headers) {
            if (!Array.isArray(r)) throw new Error("opts.headers is not a valid header map");
            let [n, A] = r;
            if (typeof n != "string" || typeof A != "string") throw new Error("opts.headers is not a valid header map");
            e[n.toLowerCase()] = A;
          }
        } else if (typeof t.headers == "object") {
          e = {};
          for (let r of Object.keys(t.headers)) e[r.toLowerCase()] = t.headers[r];
        } else throw new Error("opts.headers is not an object");
        return { origin: t.origin.toString(), method: t.method, path: t.path, headers: e };
      }
      function lO(t) {
        if (typeof t != "object") throw new TypeError(`expected key to be object, got ${typeof t}`);
        for (let e of ["origin", "method", "path"]) if (typeof t[e] != "string") throw new TypeError(`expected key.${e} to be string, got ${typeof t[e]}`);
        if (t.headers !== void 0 && typeof t.headers != "object") throw new TypeError(`expected headers to be object, got ${typeof t}`);
      }
      function uO(t) {
        if (typeof t != "object") throw new TypeError(`expected value to be object, got ${typeof t}`);
        for (let e of ["statusCode", "cachedAt", "staleAt", "deleteAt"]) if (typeof t[e] != "number") throw new TypeError(`expected value.${e} to be number, got ${typeof t[e]}`);
        if (typeof t.statusMessage != "string") throw new TypeError(`expected value.statusMessage to be string, got ${typeof t.statusMessage}`);
        if (t.headers != null && typeof t.headers != "object") throw new TypeError(`expected value.rawHeaders to be object, got ${typeof t.headers}`);
        if (t.vary !== void 0 && typeof t.vary != "object") throw new TypeError(`expected value.vary to be object, got ${typeof t.vary}`);
        if (t.etag !== void 0 && typeof t.etag != "string") throw new TypeError(`expected value.etag to be string, got ${typeof t.etag}`);
      }
      function gO(t) {
        let e = {}, r;
        if (Array.isArray(t)) {
          r = [];
          for (let n of t) r.push(...n.split(","));
        } else r = t.split(",");
        for (let n = 0; n < r.length; n++) {
          let A = r[n].toLowerCase(), i = A.indexOf("="), s, o;
          switch (i !== -1 ? (s = A.substring(0, i).trimStart(), o = A.substring(i + 1)) : s = A.trim(), s) {
            case "min-fresh":
            case "max-stale":
            case "max-age":
            case "s-maxage":
            case "stale-while-revalidate":
            case "stale-if-error": {
              if (o === void 0 || o[0] === " ") continue;
              o.length >= 2 && o[0] === '"' && o[o.length - 1] === '"' && (o = o.substring(1, o.length - 1));
              let a = parseInt(o, 10);
              if (a !== a || s === "max-age" && s in e && e[s] >= a) continue;
              e[s] = a;
              break;
            }
            case "private":
            case "no-cache":
              if (o) {
                if (o[0] === '"') {
                  let a = [o.substring(1)], c = o[o.length - 1] === '"';
                  if (!c) for (let l = n + 1; l < r.length; l++) {
                    let u = r[l], g = u.length;
                    if (a.push(u.trim()), g !== 0 && u[g - 1] === '"') {
                      c = true;
                      break;
                    }
                  }
                  if (c) {
                    let l = a[a.length - 1];
                    l[l.length - 1] === '"' && (l = l.substring(0, l.length - 1), a[a.length - 1] = l), s in e ? e[s] = e[s].concat(a) : e[s] = a;
                  }
                } else s in e ? e[s] = e[s].concat(o) : e[s] = [o];
                break;
              }
            case "public":
            case "no-store":
            case "must-revalidate":
            case "proxy-revalidate":
            case "immutable":
            case "no-transform":
            case "must-understand":
            case "only-if-cached":
              if (o) continue;
              e[s] = true;
              break;
            default:
              continue;
          }
        }
        return e;
      }
      function EO(t, e) {
        if (typeof t == "string" && t.includes("*")) return e;
        let r = {}, n = typeof t == "string" ? t.split(",") : t;
        for (let A of n) {
          let i = A.trim().toLowerCase();
          r[i] = e[i] ?? null;
        }
        return r;
      }
      function dO(t) {
        return t.length <= 2 ? false : t[0] === '"' && t[t.length - 1] === '"' ? !(t[1] === '"' || t.startsWith('"W/')) : t.startsWith('W/"') && t[t.length - 1] === '"' ? t.length !== 4 : false;
      }
      function hO(t, e = "CacheStore") {
        if (typeof t != "object" || t === null) throw new TypeError(`expected type of ${e} to be a CacheStore, got ${t === null ? "null" : typeof t}`);
        for (let r of ["get", "createWriteStream", "delete"]) if (typeof t[r] != "function") throw new TypeError(`${e} needs to have a \`${r}()\` function`);
      }
      function fO(t, e = "CacheMethods") {
        if (!Array.isArray(t)) throw new TypeError(`expected type of ${e} needs to be an array, got ${t === null ? "null" : typeof t}`);
        if (t.length === 0) throw new TypeError(`${e} needs to have at least one method`);
        for (let r of t) if (!MD.includes(r)) throw new TypeError(`element of ${e}-array needs to be one of following values: ${MD.join(", ")}, got ${r}`);
      }
      LD.exports = { makeCacheKey: cO, assertCacheKey: lO, assertCacheValue: uO, parseCacheControlHeader: gO, parseVaryHeader: EO, isEtagUsable: dO, assertCacheMethods: fO, assertCacheStore: hO };
    });
    var YD = C((LK, PD) => {
      "use strict";
      var vD = ["mon", "tue", "wed", "thu", "fri", "sat", "sun"], QO = [4, 7, 11, 16, 25], jd = ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"], CO = [19, 22], IO = [3, 7, 10, 19], BO = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"];
      function pO(t, e) {
        switch (t = t.toLowerCase(), t[3]) {
          case ",":
            return mO(t);
          case " ":
            return yO(t);
          default:
            return wO(t, e);
        }
      }
      function mO(t) {
        if (t.length !== 29 || !t.endsWith("gmt")) return;
        for (let E of QO) if (t[E] !== " ") return;
        for (let E of CO) if (t[E] !== ":") return;
        let e = t.substring(0, 3);
        if (!vD.includes(e)) return;
        let r = t.substring(5, 7), n = Number.parseInt(r);
        if (isNaN(n) || n < 10 && r[0] !== "0") return;
        let A = t.substring(8, 11), i = jd.indexOf(A);
        if (i === -1) return;
        let s = Number.parseInt(t.substring(12, 16));
        if (isNaN(s)) return;
        let o = t.substring(17, 19), a = Number.parseInt(o);
        if (isNaN(a) || a < 10 && o[0] !== "0") return;
        let c = t.substring(20, 22), l = Number.parseInt(c);
        if (isNaN(l) || l < 10 && c[0] !== "0") return;
        let u = t.substring(23, 25), g = Number.parseInt(u);
        if (!(isNaN(g) || g < 10 && u[0] !== "0")) return new Date(Date.UTC(s, i, n, a, l, g));
      }
      function yO(t) {
        if (t.length !== 24) return;
        for (let E of IO) if (t[E] !== " ") return;
        let e = t.substring(0, 3);
        if (!vD.includes(e)) return;
        let r = t.substring(4, 7), n = jd.indexOf(r);
        if (n === -1) return;
        let A = t.substring(8, 10), i = Number.parseInt(A);
        if (isNaN(i) || i < 10 && A[0] !== " ") return;
        let s = t.substring(11, 13), o = Number.parseInt(s);
        if (isNaN(o) || o < 10 && s[0] !== "0") return;
        let a = t.substring(14, 16), c = Number.parseInt(a);
        if (isNaN(c) || c < 10 && a[0] !== "0") return;
        let l = t.substring(17, 19), u = Number.parseInt(l);
        if (isNaN(u) || u < 10 && l[0] !== "0") return;
        let g = Number.parseInt(t.substring(20, 24));
        if (!isNaN(g)) return new Date(Date.UTC(g, n, i, o, c, u));
      }
      function wO(t, e = /* @__PURE__ */ new Date()) {
        if (!t.endsWith("gmt")) return;
        let r = t.indexOf(",");
        if (r === -1 || t.length - r - 1 !== 23) return;
        let n = t.substring(0, r);
        if (!BO.includes(n) || t[r + 1] !== " " || t[r + 4] !== "-" || t[r + 8] !== "-" || t[r + 11] !== " " || t[r + 14] !== ":" || t[r + 17] !== ":" || t[r + 20] !== " ") return;
        let A = t.substring(r + 2, r + 4), i = Number.parseInt(A);
        if (isNaN(i) || i < 10 && A[0] !== "0") return;
        let s = t.substring(r + 5, r + 8), o = jd.indexOf(s);
        if (o === -1) return;
        let a = Number.parseInt(t.substring(r + 9, r + 11));
        if (isNaN(a)) return;
        let c = e.getUTCFullYear(), l = c % 100, u = Math.floor(c / 100);
        a > l && a - l >= 50 ? a += (u - 1) * 100 : a += u * 100;
        let g = t.substring(r + 12, r + 14), E = Number.parseInt(g);
        if (isNaN(E) || E < 10 && g[0] !== "0") return;
        let h = t.substring(r + 15, r + 17), f = Number.parseInt(h);
        if (isNaN(f) || f < 10 && h[0] !== "0") return;
        let B = t.substring(r + 18, r + 20), Q = Number.parseInt(B);
        if (!(isNaN(Q) || Q < 10 && B[0] !== "0")) return new Date(Date.UTC(a, o, i, E, f, Q));
      }
      PD.exports = { parseHttpDate: pO };
    });
    var VD = C((vK, OD) => {
      "use strict";
      var DO = Y(), { parseCacheControlHeader: RO, parseVaryHeader: SO, isEtagUsable: bO } = Ts(), { parseHttpDate: GD } = YD();
      function NO() {
      }
      var FO = [200, 203, 204, 206, 300, 301, 308, 404, 405, 410, 414, 501], TO = 2147483647e3, Zd = class {
        #e;
        #t;
        #r;
        #n;
        #i;
        #A;
        constructor({ store: e, type: r, cacheByDefault: n }, A, i) {
          this.#n = e, this.#t = r, this.#r = n, this.#e = A, this.#i = i;
        }
        onRequestStart(e, r) {
          this.#A?.destroy(), this.#A = void 0, this.#i.onRequestStart?.(e, r);
        }
        onRequestUpgrade(e, r, n, A) {
          this.#i.onRequestUpgrade?.(e, r, n, A);
        }
        onResponseStart(e, r, n, A) {
          let i = () => this.#i.onResponseStart?.(e, r, n, A);
          if (!DO.safeHTTPMethods.includes(this.#e.method) && r >= 200 && r <= 399) {
            try {
              this.#n.delete(this.#e)?.catch?.(NO);
            } catch {
            }
            return i();
          }
          let s = n["cache-control"], o = n["last-modified"] && FO.includes(r);
          if (!s && !n.expires && !o && !this.#r) return i();
          let a = s ? RO(s) : {};
          if (!xO(this.#t, r, n, a)) return i();
          let c = Date.now(), l = n.age ? UO(n.age) : void 0;
          if (l && l >= TO) return i();
          let u = typeof n.date == "string" ? GD(n.date) : void 0, g = kO(this.#t, c, l, n, u, a) ?? this.#r;
          if (g === void 0 || l && l > g) return i();
          let E = u ? u.getTime() : c, h = g + E;
          if (c >= h) return i();
          let f;
          if (this.#e.headers && n.vary && (f = SO(n.vary, this.#e.headers), !f)) return i();
          let B = MO(E, a, h), Q = LO(n, a), I = { statusCode: r, statusMessage: A, headers: Q, vary: f, cacheControlDirectives: a, cachedAt: l ? c - l : c, staleAt: h, deleteAt: B };
          if (typeof n.etag == "string" && bO(n.etag) && (I.etag = n.etag), this.#A = this.#n.createWriteStream(this.#e, I), !this.#A) return i();
          let p = this;
          return this.#A.on("drain", () => e.resume()).on("error", function() {
            p.#A = void 0, p.#n.delete(p.#e);
          }).on("close", function() {
            p.#A === this && (p.#A = void 0), e.resume();
          }), i();
        }
        onResponseData(e, r) {
          this.#A?.write(r) === false && e.pause(), this.#i.onResponseData?.(e, r);
        }
        onResponseEnd(e, r) {
          this.#A?.end(), this.#i.onResponseEnd?.(e, r);
        }
        onResponseError(e, r) {
          this.#A?.destroy(r), this.#A = void 0, this.#i.onResponseError?.(e, r);
        }
      };
      function xO(t, e, r, n) {
        return !(e !== 200 && e !== 307 || n["no-store"] || t === "shared" && n.private === true || r.vary?.includes("*") || r.authorization && (!n.public || typeof r.authorization != "string" || Array.isArray(n["no-cache"]) && n["no-cache"].includes("authorization") || Array.isArray(n.private) && n.private.includes("authorization")));
      }
      function UO(t) {
        let e = parseInt(Array.isArray(t) ? t[0] : t);
        return isNaN(e) ? void 0 : e * 1e3;
      }
      function kO(t, e, r, n, A, i) {
        if (t === "shared") {
          let o = i["s-maxage"];
          if (o !== void 0) return o > 0 ? o * 1e3 : void 0;
        }
        let s = i["max-age"];
        if (s !== void 0) return s > 0 ? s * 1e3 : void 0;
        if (typeof n.expires == "string") {
          let o = GD(n.expires);
          if (o) return e >= o.getTime() || A && (A >= o || r !== void 0 && r > o - A) ? void 0 : o.getTime() - e;
        }
        if (typeof n["last-modified"] == "string") {
          let o = new Date(n["last-modified"]);
          if (vO(o)) return o.getTime() >= e ? void 0 : (e - o.getTime()) * 0.1;
        }
        if (i.immutable) return 31536e3;
      }
      function MO(t, e, r) {
        let n = -1 / 0, A = -1 / 0, i = -1 / 0;
        return e["stale-while-revalidate"] && (n = r + e["stale-while-revalidate"] * 1e3), e["stale-if-error"] && (A = r + e["stale-if-error"] * 1e3), n === -1 / 0 && A === -1 / 0 && (i = t + 31536e6), Math.max(r, n, A, i);
      }
      function LO(t, e) {
        let r = ["connection", "proxy-authenticate", "proxy-authentication-info", "proxy-authorization", "proxy-connection", "te", "transfer-encoding", "upgrade", "age"];
        t.connection && (Array.isArray(t.connection) ? r.push(...t.connection.map((A) => A.trim())) : r.push(...t.connection.split(",").map((A) => A.trim()))), Array.isArray(e["no-cache"]) && r.push(...e["no-cache"]), Array.isArray(e.private) && r.push(...e.private);
        let n;
        for (let A of r) t[A] && (n ??= { ...t }, delete n[A]);
        return n ?? t;
      }
      function vO(t) {
        return t instanceof Date && Number.isFinite(t.valueOf());
      }
      OD.exports = Zd;
    });
    var $d = C((PK, qD) => {
      "use strict";
      var { Writable: PO } = __require("node:stream"), { assertCacheKey: HD, assertCacheValue: YO } = Ts(), Xd = class {
        #e = 1 / 0;
        #t = 1 / 0;
        #r = 1 / 0;
        #n = 0;
        #i = 0;
        #A = /* @__PURE__ */ new Map();
        constructor(e) {
          if (e) {
            if (typeof e != "object") throw new TypeError("MemoryCacheStore options must be an object");
            if (e.maxCount !== void 0) {
              if (typeof e.maxCount != "number" || !Number.isInteger(e.maxCount) || e.maxCount < 0) throw new TypeError("MemoryCacheStore options.maxCount must be a non-negative integer");
              this.#e = e.maxCount;
            }
            if (e.maxSize !== void 0) {
              if (typeof e.maxSize != "number" || !Number.isInteger(e.maxSize) || e.maxSize < 0) throw new TypeError("MemoryCacheStore options.maxSize must be a non-negative integer");
              this.#t = e.maxSize;
            }
            if (e.maxEntrySize !== void 0) {
              if (typeof e.maxEntrySize != "number" || !Number.isInteger(e.maxEntrySize) || e.maxEntrySize < 0) throw new TypeError("MemoryCacheStore options.maxEntrySize must be a non-negative integer");
              this.#r = e.maxEntrySize;
            }
          }
        }
        get(e) {
          HD(e);
          let r = `${e.origin}:${e.path}`, n = Date.now(), A = this.#A.get(r)?.find((i) => i.deleteAt > n && i.method === e.method && (i.vary == null || Object.keys(i.vary).every((s) => i.vary[s] === null ? e.headers[s] === void 0 : i.vary[s] === e.headers[s])));
          return A == null ? void 0 : { statusMessage: A.statusMessage, statusCode: A.statusCode, headers: A.headers, body: A.body, vary: A.vary ? A.vary : void 0, etag: A.etag, cacheControlDirectives: A.cacheControlDirectives, cachedAt: A.cachedAt, staleAt: A.staleAt, deleteAt: A.deleteAt };
        }
        createWriteStream(e, r) {
          HD(e), YO(r);
          let n = `${e.origin}:${e.path}`, A = this, i = { ...e, ...r, body: [], size: 0 };
          return new PO({ write(s, o, a) {
            typeof s == "string" && (s = Buffer.from(s, o)), i.size += s.byteLength, i.size >= A.#r ? this.destroy() : i.body.push(s), a(null);
          }, final(s) {
            let o = A.#A.get(n);
            if (o || (o = [], A.#A.set(n, o)), o.push(i), A.#n += i.size, A.#i += 1, A.#n > A.#t || A.#i > A.#e) for (let [a, c] of A.#A) {
              for (let l of c.splice(0, c.length / 2)) A.#n -= l.size, A.#i -= 1;
              c.length === 0 && A.#A.delete(a);
            }
            s(null);
          } });
        }
        delete(e) {
          if (typeof e != "object") throw new TypeError(`expected key to be object, got ${typeof e}`);
          let r = `${e.origin}:${e.path}`;
          for (let n of this.#A.get(r) ?? []) this.#n -= n.size, this.#i -= 1;
          this.#A.delete(r);
        }
      };
      qD.exports = Xd;
    });
    var WD = C((YK, JD) => {
      "use strict";
      var GO = __require("node:assert"), Kd = class {
        #e = false;
        #t;
        #r;
        #n;
        #i;
        constructor(e, r, n) {
          if (typeof e != "function") throw new TypeError("callback must be a function");
          this.#t = e, this.#r = r, this.#i = n;
        }
        onRequestStart(e, r) {
          this.#e = false, this.#n = r;
        }
        onRequestUpgrade(e, r, n, A) {
          this.#r.onRequestUpgrade?.(e, r, n, A);
        }
        onResponseStart(e, r, n, A) {
          if (GO(this.#t != null), this.#e = r === 304 || this.#i && r >= 500 && r <= 504, this.#t(this.#e, this.#n), this.#t = null, this.#e) return true;
          this.#r.onRequestStart?.(e, this.#n), this.#r.onResponseStart?.(e, r, n, A);
        }
        onResponseData(e, r) {
          if (!this.#e) return this.#r.onResponseData?.(e, r);
        }
        onResponseEnd(e, r) {
          this.#e || this.#r.onResponseEnd?.(e, r);
        }
        onResponseError(e, r) {
          if (!this.#e) if (this.#t && (this.#t(false), this.#t = null), typeof this.#r.onResponseError == "function") this.#r.onResponseError(e, r);
          else throw r;
        }
      };
      JD.exports = Kd;
    });
    var $D = C((GK, XD) => {
      "use strict";
      var _D = __require("node:assert"), { Readable: OO } = __require("node:stream"), jA = Y(), Lc = VD(), VO = $d(), HO = WD(), { assertCacheStore: qO, assertCacheMethods: JO, makeCacheKey: WO, parseCacheControlHeader: _O } = Ts(), { AbortError: jO } = H();
      function ZO(t, e) {
        if (e?.["no-cache"]) return true;
        let r = Date.now();
        if (r > t.staleAt) {
          if (e?.["max-stale"]) {
            let n = t.staleAt + e["max-stale"] * 1e3;
            return r > n;
          }
          return true;
        }
        if (e?.["min-fresh"]) {
          let n = t.staleAt - r, A = e["min-fresh"] * 1e3;
          return n <= A;
        }
        return false;
      }
      function XO(t, e, r, n, A, i) {
        if (i?.["only-if-cached"]) {
          let s = false;
          try {
            if (typeof n.onConnect == "function" && (n.onConnect(() => {
              s = true;
            }), s) || typeof n.onHeaders == "function" && (n.onHeaders(504, [], () => {
            }, "Gateway Timeout"), s)) return;
            typeof n.onComplete == "function" && n.onComplete([]);
          } catch (o) {
            typeof n.onError == "function" && n.onError(o);
          }
          return true;
        }
        return t(A, new Lc(e, r, n));
      }
      function jD(t, e, r, n, A, i) {
        let s = jA.isStream(r.body) ? r.body : OO.from(r.body ?? []);
        _D(!s.destroyed, "stream should not be destroyed"), _D(!s.readableDidRead, "stream should not be readableDidRead");
        let o = { resume() {
          s.resume();
        }, pause() {
          s.pause();
        }, get paused() {
          return s.isPaused();
        }, get aborted() {
          return s.destroyed;
        }, get reason() {
          return s.errored;
        }, abort(c) {
          s.destroy(c ?? new jO());
        } };
        if (s.on("error", function(c) {
          if (!this.readableEnded) if (typeof t.onResponseError == "function") t.onResponseError(o, c);
          else throw c;
        }).on("close", function() {
          this.errored || t.onResponseEnd?.(o, {});
        }), t.onRequestStart?.(o, A), s.destroyed) return;
        let a = { ...r.headers, age: String(n) };
        i && (a.warning = '110 - "response is stale"'), t.onResponseStart?.(o, r.statusCode, a, r.statusMessage), e.method === "HEAD" ? s.destroy() : s.on("data", function(c) {
          t.onResponseData?.(o, c);
        });
      }
      function ZD(t, e, r, n, A, i, s) {
        if (!s) return XO(t, e, r, n, A, i);
        let o = Date.now();
        if (o > s.deleteAt) return t(A, new Lc(e, r, n));
        let a = Math.round((o - s.cachedAt) / 1e3);
        if (i?.["max-age"] && a >= i["max-age"]) return t(A, n);
        if (ZO(s, i)) {
          if (jA.isStream(A.body) && jA.bodyLength(A.body) !== 0) return t(A, new Lc(e, r, n));
          let c = false, l = s.cacheControlDirectives["stale-if-error"] ?? i?.["stale-if-error"];
          l && (c = o < s.staleAt + l * 1e3);
          let u = { ...A.headers, "if-modified-since": new Date(s.cachedAt).toUTCString() };
          return s.etag && (u["if-none-match"] = s.etag), s.vary && (u = { ...u, ...s.vary }), t({ ...A, headers: u }, new HO((g, E) => {
            g ? jD(n, A, s, a, E, true) : jA.isStream(s.body) && s.body.on("error", () => {
            }).destroy();
          }, new Lc(e, r, n), c));
        }
        jA.isStream(A.body) && A.body.on("error", () => {
        }).destroy(), jD(n, A, s, a, null, false);
      }
      XD.exports = (t = {}) => {
        let { store: e = new VO(), methods: r = ["GET"], cacheByDefault: n = void 0, type: A = "shared" } = t;
        if (typeof t != "object" || t === null) throw new TypeError(`expected type of opts to be an Object, got ${t === null ? "null" : typeof t}`);
        if (qO(e, "opts.store"), JO(r, "opts.methods"), typeof n < "u" && typeof n != "number") throw new TypeError(`exepcted opts.cacheByDefault to be number or undefined, got ${typeof n}`);
        if (typeof A < "u" && A !== "shared" && A !== "private") throw new TypeError(`exepcted opts.type to be shared, private, or undefined, got ${typeof A}`);
        let i = { store: e, methods: r, cacheByDefault: n, type: A }, s = jA.safeHTTPMethods.filter((o) => r.includes(o) === false);
        return (o) => (a, c) => {
          if (!a.origin || s.includes(a.method)) return o(a, c);
          let l = a.headers?.["cache-control"] ? _O(a.headers["cache-control"]) : void 0;
          if (l?.["no-store"]) return o(a, c);
          let u = WO(a), g = e.get(u);
          return g && typeof g.then == "function" ? g.then((E) => {
            ZD(o, i, u, c, a, l, E);
          }) : ZD(o, i, u, c, a, l, g), true;
        };
      };
    });
    var e0 = C((VK, zD) => {
      "use strict";
      var { Writable: $O } = __require("node:stream"), { assertCacheKey: zd, assertCacheValue: KO } = Ts(), eh, qe = 3, KD = 2 * 1e3 * 1e3 * 1e3;
      zD.exports = class {
        #e = KD;
        #t = 1 / 0;
        #r;
        #n;
        #i;
        #A;
        #a;
        #s;
        #o;
        #c;
        constructor(e) {
          if (e) {
            if (typeof e != "object") throw new TypeError("SqliteCacheStore options must be an object");
            if (e.maxEntrySize !== void 0) {
              if (typeof e.maxEntrySize != "number" || !Number.isInteger(e.maxEntrySize) || e.maxEntrySize < 0) throw new TypeError("SqliteCacheStore options.maxEntrySize must be a non-negative integer");
              if (e.maxEntrySize > KD) throw new TypeError("SqliteCacheStore options.maxEntrySize must be less than 2gb");
              this.#e = e.maxEntrySize;
            }
            if (e.maxCount !== void 0) {
              if (typeof e.maxCount != "number" || !Number.isInteger(e.maxCount) || e.maxCount < 0) throw new TypeError("SqliteCacheStore options.maxCount must be a non-negative integer");
              this.#t = e.maxCount;
            }
          }
          eh || (eh = __require("node:sqlite").DatabaseSync), this.#r = new eh(e?.location ?? ":memory:"), this.#r.exec(`
      CREATE TABLE IF NOT EXISTS cacheInterceptorV${qe} (
        -- Data specific to us
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        url TEXT NOT NULL,
        method TEXT NOT NULL,

        -- Data returned to the interceptor
        body BUF NULL,
        deleteAt INTEGER NOT NULL,
        statusCode INTEGER NOT NULL,
        statusMessage TEXT NOT NULL,
        headers TEXT NULL,
        cacheControlDirectives TEXT NULL,
        etag TEXT NULL,
        vary TEXT NULL,
        cachedAt INTEGER NOT NULL,
        staleAt INTEGER NOT NULL
      );

      CREATE INDEX IF NOT EXISTS idx_cacheInterceptorV${qe}_url ON cacheInterceptorV${qe}(url);
      CREATE INDEX IF NOT EXISTS idx_cacheInterceptorV${qe}_method ON cacheInterceptorV${qe}(method);
      CREATE INDEX IF NOT EXISTS idx_cacheInterceptorV${qe}_deleteAt ON cacheInterceptorV${qe}(deleteAt);
    `), this.#n = this.#r.prepare(`
      SELECT
        id,
        body,
        deleteAt,
        statusCode,
        statusMessage,
        headers,
        etag,
        cacheControlDirectives,
        vary,
        cachedAt,
        staleAt
      FROM cacheInterceptorV${qe}
      WHERE
        url = ?
        AND method = ?
      ORDER BY
        deleteAt ASC
    `), this.#i = this.#r.prepare(`
      UPDATE cacheInterceptorV${qe} SET
        body = ?,
        deleteAt = ?,
        statusCode = ?,
        statusMessage = ?,
        headers = ?,
        etag = ?,
        cacheControlDirectives = ?,
        cachedAt = ?,
        staleAt = ?
      WHERE
        id = ?
    `), this.#A = this.#r.prepare(`
      INSERT INTO cacheInterceptorV${qe} (
        url,
        method,
        body,
        deleteAt,
        statusCode,
        statusMessage,
        headers,
        etag,
        cacheControlDirectives,
        vary,
        cachedAt,
        staleAt
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `), this.#s = this.#r.prepare(`DELETE FROM cacheInterceptorV${qe} WHERE url = ?`), this.#o = this.#r.prepare(`SELECT COUNT(*) AS total FROM cacheInterceptorV${qe}`), this.#a = this.#r.prepare(`DELETE FROM cacheInterceptorV${qe} WHERE deleteAt <= ?`), this.#c = this.#t === 1 / 0 ? null : this.#r.prepare(`
        DELETE FROM cacheInterceptorV${qe}
        WHERE id IN (
          SELECT
            id
          FROM cacheInterceptorV${qe}
          ORDER BY cachedAt DESC
          LIMIT ?
        )
      `);
        }
        close() {
          this.#r.close();
        }
        get(e) {
          zd(e);
          let r = this.#u(e);
          return r ? { body: r.body ? Buffer.from(r.body.buffer, r.body.byteOffset, r.body.byteLength) : void 0, statusCode: r.statusCode, statusMessage: r.statusMessage, headers: r.headers ? JSON.parse(r.headers) : void 0, etag: r.etag ? r.etag : void 0, vary: r.vary ? JSON.parse(r.vary) : void 0, cacheControlDirectives: r.cacheControlDirectives ? JSON.parse(r.cacheControlDirectives) : void 0, cachedAt: r.cachedAt, staleAt: r.staleAt, deleteAt: r.deleteAt } : void 0;
        }
        set(e, r) {
          zd(e);
          let n = this.#l(e), A = Array.isArray(r.body) ? Buffer.concat(r.body) : r.body, i = A?.byteLength;
          if (i && i > this.#e) return;
          let s = this.#u(e, true);
          s ? this.#i.run(A, r.deleteAt, r.statusCode, r.statusMessage, r.headers ? JSON.stringify(r.headers) : null, r.etag ? r.etag : null, r.cacheControlDirectives ? JSON.stringify(r.cacheControlDirectives) : null, r.cachedAt, r.staleAt, s.id) : (this.#g(), this.#A.run(n, e.method, A, r.deleteAt, r.statusCode, r.statusMessage, r.headers ? JSON.stringify(r.headers) : null, r.etag ? r.etag : null, r.cacheControlDirectives ? JSON.stringify(r.cacheControlDirectives) : null, r.vary ? JSON.stringify(r.vary) : null, r.cachedAt, r.staleAt));
        }
        createWriteStream(e, r) {
          zd(e), KO(r);
          let n = 0, A = [], i = this;
          return new $O({ decodeStrings: true, write(s, o, a) {
            n += s.byteLength, n < i.#e ? A.push(s) : this.destroy(), a();
          }, final(s) {
            i.set(e, { ...r, body: A }), s();
          } });
        }
        delete(e) {
          if (typeof e != "object") throw new TypeError(`expected key to be object, got ${typeof e}`);
          this.#s.run(this.#l(e));
        }
        #g() {
          if (this.size <= this.#t) return 0;
          {
            let e = this.#a.run(Date.now()).changes;
            if (e) return e;
          }
          {
            let e = this.#c?.run(Math.max(Math.floor(this.#t * 0.1), 1)).changes;
            if (e) return e;
          }
          return 0;
        }
        get size() {
          let { total: e } = this.#o.get();
          return e;
        }
        #l(e) {
          return `${e.origin}/${e.path}`;
        }
        #u(e, r = false) {
          let n = this.#l(e), { headers: A, method: i } = e, s = this.#n.all(n, i);
          if (s.length === 0) return;
          let o = Date.now();
          for (let a of s) {
            if (o >= a.deleteAt && !r) return;
            let c = true;
            if (a.vary) {
              let l = JSON.parse(a.vary);
              for (let u in l) if (!zO(A[u], l[u])) {
                c = false;
                break;
              }
            }
            if (c) return a;
          }
        }
      };
      function zO(t, e) {
        return t == null && e == null ? true : t == null && e != null || t != null && e == null ? false : Array.isArray(t) && Array.isArray(e) ? t.length !== e.length ? false : t.every((r, n) => r === e[n]) : t === e;
      }
    });
    var Tn = C((HK, o0) => {
      "use strict";
      var { kConstruct: eV } = ne(), { kEnumerableProperty: ZA } = Y(), { iteratorMixin: tV, isValidHeaderName: xs, isValidHeaderValue: r0 } = Ve(), { webidl: V } = Te(), th = __require("node:assert"), vc = __require("node:util");
      function t0(t) {
        return t === 10 || t === 13 || t === 9 || t === 32;
      }
      function n0(t) {
        let e = 0, r = t.length;
        for (; r > e && t0(t.charCodeAt(r - 1)); ) --r;
        for (; r > e && t0(t.charCodeAt(e)); ) ++e;
        return e === 0 && r === t.length ? t : t.substring(e, r);
      }
      function A0(t, e) {
        if (Array.isArray(e)) for (let r = 0; r < e.length; ++r) {
          let n = e[r];
          if (n.length !== 2) throw V.errors.exception({ header: "Headers constructor", message: `expected name/value pair to be length 2, found ${n.length}.` });
          rh(t, n[0], n[1]);
        }
        else if (typeof e == "object" && e !== null) {
          let r = Object.keys(e);
          for (let n = 0; n < r.length; ++n) rh(t, r[n], e[r[n]]);
        } else throw V.errors.conversionFailed({ prefix: "Headers constructor", argument: "Argument 1", types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"] });
      }
      function rh(t, e, r) {
        if (r = n0(r), xs(e)) {
          if (!r0(r)) throw V.errors.invalidArgument({ prefix: "Headers.append", value: r, type: "header value" });
        } else throw V.errors.invalidArgument({ prefix: "Headers.append", value: e, type: "header name" });
        if (s0(t) === "immutable") throw new TypeError("immutable");
        return Yc(t).append(e, r, false);
      }
      function rV(t) {
        let e = Yc(t);
        if (!e) return [];
        if (e.sortedMap) return e.sortedMap;
        let r = [], n = e.toSortedArray(), A = e.cookies;
        if (A === null || A.length === 1) return e.sortedMap = n;
        for (let i = 0; i < n.length; ++i) {
          let { 0: s, 1: o } = n[i];
          if (s === "set-cookie") for (let a = 0; a < A.length; ++a) r.push([s, A[a]]);
          else r.push([s, o]);
        }
        return e.sortedMap = r;
      }
      function i0(t, e) {
        return t[0] < e[0] ? -1 : 1;
      }
      var Pc = class t {
        cookies = null;
        sortedMap;
        headersMap;
        constructor(e) {
          e instanceof t ? (this.headersMap = new Map(e.headersMap), this.sortedMap = e.sortedMap, this.cookies = e.cookies === null ? null : [...e.cookies]) : (this.headersMap = new Map(e), this.sortedMap = null);
        }
        contains(e, r) {
          return this.headersMap.has(r ? e : e.toLowerCase());
        }
        clear() {
          this.headersMap.clear(), this.sortedMap = null, this.cookies = null;
        }
        append(e, r, n) {
          this.sortedMap = null;
          let A = n ? e : e.toLowerCase(), i = this.headersMap.get(A);
          if (i) {
            let s = A === "cookie" ? "; " : ", ";
            this.headersMap.set(A, { name: i.name, value: `${i.value}${s}${r}` });
          } else this.headersMap.set(A, { name: e, value: r });
          A === "set-cookie" && (this.cookies ??= []).push(r);
        }
        set(e, r, n) {
          this.sortedMap = null;
          let A = n ? e : e.toLowerCase();
          A === "set-cookie" && (this.cookies = [r]), this.headersMap.set(A, { name: e, value: r });
        }
        delete(e, r) {
          this.sortedMap = null, r || (e = e.toLowerCase()), e === "set-cookie" && (this.cookies = null), this.headersMap.delete(e);
        }
        get(e, r) {
          return this.headersMap.get(r ? e : e.toLowerCase())?.value ?? null;
        }
        *[Symbol.iterator]() {
          for (let { 0: e, 1: { value: r } } of this.headersMap) yield [e, r];
        }
        get entries() {
          let e = {};
          if (this.headersMap.size !== 0) for (let { name: r, value: n } of this.headersMap.values()) e[r] = n;
          return e;
        }
        rawValues() {
          return this.headersMap.values();
        }
        get entriesList() {
          let e = [];
          if (this.headersMap.size !== 0) for (let { 0: r, 1: { name: n, value: A } } of this.headersMap) if (r === "set-cookie") for (let i of this.cookies) e.push([n, i]);
          else e.push([n, A]);
          return e;
        }
        toSortedArray() {
          let e = this.headersMap.size, r = new Array(e);
          if (e <= 32) {
            if (e === 0) return r;
            let n = this.headersMap[Symbol.iterator](), A = n.next().value;
            r[0] = [A[0], A[1].value], th(A[1].value !== null);
            for (let i = 1, s = 0, o = 0, a = 0, c = 0, l, u; i < e; ++i) {
              for (u = n.next().value, l = r[i] = [u[0], u[1].value], th(l[1] !== null), a = 0, o = i; a < o; ) c = a + (o - a >> 1), r[c][0] <= l[0] ? a = c + 1 : o = c;
              if (i !== c) {
                for (s = i; s > a; ) r[s] = r[--s];
                r[a] = l;
              }
            }
            if (!n.next().done) throw new TypeError("Unreachable");
            return r;
          } else {
            let n = 0;
            for (let { 0: A, 1: { value: i } } of this.headersMap) r[n++] = [A, i], th(i !== null);
            return r.sort(i0);
          }
        }
      }, Nt = class t {
        #e;
        #t;
        constructor(e = void 0) {
          V.util.markAsUncloneable(this), e !== eV && (this.#t = new Pc(), this.#e = "none", e !== void 0 && (e = V.converters.HeadersInit(e, "Headers constructor", "init"), A0(this, e)));
        }
        append(e, r) {
          V.brandCheck(this, t), V.argumentLengthCheck(arguments, 2, "Headers.append");
          let n = "Headers.append";
          return e = V.converters.ByteString(e, n, "name"), r = V.converters.ByteString(r, n, "value"), rh(this, e, r);
        }
        delete(e) {
          if (V.brandCheck(this, t), V.argumentLengthCheck(arguments, 1, "Headers.delete"), e = V.converters.ByteString(e, "Headers.delete", "name"), !xs(e)) throw V.errors.invalidArgument({ prefix: "Headers.delete", value: e, type: "header name" });
          if (this.#e === "immutable") throw new TypeError("immutable");
          this.#t.contains(e, false) && this.#t.delete(e, false);
        }
        get(e) {
          V.brandCheck(this, t), V.argumentLengthCheck(arguments, 1, "Headers.get");
          let r = "Headers.get";
          if (e = V.converters.ByteString(e, r, "name"), !xs(e)) throw V.errors.invalidArgument({ prefix: r, value: e, type: "header name" });
          return this.#t.get(e, false);
        }
        has(e) {
          V.brandCheck(this, t), V.argumentLengthCheck(arguments, 1, "Headers.has");
          let r = "Headers.has";
          if (e = V.converters.ByteString(e, r, "name"), !xs(e)) throw V.errors.invalidArgument({ prefix: r, value: e, type: "header name" });
          return this.#t.contains(e, false);
        }
        set(e, r) {
          V.brandCheck(this, t), V.argumentLengthCheck(arguments, 2, "Headers.set");
          let n = "Headers.set";
          if (e = V.converters.ByteString(e, n, "name"), r = V.converters.ByteString(r, n, "value"), r = n0(r), xs(e)) {
            if (!r0(r)) throw V.errors.invalidArgument({ prefix: n, value: r, type: "header value" });
          } else throw V.errors.invalidArgument({ prefix: n, value: e, type: "header name" });
          if (this.#e === "immutable") throw new TypeError("immutable");
          this.#t.set(e, r, false);
        }
        getSetCookie() {
          V.brandCheck(this, t);
          let e = this.#t.cookies;
          return e ? [...e] : [];
        }
        [vc.inspect.custom](e, r) {
          return r.depth ??= e, `Headers ${vc.formatWithOptions(r, this.#t.entries)}`;
        }
        static getHeadersGuard(e) {
          return e.#e;
        }
        static setHeadersGuard(e, r) {
          e.#e = r;
        }
        static getHeadersList(e) {
          return e.#t;
        }
        static setHeadersList(e, r) {
          e.#t = r;
        }
      }, { getHeadersGuard: s0, setHeadersGuard: nV, getHeadersList: Yc, setHeadersList: AV } = Nt;
      Reflect.deleteProperty(Nt, "getHeadersGuard");
      Reflect.deleteProperty(Nt, "setHeadersGuard");
      Reflect.deleteProperty(Nt, "getHeadersList");
      Reflect.deleteProperty(Nt, "setHeadersList");
      tV("Headers", Nt, rV, 0, 1);
      Object.defineProperties(Nt.prototype, { append: ZA, delete: ZA, get: ZA, has: ZA, set: ZA, getSetCookie: ZA, [Symbol.toStringTag]: { value: "Headers", configurable: true }, [vc.inspect.custom]: { enumerable: false } });
      V.converters.HeadersInit = function(t, e, r) {
        if (V.util.Type(t) === V.util.Types.OBJECT) {
          let n = Reflect.get(t, Symbol.iterator);
          if (!vc.types.isProxy(t) && n === Nt.prototype.entries) try {
            return Yc(t).entriesList;
          } catch {
          }
          return typeof n == "function" ? V.converters["sequence<sequence<ByteString>>"](t, e, r, n.bind(t)) : V.converters["record<ByteString, ByteString>"](t, e, r);
        }
        throw V.errors.conversionFailed({ prefix: "Headers constructor", argument: "Argument 1", types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"] });
      };
      o0.exports = { fill: A0, compareHeaderName: i0, Headers: Nt, HeadersList: Pc, getHeadersGuard: s0, setHeadersGuard: nV, setHeadersList: AV, getHeadersList: Yc };
    });
    var ks = C((qK, C0) => {
      "use strict";
      var { Headers: E0, HeadersList: a0, fill: iV, getHeadersGuard: sV, setHeadersGuard: d0, setHeadersList: h0 } = Tn(), { extractBody: c0, cloneBody: oV, mixinBody: aV, hasFinalizationRegistry: cV, streamRegistry: lV, bodyUnusable: uV } = TA(), f0 = Y(), l0 = __require("node:util"), { kEnumerableProperty: At } = f0, { isValidReasonPhrase: gV, isCancelled: EV, isAborted: dV, serializeJavascriptValueToJSONString: hV, isErrorLike: fV, isomorphicEncode: QV, environmentSettingsObject: CV } = Ve(), { redirectStatusSet: IV, nullBodyStatus: BV } = rs(), { webidl: O } = Te(), { URLSerializer: u0 } = tt(), { kConstruct: Oc } = ne(), nh = __require("node:assert"), { types: pV } = __require("node:util"), mV = new TextEncoder("utf-8"), it = class t {
        #e;
        #t;
        static error() {
          return Us(Vc(), "immutable");
        }
        static json(e, r = void 0) {
          O.argumentLengthCheck(arguments, 1, "Response.json"), r !== null && (r = O.converters.ResponseInit(r));
          let n = mV.encode(hV(e)), A = c0(n), i = Us(XA({}), "response");
          return g0(i, r, { body: A[0], type: "application/json" }), i;
        }
        static redirect(e, r = 302) {
          O.argumentLengthCheck(arguments, 1, "Response.redirect"), e = O.converters.USVString(e), r = O.converters["unsigned short"](r);
          let n;
          try {
            n = new URL(e, CV.settingsObject.baseUrl);
          } catch (s) {
            throw new TypeError(`Failed to parse URL from ${e}`, { cause: s });
          }
          if (!IV.has(r)) throw new RangeError(`Invalid status code ${r}`);
          let A = Us(XA({}), "immutable");
          A.#t.status = r;
          let i = QV(u0(n));
          return A.#t.headersList.append("location", i, true), A;
        }
        constructor(e = null, r = void 0) {
          if (O.util.markAsUncloneable(this), e === Oc) return;
          e !== null && (e = O.converters.BodyInit(e)), r = O.converters.ResponseInit(r), this.#t = XA({}), this.#e = new E0(Oc), d0(this.#e, "response"), h0(this.#e, this.#t.headersList);
          let n = null;
          if (e != null) {
            let [A, i] = c0(e);
            n = { body: A, type: i };
          }
          g0(this, r, n);
        }
        get type() {
          return O.brandCheck(this, t), this.#t.type;
        }
        get url() {
          O.brandCheck(this, t);
          let e = this.#t.urlList, r = e[e.length - 1] ?? null;
          return r === null ? "" : u0(r, true);
        }
        get redirected() {
          return O.brandCheck(this, t), this.#t.urlList.length > 1;
        }
        get status() {
          return O.brandCheck(this, t), this.#t.status;
        }
        get ok() {
          return O.brandCheck(this, t), this.#t.status >= 200 && this.#t.status <= 299;
        }
        get statusText() {
          return O.brandCheck(this, t), this.#t.statusText;
        }
        get headers() {
          return O.brandCheck(this, t), this.#e;
        }
        get body() {
          return O.brandCheck(this, t), this.#t.body ? this.#t.body.stream : null;
        }
        get bodyUsed() {
          return O.brandCheck(this, t), !!this.#t.body && f0.isDisturbed(this.#t.body.stream);
        }
        clone() {
          if (O.brandCheck(this, t), uV(this.#t)) throw O.errors.exception({ header: "Response.clone", message: "Body has already been consumed." });
          let e = Ah(this.#t);
          return Us(e, sV(this.#e));
        }
        [l0.inspect.custom](e, r) {
          r.depth === null && (r.depth = 2), r.colors ??= true;
          let n = { status: this.status, statusText: this.statusText, headers: this.headers, body: this.body, bodyUsed: this.bodyUsed, ok: this.ok, redirected: this.redirected, type: this.type, url: this.url };
          return `Response ${l0.formatWithOptions(r, n)}`;
        }
        static getResponseHeaders(e) {
          return e.#e;
        }
        static setResponseHeaders(e, r) {
          e.#e = r;
        }
        static getResponseState(e) {
          return e.#t;
        }
        static setResponseState(e, r) {
          e.#t = r;
        }
      }, { getResponseHeaders: yV, setResponseHeaders: wV, getResponseState: xn, setResponseState: DV } = it;
      Reflect.deleteProperty(it, "getResponseHeaders");
      Reflect.deleteProperty(it, "setResponseHeaders");
      Reflect.deleteProperty(it, "getResponseState");
      Reflect.deleteProperty(it, "setResponseState");
      aV(it, xn);
      Object.defineProperties(it.prototype, { type: At, url: At, status: At, ok: At, redirected: At, statusText: At, headers: At, clone: At, body: At, bodyUsed: At, [Symbol.toStringTag]: { value: "Response", configurable: true } });
      Object.defineProperties(it, { json: At, redirect: At, error: At });
      function Ah(t) {
        if (t.internalResponse) return Q0(Ah(t.internalResponse), t.type);
        let e = XA({ ...t, body: null });
        return t.body != null && (e.body = oV(e, t.body)), e;
      }
      function XA(t) {
        return { aborted: false, rangeRequested: false, timingAllowPassed: false, requestIncludesCredentials: false, type: "default", status: 200, timingInfo: null, cacheState: "", statusText: "", ...t, headersList: t?.headersList ? new a0(t?.headersList) : new a0(), urlList: t?.urlList ? [...t.urlList] : [] };
      }
      function Vc(t) {
        let e = fV(t);
        return XA({ type: "error", status: 0, error: e ? t : new Error(t && String(t)), aborted: t && t.name === "AbortError" });
      }
      function RV(t) {
        return t.type === "error" && t.status === 0;
      }
      function Gc(t, e) {
        return e = { internalResponse: t, ...e }, new Proxy(t, { get(r, n) {
          return n in e ? e[n] : r[n];
        }, set(r, n, A) {
          return nh(!(n in e)), r[n] = A, true;
        } });
      }
      function Q0(t, e) {
        if (e === "basic") return Gc(t, { type: "basic", headersList: t.headersList });
        if (e === "cors") return Gc(t, { type: "cors", headersList: t.headersList });
        if (e === "opaque") return Gc(t, { type: "opaque", urlList: Object.freeze([]), status: 0, statusText: "", body: null });
        if (e === "opaqueredirect") return Gc(t, { type: "opaqueredirect", status: 0, statusText: "", headersList: [], body: null });
        nh(false);
      }
      function SV(t, e = null) {
        return nh(EV(t)), dV(t) ? Vc(Object.assign(new DOMException("The operation was aborted.", "AbortError"), { cause: e })) : Vc(Object.assign(new DOMException("Request was cancelled."), { cause: e }));
      }
      function g0(t, e, r) {
        if (e.status !== null && (e.status < 200 || e.status > 599)) throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.');
        if ("statusText" in e && e.statusText != null && !gV(String(e.statusText))) throw new TypeError("Invalid statusText");
        if ("status" in e && e.status != null && (xn(t).status = e.status), "statusText" in e && e.statusText != null && (xn(t).statusText = e.statusText), "headers" in e && e.headers != null && iV(yV(t), e.headers), r) {
          if (BV.includes(t.status)) throw O.errors.exception({ header: "Response constructor", message: `Invalid response status code ${t.status}` });
          xn(t).body = r.body, r.type != null && !xn(t).headersList.contains("content-type", true) && xn(t).headersList.append("content-type", r.type, true);
        }
      }
      function Us(t, e) {
        let r = new it(Oc);
        DV(r, t);
        let n = new E0(Oc);
        return wV(r, n), h0(n, t.headersList), d0(n, e), cV && t.body?.stream && lV.register(r, new WeakRef(t.body.stream)), r;
      }
      O.converters.XMLHttpRequestBodyInit = function(t, e, r) {
        return typeof t == "string" ? O.converters.USVString(t, e, r) : O.is.Blob(t) || ArrayBuffer.isView(t) || pV.isArrayBuffer(t) || O.is.FormData(t) || O.is.URLSearchParams(t) ? t : O.converters.DOMString(t, e, r);
      };
      O.converters.BodyInit = function(t, e, r) {
        return O.is.ReadableStream(t) || t?.[Symbol.asyncIterator] ? t : O.converters.XMLHttpRequestBodyInit(t, e, r);
      };
      O.converters.ResponseInit = O.dictionaryConverter([{ key: "status", converter: O.converters["unsigned short"], defaultValue: () => 200 }, { key: "statusText", converter: O.converters.ByteString, defaultValue: () => "" }, { key: "headers", converter: O.converters.HeadersInit }]);
      O.is.Response = O.util.MakeTypeAssertion(it);
      C0.exports = { isNetworkError: RV, makeNetworkError: Vc, makeResponse: XA, makeAppropriateNetworkError: SV, filterResponse: Q0, Response: it, cloneResponse: Ah, fromInnerResponse: Us, getResponseState: xn };
    });
    var m0 = C((JK, p0) => {
      "use strict";
      var { kConnected: I0, kSize: B0 } = ne(), ih = class {
        constructor(e) {
          this.value = e;
        }
        deref() {
          return this.value[I0] === 0 && this.value[B0] === 0 ? void 0 : this.value;
        }
      }, sh = class {
        constructor(e) {
          this.finalizer = e;
        }
        register(e, r) {
          e.on && e.on("disconnect", () => {
            e[I0] === 0 && e[B0] === 0 && this.finalizer(r);
          });
        }
        unregister(e) {
        }
      };
      p0.exports = function() {
        return process.env.NODE_V8_COVERAGE && process.version.startsWith("v18") ? (process._rawDebug("Using compatibility WeakRef and FinalizationRegistry"), { WeakRef: ih, FinalizationRegistry: sh }) : { WeakRef, FinalizationRegistry };
      };
    });
    var $A = C((WK, L0) => {
      "use strict";
      var { extractBody: bV, mixinBody: NV, cloneBody: FV, bodyUnusable: y0 } = TA(), { Headers: N0, fill: TV, HeadersList: Jc, setHeadersGuard: oh, getHeadersGuard: xV, setHeadersList: F0, getHeadersList: w0 } = Tn(), { FinalizationRegistry: UV } = m0()(), qc = Y(), D0 = __require("node:util"), { isValidHTTPToken: kV, sameOrigin: R0, environmentSettingsObject: Hc } = Ve(), { forbiddenMethodsSet: MV, corsSafeListedMethodsSet: LV, referrerPolicy: vV, requestRedirect: PV, requestMode: YV, requestCredentials: GV, requestCache: OV, requestDuplex: VV } = rs(), { kEnumerableProperty: Ie, normalizedMethodRecordsBase: HV, normalizedMethodRecords: qV } = qc, { webidl: F } = Te(), { URLSerializer: JV } = tt(), { kConstruct: Wc } = ne(), WV = __require("node:assert"), { getMaxListeners: T0, setMaxListeners: _V, defaultMaxListeners: jV } = __require("node:events"), ZV = Symbol("abortController"), x0 = new UV(({ signal: t, abort: e }) => {
        t.removeEventListener("abort", e);
      }), _c = /* @__PURE__ */ new WeakMap(), ah;
      try {
        ah = T0(new AbortController().signal) > 0;
      } catch {
        ah = false;
      }
      function S0(t) {
        return e;
        function e() {
          let r = t.deref();
          if (r !== void 0) {
            x0.unregister(e), this.removeEventListener("abort", e), r.abort(this.reason);
            let n = _c.get(r.signal);
            if (n !== void 0) {
              if (n.size !== 0) {
                for (let A of n) {
                  let i = A.deref();
                  i !== void 0 && i.abort(this.reason);
                }
                n.clear();
              }
              _c.delete(r.signal);
            }
          }
        }
      }
      var b0 = false, Xe = class t {
        #e;
        #t;
        #r;
        #n;
        constructor(e, r = void 0) {
          if (F.util.markAsUncloneable(this), e === Wc) return;
          let n = "Request constructor";
          F.argumentLengthCheck(arguments, 1, n), e = F.converters.RequestInfo(e, n, "input"), r = F.converters.RequestInit(r, n, "init");
          let A = null, i = null, s = Hc.settingsObject.baseUrl, o = null;
          if (typeof e == "string") {
            this.#t = r.dispatcher;
            let Q;
            try {
              Q = new URL(e, s);
            } catch (I) {
              throw new TypeError("Failed to parse URL from " + e, { cause: I });
            }
            if (Q.username || Q.password) throw new TypeError("Request cannot be constructed from a URL that includes credentials: " + e);
            A = jc({ urlList: [Q] }), i = "cors";
          } else WV(F.is.Request(e)), A = e.#n, o = e.#e, this.#t = r.dispatcher || e.#t;
          let a = Hc.settingsObject.origin, c = "client";
          if (A.window?.constructor?.name === "EnvironmentSettingsObject" && R0(A.window, a) && (c = A.window), r.window != null) throw new TypeError(`'window' option '${c}' must be null`);
          "window" in r && (c = "no-window"), A = jc({ method: A.method, headersList: A.headersList, unsafeRequest: A.unsafeRequest, client: Hc.settingsObject, window: c, priority: A.priority, origin: A.origin, referrer: A.referrer, referrerPolicy: A.referrerPolicy, mode: A.mode, credentials: A.credentials, cache: A.cache, redirect: A.redirect, integrity: A.integrity, keepalive: A.keepalive, reloadNavigation: A.reloadNavigation, historyNavigation: A.historyNavigation, urlList: [...A.urlList] });
          let l = Object.keys(r).length !== 0;
          if (l && (A.mode === "navigate" && (A.mode = "same-origin"), A.reloadNavigation = false, A.historyNavigation = false, A.origin = "client", A.referrer = "client", A.referrerPolicy = "", A.url = A.urlList[A.urlList.length - 1], A.urlList = [A.url]), r.referrer !== void 0) {
            let Q = r.referrer;
            if (Q === "") A.referrer = "no-referrer";
            else {
              let I;
              try {
                I = new URL(Q, s);
              } catch (p) {
                throw new TypeError(`Referrer "${Q}" is not a valid URL.`, { cause: p });
              }
              I.protocol === "about:" && I.hostname === "client" || a && !R0(I, Hc.settingsObject.baseUrl) ? A.referrer = "client" : A.referrer = I;
            }
          }
          r.referrerPolicy !== void 0 && (A.referrerPolicy = r.referrerPolicy);
          let u;
          if (r.mode !== void 0 ? u = r.mode : u = i, u === "navigate") throw F.errors.exception({ header: "Request constructor", message: "invalid request mode navigate." });
          if (u != null && (A.mode = u), r.credentials !== void 0 && (A.credentials = r.credentials), r.cache !== void 0 && (A.cache = r.cache), A.cache === "only-if-cached" && A.mode !== "same-origin") throw new TypeError("'only-if-cached' can be set only with 'same-origin' mode");
          if (r.redirect !== void 0 && (A.redirect = r.redirect), r.integrity != null && (A.integrity = String(r.integrity)), r.keepalive !== void 0 && (A.keepalive = !!r.keepalive), r.method !== void 0) {
            let Q = r.method, I = qV[Q];
            if (I !== void 0) A.method = I;
            else {
              if (!kV(Q)) throw new TypeError(`'${Q}' is not a valid HTTP method.`);
              let p = Q.toUpperCase();
              if (MV.has(p)) throw new TypeError(`'${Q}' HTTP method is unsupported.`);
              Q = HV[p] ?? Q, A.method = Q;
            }
            !b0 && A.method === "patch" && (process.emitWarning("Using `patch` is highly likely to result in a `405 Method Not Allowed`. `PATCH` is much more likely to succeed.", { code: "UNDICI-FETCH-patch" }), b0 = true);
          }
          r.signal !== void 0 && (o = r.signal), this.#n = A;
          let g = new AbortController();
          if (this.#e = g.signal, o != null) if (o.aborted) g.abort(o.reason);
          else {
            this[ZV] = g;
            let Q = new WeakRef(g), I = S0(Q);
            ah && T0(o) === jV && _V(1500, o), qc.addAbortListener(o, I), x0.register(g, { signal: o, abort: I }, I);
          }
          if (this.#r = new N0(Wc), F0(this.#r, A.headersList), oh(this.#r, "request"), u === "no-cors") {
            if (!LV.has(A.method)) throw new TypeError(`'${A.method} is unsupported in no-cors mode.`);
            oh(this.#r, "request-no-cors");
          }
          if (l) {
            let Q = w0(this.#r), I = r.headers !== void 0 ? r.headers : new Jc(Q);
            if (Q.clear(), I instanceof Jc) {
              for (let { name: p, value: w } of I.rawValues()) Q.append(p, w, false);
              Q.cookies = I.cookies;
            } else TV(this.#r, I);
          }
          let E = F.is.Request(e) ? e.#n.body : null;
          if ((r.body != null || E != null) && (A.method === "GET" || A.method === "HEAD")) throw new TypeError("Request with GET/HEAD method cannot have body.");
          let h = null;
          if (r.body != null) {
            let [Q, I] = bV(r.body, A.keepalive);
            h = Q, I && !w0(this.#r).contains("content-type", true) && this.#r.append("content-type", I, true);
          }
          let f = h ?? E;
          if (f != null && f.source == null) {
            if (h != null && r.duplex == null) throw new TypeError("RequestInit: duplex option is required when sending a body.");
            if (A.mode !== "same-origin" && A.mode !== "cors") throw new TypeError('If request is made from ReadableStream, mode should be "same-origin" or "cors"');
            A.useCORSPreflightFlag = true;
          }
          let B = f;
          if (h == null && E != null) {
            if (y0(e.#n)) throw new TypeError("Cannot construct a Request with a Request object that has already been used.");
            let Q = new TransformStream();
            E.stream.pipeThrough(Q), B = { source: E.source, length: E.length, stream: Q.readable };
          }
          this.#n.body = B;
        }
        get method() {
          return F.brandCheck(this, t), this.#n.method;
        }
        get url() {
          return F.brandCheck(this, t), JV(this.#n.url);
        }
        get headers() {
          return F.brandCheck(this, t), this.#r;
        }
        get destination() {
          return F.brandCheck(this, t), this.#n.destination;
        }
        get referrer() {
          return F.brandCheck(this, t), this.#n.referrer === "no-referrer" ? "" : this.#n.referrer === "client" ? "about:client" : this.#n.referrer.toString();
        }
        get referrerPolicy() {
          return F.brandCheck(this, t), this.#n.referrerPolicy;
        }
        get mode() {
          return F.brandCheck(this, t), this.#n.mode;
        }
        get credentials() {
          return F.brandCheck(this, t), this.#n.credentials;
        }
        get cache() {
          return F.brandCheck(this, t), this.#n.cache;
        }
        get redirect() {
          return F.brandCheck(this, t), this.#n.redirect;
        }
        get integrity() {
          return F.brandCheck(this, t), this.#n.integrity;
        }
        get keepalive() {
          return F.brandCheck(this, t), this.#n.keepalive;
        }
        get isReloadNavigation() {
          return F.brandCheck(this, t), this.#n.reloadNavigation;
        }
        get isHistoryNavigation() {
          return F.brandCheck(this, t), this.#n.historyNavigation;
        }
        get signal() {
          return F.brandCheck(this, t), this.#e;
        }
        get body() {
          return F.brandCheck(this, t), this.#n.body ? this.#n.body.stream : null;
        }
        get bodyUsed() {
          return F.brandCheck(this, t), !!this.#n.body && qc.isDisturbed(this.#n.body.stream);
        }
        get duplex() {
          return F.brandCheck(this, t), "half";
        }
        clone() {
          if (F.brandCheck(this, t), y0(this.#n)) throw new TypeError("unusable");
          let e = k0(this.#n), r = new AbortController();
          if (this.signal.aborted) r.abort(this.signal.reason);
          else {
            let n = _c.get(this.signal);
            n === void 0 && (n = /* @__PURE__ */ new Set(), _c.set(this.signal, n));
            let A = new WeakRef(r);
            n.add(A), qc.addAbortListener(r.signal, S0(A));
          }
          return M0(e, this.#t, r.signal, xV(this.#r));
        }
        [D0.inspect.custom](e, r) {
          r.depth === null && (r.depth = 2), r.colors ??= true;
          let n = { method: this.method, url: this.url, headers: this.headers, destination: this.destination, referrer: this.referrer, referrerPolicy: this.referrerPolicy, mode: this.mode, credentials: this.credentials, cache: this.cache, redirect: this.redirect, integrity: this.integrity, keepalive: this.keepalive, isReloadNavigation: this.isReloadNavigation, isHistoryNavigation: this.isHistoryNavigation, signal: this.signal };
          return `Request ${D0.formatWithOptions(r, n)}`;
        }
        static setRequestSignal(e, r) {
          return e.#e = r, e;
        }
        static getRequestDispatcher(e) {
          return e.#t;
        }
        static setRequestDispatcher(e, r) {
          e.#t = r;
        }
        static setRequestHeaders(e, r) {
          e.#r = r;
        }
        static getRequestState(e) {
          return e.#n;
        }
        static setRequestState(e, r) {
          e.#n = r;
        }
      }, { setRequestSignal: XV, getRequestDispatcher: $V, setRequestDispatcher: KV, setRequestHeaders: zV, getRequestState: U0, setRequestState: eH } = Xe;
      Reflect.deleteProperty(Xe, "setRequestSignal");
      Reflect.deleteProperty(Xe, "getRequestDispatcher");
      Reflect.deleteProperty(Xe, "setRequestDispatcher");
      Reflect.deleteProperty(Xe, "setRequestHeaders");
      Reflect.deleteProperty(Xe, "getRequestState");
      Reflect.deleteProperty(Xe, "setRequestState");
      NV(Xe, U0);
      function jc(t) {
        return { method: t.method ?? "GET", localURLsOnly: t.localURLsOnly ?? false, unsafeRequest: t.unsafeRequest ?? false, body: t.body ?? null, client: t.client ?? null, reservedClient: t.reservedClient ?? null, replacesClientId: t.replacesClientId ?? "", window: t.window ?? "client", keepalive: t.keepalive ?? false, serviceWorkers: t.serviceWorkers ?? "all", initiator: t.initiator ?? "", destination: t.destination ?? "", priority: t.priority ?? null, origin: t.origin ?? "client", policyContainer: t.policyContainer ?? "client", referrer: t.referrer ?? "client", referrerPolicy: t.referrerPolicy ?? "", mode: t.mode ?? "no-cors", useCORSPreflightFlag: t.useCORSPreflightFlag ?? false, credentials: t.credentials ?? "same-origin", useCredentials: t.useCredentials ?? false, cache: t.cache ?? "default", redirect: t.redirect ?? "follow", integrity: t.integrity ?? "", cryptoGraphicsNonceMetadata: t.cryptoGraphicsNonceMetadata ?? "", parserMetadata: t.parserMetadata ?? "", reloadNavigation: t.reloadNavigation ?? false, historyNavigation: t.historyNavigation ?? false, userActivation: t.userActivation ?? false, taintedOrigin: t.taintedOrigin ?? false, redirectCount: t.redirectCount ?? 0, responseTainting: t.responseTainting ?? "basic", preventNoCacheCacheControlHeaderModification: t.preventNoCacheCacheControlHeaderModification ?? false, done: t.done ?? false, timingAllowFailed: t.timingAllowFailed ?? false, urlList: t.urlList, url: t.urlList[0], headersList: t.headersList ? new Jc(t.headersList) : new Jc() };
      }
      function k0(t) {
        let e = jc({ ...t, body: null });
        return t.body != null && (e.body = FV(e, t.body)), e;
      }
      function M0(t, e, r, n) {
        let A = new Xe(Wc);
        eH(A, t), KV(A, e), XV(A, r);
        let i = new N0(Wc);
        return zV(A, i), F0(i, t.headersList), oh(i, n), A;
      }
      Object.defineProperties(Xe.prototype, { method: Ie, url: Ie, headers: Ie, redirect: Ie, clone: Ie, signal: Ie, duplex: Ie, destination: Ie, body: Ie, bodyUsed: Ie, isHistoryNavigation: Ie, isReloadNavigation: Ie, keepalive: Ie, integrity: Ie, cache: Ie, credentials: Ie, attribute: Ie, referrerPolicy: Ie, referrer: Ie, mode: Ie, [Symbol.toStringTag]: { value: "Request", configurable: true } });
      F.is.Request = F.util.MakeTypeAssertion(Xe);
      F.converters.RequestInfo = function(t, e, r) {
        return typeof t == "string" ? F.converters.USVString(t) : F.is.Request(t) ? t : F.converters.USVString(t);
      };
      F.converters.RequestInit = F.dictionaryConverter([{ key: "method", converter: F.converters.ByteString }, { key: "headers", converter: F.converters.HeadersInit }, { key: "body", converter: F.nullableConverter(F.converters.BodyInit) }, { key: "referrer", converter: F.converters.USVString }, { key: "referrerPolicy", converter: F.converters.DOMString, allowedValues: vV }, { key: "mode", converter: F.converters.DOMString, allowedValues: YV }, { key: "credentials", converter: F.converters.DOMString, allowedValues: GV }, { key: "cache", converter: F.converters.DOMString, allowedValues: OV }, { key: "redirect", converter: F.converters.DOMString, allowedValues: PV }, { key: "integrity", converter: F.converters.DOMString }, { key: "keepalive", converter: F.converters.boolean }, { key: "signal", converter: F.nullableConverter((t) => F.converters.AbortSignal(t, "RequestInit", "signal")) }, { key: "window", converter: F.converters.any }, { key: "duplex", converter: F.converters.DOMString, allowedValues: VV }, { key: "dispatcher", converter: F.converters.any }]);
      L0.exports = { Request: Xe, makeRequest: jc, fromInnerRequest: M0, cloneRequest: k0, getRequestDispatcher: $V, getRequestState: U0 };
    });
    var Ls = C((_K, X0) => {
      "use strict";
      var { makeNetworkError: K, makeAppropriateNetworkError: Zc, filterResponse: ch, makeResponse: Xc, fromInnerResponse: tH, getResponseState: rH } = ks(), { HeadersList: v0 } = Tn(), { Request: nH, cloneRequest: AH, getRequestDispatcher: iH, getRequestState: sH } = $A(), Kr = __require("node:zlib"), { bytesMatch: oH, makePolicyContainer: aH, clonePolicyContainer: cH, requestBadPort: lH, TAOCheck: uH, appendRequestOriginHeader: gH, responseLocationURL: EH, requestCurrentURL: zt, setRequestReferrerPolicyOnRedirect: dH, tryUpgradeRequestToAPotentiallyTrustworthyURL: hH, createOpaqueTimingInfo: dh, appendFetchMetadata: fH, corsCheck: QH, crossOriginResourcePolicyCheck: CH, determineRequestsReferrer: IH, coarsenedSharedCurrentTime: Ms, createDeferredPromise: BH, sameOrigin: Eh, isCancelled: Un, isAborted: P0, isErrorLike: pH, fullyReadBody: mH, readableStreamClose: yH, isomorphicEncode: $c, urlIsLocal: wH, urlIsHttpHttpsScheme: hh, urlHasHttpsScheme: DH, clampAndCoarsenConnectionTimingInfo: RH, simpleRangeHeaderValue: SH, buildContentRange: bH, createInflate: NH, extractMimeType: FH } = Ve(), kn = __require("node:assert"), { safelyExtractBody: fh, extractBody: Y0 } = TA(), { redirectStatusSet: V0, nullBodyStatus: H0, safeMethodsSet: TH, requestBodyHeader: xH, subresourceSet: UH } = rs(), kH = __require("node:events"), { Readable: MH, pipeline: LH, finished: vH, isErrored: PH, isReadable: Kc } = __require("node:stream"), { addAbortListener: YH, bufferToLowerCasedHeaderName: G0 } = Y(), { dataURLProcessor: GH, serializeAMimeType: OH, minimizeSupportedMimeType: VH } = tt(), { getGlobalDispatcher: HH } = kc(), { webidl: Qh } = Te(), { STATUS_CODES: qH } = __require("node:http"), JH = ["GET", "HEAD"], WH = typeof __UNDICI_IS_NODE__ < "u" || typeof esbuildDetection < "u" ? "node" : "undici", lh, zc = class extends kH {
        constructor(e) {
          super(), this.dispatcher = e, this.connection = null, this.dump = false, this.state = "ongoing";
        }
        terminate(e) {
          this.state === "ongoing" && (this.state = "terminated", this.connection?.destroy(e), this.emit("terminated", e));
        }
        abort(e) {
          this.state === "ongoing" && (this.state = "aborted", e || (e = new DOMException("The operation was aborted.", "AbortError")), this.serializedAbortReason = e, this.connection?.destroy(e), this.emit("terminated", e));
        }
      };
      function _H(t) {
        q0(t, "fetch");
      }
      function jH(t, e = void 0) {
        Qh.argumentLengthCheck(arguments, 1, "globalThis.fetch");
        let r = BH(), n;
        try {
          n = new nH(t, e);
        } catch (l) {
          return r.reject(l), r.promise;
        }
        let A = sH(n);
        if (n.signal.aborted) return uh(r, A, null, n.signal.reason), r.promise;
        A.client.globalObject?.constructor?.name === "ServiceWorkerGlobalScope" && (A.serviceWorkers = "none");
        let s = null, o = false, a = null;
        return YH(n.signal, () => {
          o = true, kn(a != null), a.abort(n.signal.reason);
          let l = s?.deref();
          uh(r, A, l, n.signal.reason);
        }), a = W0({ request: A, processResponseEndOfBody: _H, processResponse: (l) => {
          if (!o) {
            if (l.aborted) {
              uh(r, A, s, a.serializedAbortReason);
              return;
            }
            if (l.type === "error") {
              r.reject(new TypeError("fetch failed", { cause: l.error }));
              return;
            }
            s = new WeakRef(tH(l, "immutable")), r.resolve(s.deref()), r = null;
          }
        }, dispatcher: iH(n) }), r.promise;
      }
      function q0(t, e = "other") {
        if (t.type === "error" && t.aborted || !t.urlList?.length) return;
        let r = t.urlList[0], n = t.timingInfo, A = t.cacheState;
        hh(r) && n !== null && (t.timingAllowPassed || (n = dh({ startTime: n.startTime }), A = ""), n.endTime = Ms(), t.timingInfo = n, J0(n, r.href, e, globalThis, A));
      }
      var J0 = performance.markResourceTiming;
      function uh(t, e, r, n) {
        if (t && t.reject(n), e.body?.stream != null && Kc(e.body.stream) && e.body.stream.cancel(n).catch((i) => {
          if (i.code !== "ERR_INVALID_STATE") throw i;
        }), r == null) return;
        let A = rH(r);
        A.body?.stream != null && Kc(A.body.stream) && A.body.stream.cancel(n).catch((i) => {
          if (i.code !== "ERR_INVALID_STATE") throw i;
        });
      }
      function W0({ request: t, processRequestBodyChunkLength: e, processRequestEndOfBody: r, processResponse: n, processResponseEndOfBody: A, processResponseConsumeBody: i, useParallelQueue: s = false, dispatcher: o = HH() }) {
        kn(o);
        let a = null, c = false;
        t.client != null && (a = t.client.globalObject, c = t.client.crossOriginIsolatedCapability);
        let l = Ms(c), u = dh({ startTime: l }), g = { controller: new zc(o), request: t, timingInfo: u, processRequestBodyChunkLength: e, processRequestEndOfBody: r, processResponse: n, processResponseConsumeBody: i, processResponseEndOfBody: A, taskDestination: a, crossOriginIsolatedCapability: c };
        return kn(!t.body || t.body.stream), t.window === "client" && (t.window = t.client?.globalObject?.constructor?.name === "Window" ? t.client : "no-window"), t.origin === "client" && (t.origin = t.client.origin), t.policyContainer === "client" && (t.client != null ? t.policyContainer = cH(t.client.policyContainer) : t.policyContainer = aH()), t.headersList.contains("accept", true) || t.headersList.append("accept", "*/*", true), t.headersList.contains("accept-language", true) || t.headersList.append("accept-language", "*", true), t.priority, UH.has(t.destination), _0(g).catch((E) => {
          g.controller.terminate(E);
        }), g.controller;
      }
      async function _0(t, e = false) {
        let r = t.request, n = null;
        if (r.localURLsOnly && !wH(zt(r)) && (n = K("local URLs only")), hH(r), lH(r) === "blocked" && (n = K("bad port")), r.referrerPolicy === "" && (r.referrerPolicy = r.policyContainer.referrerPolicy), r.referrer !== "no-referrer" && (r.referrer = IH(r)), n === null) {
          let i = zt(r);
          Eh(i, r.url) && r.responseTainting === "basic" || i.protocol === "data:" || r.mode === "navigate" || r.mode === "websocket" ? (r.responseTainting = "basic", n = await O0(t)) : r.mode === "same-origin" ? n = K('request mode cannot be "same-origin"') : r.mode === "no-cors" ? r.redirect !== "follow" ? n = K('redirect mode cannot be "follow" for "no-cors" request') : (r.responseTainting = "opaque", n = await O0(t)) : hh(zt(r)) ? (r.responseTainting = "cors", n = await j0(t)) : n = K("URL scheme must be a HTTP(S) scheme");
        }
        if (e) return n;
        n.status !== 0 && !n.internalResponse && (r.responseTainting, r.responseTainting === "basic" ? n = ch(n, "basic") : r.responseTainting === "cors" ? n = ch(n, "cors") : r.responseTainting === "opaque" ? n = ch(n, "opaque") : kn(false));
        let A = n.status === 0 ? n : n.internalResponse;
        if (A.urlList.length === 0 && A.urlList.push(...r.urlList), r.timingAllowFailed || (n.timingAllowPassed = true), n.type === "opaque" && A.status === 206 && A.rangeRequested && !r.headers.contains("range", true) && (n = A = K()), n.status !== 0 && (r.method === "HEAD" || r.method === "CONNECT" || H0.includes(A.status)) && (A.body = null, t.controller.dump = true), r.integrity) {
          let i = (o) => gh(t, K(o));
          if (r.responseTainting === "opaque" || n.body == null) {
            i(n.error);
            return;
          }
          let s = (o) => {
            if (!oH(o, r.integrity)) {
              i("integrity mismatch");
              return;
            }
            n.body = fh(o)[0], gh(t, n);
          };
          await mH(n.body, s, i);
        } else gh(t, n);
      }
      function O0(t) {
        if (Un(t) && t.request.redirectCount === 0) return Promise.resolve(Zc(t));
        let { request: e } = t, { protocol: r } = zt(e);
        switch (r) {
          case "about:":
            return Promise.resolve(K("about scheme is not supported"));
          case "blob:": {
            lh || (lh = __require("node:buffer").resolveObjectURL);
            let n = zt(e);
            if (n.search.length !== 0) return Promise.resolve(K("NetworkError when attempting to fetch resource."));
            let A = lh(n.toString());
            if (e.method !== "GET" || !Qh.is.Blob(A)) return Promise.resolve(K("invalid method"));
            let i = Xc(), s = A.size, o = $c(`${s}`), a = A.type;
            if (e.headersList.contains("range", true)) {
              i.rangeRequested = true;
              let c = e.headersList.get("range", true), l = SH(c, true);
              if (l === "failure") return Promise.resolve(K("failed to fetch the data URL"));
              let { rangeStartValue: u, rangeEndValue: g } = l;
              if (u === null) u = s - g, g = u + g - 1;
              else {
                if (u >= s) return Promise.resolve(K("Range start is greater than the blob's size."));
                (g === null || g >= s) && (g = s - 1);
              }
              let E = A.slice(u, g, a), h = Y0(E);
              i.body = h[0];
              let f = $c(`${E.size}`), B = bH(u, g, s);
              i.status = 206, i.statusText = "Partial Content", i.headersList.set("content-length", f, true), i.headersList.set("content-type", a, true), i.headersList.set("content-range", B, true);
            } else {
              let c = Y0(A);
              i.statusText = "OK", i.body = c[0], i.headersList.set("content-length", o, true), i.headersList.set("content-type", a, true);
            }
            return Promise.resolve(i);
          }
          case "data:": {
            let n = zt(e), A = GH(n);
            if (A === "failure") return Promise.resolve(K("failed to fetch the data URL"));
            let i = OH(A.mimeType);
            return Promise.resolve(Xc({ statusText: "OK", headersList: [["content-type", { name: "Content-Type", value: i }]], body: fh(A.body)[0] }));
          }
          case "file:":
            return Promise.resolve(K("not implemented... yet..."));
          case "http:":
          case "https:":
            return j0(t).catch((n) => K(n));
          default:
            return Promise.resolve(K("unknown scheme"));
        }
      }
      function ZH(t, e) {
        t.request.done = true, t.processResponseDone != null && queueMicrotask(() => t.processResponseDone(e));
      }
      function gh(t, e) {
        let r = t.timingInfo, n = () => {
          let i = Date.now();
          t.request.destination === "document" && (t.controller.fullTimingInfo = r), t.controller.reportTimingSteps = () => {
            if (t.request.url.protocol !== "https:") return;
            r.endTime = i;
            let o = e.cacheState, a = e.bodyInfo;
            e.timingAllowPassed || (r = dh(r), o = "");
            let c = 0;
            if (t.request.mode !== "navigator" || !e.hasCrossOriginRedirects) {
              c = e.status;
              let l = FH(e.headersList);
              l !== "failure" && (a.contentType = VH(l));
            }
            t.request.initiatorType != null && J0(r, t.request.url.href, t.request.initiatorType, globalThis, o, a, c);
          };
          let s = () => {
            t.request.done = true, t.processResponseEndOfBody != null && queueMicrotask(() => t.processResponseEndOfBody(e)), t.request.initiatorType != null && t.controller.reportTimingSteps();
          };
          queueMicrotask(() => s());
        };
        t.processResponse != null && queueMicrotask(() => {
          t.processResponse(e), t.processResponse = null;
        });
        let A = e.type === "error" ? e : e.internalResponse ?? e;
        A.body == null ? n() : vH(A.body.stream, () => {
          n();
        });
      }
      async function j0(t) {
        let e = t.request, r = null, n = null, A = t.timingInfo;
        if (e.serviceWorkers, r === null) {
          if (e.redirect === "follow" && (e.serviceWorkers = "none"), n = r = await Z0(t), e.responseTainting === "cors" && QH(e, r) === "failure") return K("cors failure");
          uH(e, r) === "failure" && (e.timingAllowFailed = true);
        }
        return (e.responseTainting === "opaque" || r.type === "opaque") && CH(e.origin, e.client, e.destination, n) === "blocked" ? K("blocked") : (V0.has(n.status) && (e.redirect !== "manual" && t.controller.connection.destroy(void 0, false), e.redirect === "error" ? r = K("unexpected redirect") : e.redirect === "manual" ? r = n : e.redirect === "follow" ? r = await XH(t, r) : kn(false)), r.timingInfo = A, r);
      }
      function XH(t, e) {
        let r = t.request, n = e.internalResponse ? e.internalResponse : e, A;
        try {
          if (A = EH(n, zt(r).hash), A == null) return e;
        } catch (s) {
          return Promise.resolve(K(s));
        }
        if (!hh(A)) return Promise.resolve(K("URL scheme must be a HTTP(S) scheme"));
        if (r.redirectCount === 20) return Promise.resolve(K("redirect count exceeded"));
        if (r.redirectCount += 1, r.mode === "cors" && (A.username || A.password) && !Eh(r, A)) return Promise.resolve(K('cross origin not allowed for request mode "cors"'));
        if (r.responseTainting === "cors" && (A.username || A.password)) return Promise.resolve(K('URL cannot contain credentials for request mode "cors"'));
        if (n.status !== 303 && r.body != null && r.body.source == null) return Promise.resolve(K());
        if ([301, 302].includes(n.status) && r.method === "POST" || n.status === 303 && !JH.includes(r.method)) {
          r.method = "GET", r.body = null;
          for (let s of xH) r.headersList.delete(s);
        }
        Eh(zt(r), A) || (r.headersList.delete("authorization", true), r.headersList.delete("proxy-authorization", true), r.headersList.delete("cookie", true), r.headersList.delete("host", true)), r.body != null && (kn(r.body.source != null), r.body = fh(r.body.source)[0]);
        let i = t.timingInfo;
        return i.redirectEndTime = i.postRedirectStartTime = Ms(t.crossOriginIsolatedCapability), i.redirectStartTime === 0 && (i.redirectStartTime = i.startTime), r.urlList.push(A), dH(r, n), _0(t, true);
      }
      async function Z0(t, e = false, r = false) {
        let n = t.request, A = null, i = null, s = null, o = null, a = false;
        n.window === "no-window" && n.redirect === "error" ? (A = t, i = n) : (i = AH(n), A = { ...t }, A.request = i);
        let c = n.credentials === "include" || n.credentials === "same-origin" && n.responseTainting === "basic", l = i.body ? i.body.length : null, u = null;
        if (i.body == null && ["POST", "PUT"].includes(i.method) && (u = "0"), l != null && (u = $c(`${l}`)), u != null && i.headersList.append("content-length", u, true), l != null && i.keepalive, Qh.is.URL(i.referrer) && i.headersList.append("referer", $c(i.referrer.href), true), gH(i), fH(i), i.headersList.contains("user-agent", true) || i.headersList.append("user-agent", WH, true), i.cache === "default" && (i.headersList.contains("if-modified-since", true) || i.headersList.contains("if-none-match", true) || i.headersList.contains("if-unmodified-since", true) || i.headersList.contains("if-match", true) || i.headersList.contains("if-range", true)) && (i.cache = "no-store"), i.cache === "no-cache" && !i.preventNoCacheCacheControlHeaderModification && !i.headersList.contains("cache-control", true) && i.headersList.append("cache-control", "max-age=0", true), (i.cache === "no-store" || i.cache === "reload") && (i.headersList.contains("pragma", true) || i.headersList.append("pragma", "no-cache", true), i.headersList.contains("cache-control", true) || i.headersList.append("cache-control", "no-cache", true)), i.headersList.contains("range", true) && i.headersList.append("accept-encoding", "identity", true), i.headersList.contains("accept-encoding", true) || (DH(zt(i)) ? i.headersList.append("accept-encoding", "br, gzip, deflate", true) : i.headersList.append("accept-encoding", "gzip, deflate", true)), i.headersList.delete("host", true), o == null && (i.cache = "no-store"), i.cache !== "no-store" && i.cache, s == null) {
          if (i.cache === "only-if-cached") return K("only if cached");
          let g = await $H(A, c, r);
          !TH.has(i.method) && g.status >= 200 && g.status <= 399, a && g.status, s == null && (s = g);
        }
        if (s.urlList = [...i.urlList], i.headersList.contains("range", true) && (s.rangeRequested = true), s.requestIncludesCredentials = c, s.status === 407) return n.window === "no-window" ? K() : Un(t) ? Zc(t) : K("proxy authentication required");
        if (s.status === 421 && !r && (n.body == null || n.body.source != null)) {
          if (Un(t)) return Zc(t);
          t.controller.connection.destroy(), s = await Z0(t, e, true);
        }
        return s;
      }
      async function $H(t, e = false, r = false) {
        kn(!t.controller.connection || t.controller.connection.destroyed), t.controller.connection = { abort: null, destroyed: false, destroy(h, f = true) {
          this.destroyed || (this.destroyed = true, f && this.abort?.(h ?? new DOMException("The operation was aborted.", "AbortError")));
        } };
        let n = t.request, A = null, i = t.timingInfo;
        n.cache = "no-store";
        let o = r ? "yes" : "no";
        n.mode;
        let a = null;
        if (n.body == null && t.processRequestEndOfBody) queueMicrotask(() => t.processRequestEndOfBody());
        else if (n.body != null) {
          let h = async function* (Q) {
            Un(t) || (yield Q, t.processRequestBodyChunkLength?.(Q.byteLength));
          }, f = () => {
            Un(t) || t.processRequestEndOfBody && t.processRequestEndOfBody();
          }, B = (Q) => {
            Un(t) || (Q.name === "AbortError" ? t.controller.abort() : t.controller.terminate(Q));
          };
          a = async function* () {
            try {
              for await (let Q of n.body.stream) yield* h(Q);
              f();
            } catch (Q) {
              B(Q);
            }
          }();
        }
        try {
          let { body: h, status: f, statusText: B, headersList: Q, socket: I } = await E({ body: a });
          if (I) A = Xc({ status: f, statusText: B, headersList: Q, socket: I });
          else {
            let p = h[Symbol.asyncIterator]();
            t.controller.next = () => p.next(), A = Xc({ status: f, statusText: B, headersList: Q });
          }
        } catch (h) {
          return h.name === "AbortError" ? (t.controller.connection.destroy(), Zc(t, h)) : K(h);
        }
        let c = () => t.controller.resume(), l = (h) => {
          Un(t) || t.controller.abort(h);
        }, u = new ReadableStream({ async start(h) {
          t.controller.controller = h;
        }, async pull(h) {
          await c(h);
        }, async cancel(h) {
          await l(h);
        }, type: "bytes" });
        A.body = { stream: u, source: null, length: null }, t.controller.resume || t.controller.on("terminated", g), t.controller.resume = async () => {
          for (; ; ) {
            let h, f;
            try {
              let { done: Q, value: I } = await t.controller.next();
              if (P0(t)) break;
              h = Q ? void 0 : I;
            } catch (Q) {
              t.controller.ended && !i.encodedBodySize ? h = void 0 : (h = Q, f = true);
            }
            if (h === void 0) {
              yH(t.controller.controller), ZH(t, A);
              return;
            }
            if (i.decodedBodySize += h?.byteLength ?? 0, f) {
              t.controller.terminate(h);
              return;
            }
            let B = new Uint8Array(h);
            if (B.byteLength && t.controller.controller.enqueue(B), PH(u)) {
              t.controller.terminate();
              return;
            }
            if (t.controller.controller.desiredSize <= 0) return;
          }
        };
        function g(h) {
          P0(t) ? (A.aborted = true, Kc(u) && t.controller.controller.error(t.controller.serializedAbortReason)) : Kc(u) && t.controller.controller.error(new TypeError("terminated", { cause: pH(h) ? h : void 0 })), t.controller.connection.destroy();
        }
        return A;
        function E({ body: h }) {
          let f = zt(n), B = t.controller.dispatcher;
          return new Promise((Q, I) => B.dispatch({ path: f.pathname + f.search, origin: f.origin, method: n.method, body: B.isMockActive ? n.body && (n.body.source || n.body.stream) : h, headers: n.headersList.entries, maxRedirections: 0, upgrade: n.mode === "websocket" ? "websocket" : void 0 }, { body: null, abort: null, onConnect(p) {
            let { connection: w } = t.controller;
            i.finalConnectionTimingInfo = RH(void 0, i.postRedirectStartTime, t.crossOriginIsolatedCapability), w.destroyed ? p(new DOMException("The operation was aborted.", "AbortError")) : (t.controller.on("terminated", p), this.abort = w.abort = p), i.finalNetworkRequestStartTime = Ms(t.crossOriginIsolatedCapability);
          }, onResponseStarted() {
            i.finalNetworkResponseStartTime = Ms(t.crossOriginIsolatedCapability);
          }, onHeaders(p, w, D, v) {
            if (p < 200) return;
            let $ = [], W = "", ae = new v0();
            for (let Se = 0; Se < w.length; Se += 2) ae.append(G0(w[Se]), w[Se + 1].toString("latin1"), true);
            let xe = ae.get("content-encoding", true);
            xe && ($ = xe.toLowerCase().split(",").map((Se) => Se.trim())), W = ae.get("location", true), this.body = new MH({ read: D });
            let te = [], Rr = W && n.redirect === "follow" && V0.has(p);
            if ($.length !== 0 && n.method !== "HEAD" && n.method !== "CONNECT" && !H0.includes(p) && !Rr) for (let Se = $.length - 1; Se >= 0; --Se) {
              let he = $[Se];
              if (he === "x-gzip" || he === "gzip") te.push(Kr.createGunzip({ flush: Kr.constants.Z_SYNC_FLUSH, finishFlush: Kr.constants.Z_SYNC_FLUSH }));
              else if (he === "deflate") te.push(NH({ flush: Kr.constants.Z_SYNC_FLUSH, finishFlush: Kr.constants.Z_SYNC_FLUSH }));
              else if (he === "br") te.push(Kr.createBrotliDecompress({ flush: Kr.constants.BROTLI_OPERATION_FLUSH, finishFlush: Kr.constants.BROTLI_OPERATION_FLUSH }));
              else {
                te.length = 0;
                break;
              }
            }
            let rn = this.onError.bind(this);
            return Q({ status: p, statusText: v, headersList: ae, body: te.length ? LH(this.body, ...te, (Se) => {
              Se && this.onError(Se);
            }).on("error", rn) : this.body.on("error", rn) }), true;
          }, onData(p) {
            if (t.controller.dump) return;
            let w = p;
            return i.encodedBodySize += w.byteLength, this.body.push(w);
          }, onComplete() {
            this.abort && t.controller.off("terminated", this.abort), t.controller.ended = true, this.body.push(null);
          }, onError(p) {
            this.abort && t.controller.off("terminated", this.abort), this.body?.destroy(p), t.controller.terminate(p), I(p);
          }, onUpgrade(p, w, D) {
            if (p !== 101) return;
            let v = new v0();
            for (let $ = 0; $ < w.length; $ += 2) v.append(G0(w[$]), w[$ + 1].toString("latin1"), true);
            return Q({ status: p, statusText: qH[p], headersList: v, socket: D }), true;
          } }));
        }
      }
      X0.exports = { fetch: jH, Fetch: zc, fetching: W0, finalizeAndReportTiming: q0 };
    });
    var z0 = C((jK, K0) => {
      "use strict";
      var KH = __require("node:assert"), { URLSerializer: $0 } = tt(), { isValidHeaderName: zH } = Ve();
      function eq(t, e, r = false) {
        let n = $0(t, r), A = $0(e, r);
        return n === A;
      }
      function tq(t) {
        KH(t !== null);
        let e = [];
        for (let r of t.split(",")) r = r.trim(), zH(r) && e.push(r);
        return e;
      }
      K0.exports = { urlEquals: eq, getFieldValues: tq };
    });
    var rR = C((ZK, tR) => {
      "use strict";
      var { kConstruct: rq } = ne(), { urlEquals: nq, getFieldValues: Ch } = z0(), { kEnumerableProperty: Mn, isDisturbed: Aq } = Y(), { webidl: R } = Te(), { cloneResponse: iq, fromInnerResponse: sq, getResponseState: oq } = ks(), { Request: vs, fromInnerRequest: aq, getRequestState: er } = $A(), { fetching: cq } = Ls(), { urlIsHttpHttpsScheme: el, createDeferredPromise: KA, readAllBytes: lq } = Ve(), Ih = __require("node:assert"), tl = class t {
        #e;
        constructor() {
          arguments[0] !== rq && R.illegalConstructor(), R.util.markAsUncloneable(this), this.#e = arguments[1];
        }
        async match(e, r = {}) {
          R.brandCheck(this, t);
          let n = "Cache.match";
          R.argumentLengthCheck(arguments, 1, n), e = R.converters.RequestInfo(e, n, "request"), r = R.converters.CacheQueryOptions(r, n, "options");
          let A = this.#i(e, r, 1);
          if (A.length !== 0) return A[0];
        }
        async matchAll(e = void 0, r = {}) {
          R.brandCheck(this, t);
          let n = "Cache.matchAll";
          return e !== void 0 && (e = R.converters.RequestInfo(e, n, "request")), r = R.converters.CacheQueryOptions(r, n, "options"), this.#i(e, r);
        }
        async add(e) {
          R.brandCheck(this, t);
          let r = "Cache.add";
          R.argumentLengthCheck(arguments, 1, r), e = R.converters.RequestInfo(e, r, "request");
          let n = [e];
          return await this.addAll(n);
        }
        async addAll(e) {
          R.brandCheck(this, t);
          let r = "Cache.addAll";
          R.argumentLengthCheck(arguments, 1, r);
          let n = [], A = [];
          for (let g of e) {
            if (g === void 0) throw R.errors.conversionFailed({ prefix: r, argument: "Argument 1", types: ["undefined is not allowed"] });
            if (g = R.converters.RequestInfo(g), typeof g == "string") continue;
            let E = er(g);
            if (!el(E.url) || E.method !== "GET") throw R.errors.exception({ header: r, message: "Expected http/s scheme when method is not GET." });
          }
          let i = [];
          for (let g of e) {
            let E = er(new vs(g));
            if (!el(E.url)) throw R.errors.exception({ header: r, message: "Expected http/s scheme." });
            E.initiator = "fetch", E.destination = "subresource", A.push(E);
            let h = KA();
            i.push(cq({ request: E, processResponse(f) {
              if (f.type === "error" || f.status === 206 || f.status < 200 || f.status > 299) h.reject(R.errors.exception({ header: "Cache.addAll", message: "Received an invalid status code or the request failed." }));
              else if (f.headersList.contains("vary")) {
                let B = Ch(f.headersList.get("vary"));
                for (let Q of B) if (Q === "*") {
                  h.reject(R.errors.exception({ header: "Cache.addAll", message: "invalid vary field value" }));
                  for (let I of i) I.abort();
                  return;
                }
              }
            }, processResponseEndOfBody(f) {
              if (f.aborted) {
                h.reject(new DOMException("aborted", "AbortError"));
                return;
              }
              h.resolve(f);
            } })), n.push(h.promise);
          }
          let o = await Promise.all(n), a = [], c = 0;
          for (let g of o) {
            let E = { type: "put", request: A[c], response: g };
            a.push(E), c++;
          }
          let l = KA(), u = null;
          try {
            this.#t(a);
          } catch (g) {
            u = g;
          }
          return queueMicrotask(() => {
            u === null ? l.resolve(void 0) : l.reject(u);
          }), l.promise;
        }
        async put(e, r) {
          R.brandCheck(this, t);
          let n = "Cache.put";
          R.argumentLengthCheck(arguments, 2, n), e = R.converters.RequestInfo(e, n, "request"), r = R.converters.Response(r, n, "response");
          let A = null;
          if (R.is.Request(e) ? A = er(e) : A = er(new vs(e)), !el(A.url) || A.method !== "GET") throw R.errors.exception({ header: n, message: "Expected an http/s scheme when method is not GET" });
          let i = oq(r);
          if (i.status === 206) throw R.errors.exception({ header: n, message: "Got 206 status" });
          if (i.headersList.contains("vary")) {
            let E = Ch(i.headersList.get("vary"));
            for (let h of E) if (h === "*") throw R.errors.exception({ header: n, message: "Got * vary field value" });
          }
          if (i.body && (Aq(i.body.stream) || i.body.stream.locked)) throw R.errors.exception({ header: n, message: "Response body is locked or disturbed" });
          let s = iq(i), o = KA();
          if (i.body != null) {
            let h = i.body.stream.getReader();
            lq(h, o.resolve, o.reject);
          } else o.resolve(void 0);
          let a = [], c = { type: "put", request: A, response: s };
          a.push(c);
          let l = await o.promise;
          s.body != null && (s.body.source = l);
          let u = KA(), g = null;
          try {
            this.#t(a);
          } catch (E) {
            g = E;
          }
          return queueMicrotask(() => {
            g === null ? u.resolve() : u.reject(g);
          }), u.promise;
        }
        async delete(e, r = {}) {
          R.brandCheck(this, t);
          let n = "Cache.delete";
          R.argumentLengthCheck(arguments, 1, n), e = R.converters.RequestInfo(e, n, "request"), r = R.converters.CacheQueryOptions(r, n, "options");
          let A = null;
          if (R.is.Request(e)) {
            if (A = er(e), A.method !== "GET" && !r.ignoreMethod) return false;
          } else Ih(typeof e == "string"), A = er(new vs(e));
          let i = [], s = { type: "delete", request: A, options: r };
          i.push(s);
          let o = KA(), a = null, c;
          try {
            c = this.#t(i);
          } catch (l) {
            a = l;
          }
          return queueMicrotask(() => {
            a === null ? o.resolve(!!c?.length) : o.reject(a);
          }), o.promise;
        }
        async keys(e = void 0, r = {}) {
          R.brandCheck(this, t);
          let n = "Cache.keys";
          e !== void 0 && (e = R.converters.RequestInfo(e, n, "request")), r = R.converters.CacheQueryOptions(r, n, "options");
          let A = null;
          if (e !== void 0) if (R.is.Request(e)) {
            if (A = er(e), A.method !== "GET" && !r.ignoreMethod) return [];
          } else typeof e == "string" && (A = er(new vs(e)));
          let i = KA(), s = [];
          if (e === void 0) for (let o of this.#e) s.push(o[0]);
          else {
            let o = this.#r(A, r);
            for (let a of o) s.push(a[0]);
          }
          return queueMicrotask(() => {
            let o = [];
            for (let a of s) {
              let c = aq(a, void 0, new AbortController().signal, "immutable");
              o.push(c);
            }
            i.resolve(Object.freeze(o));
          }), i.promise;
        }
        #t(e) {
          let r = this.#e, n = [...r], A = [], i = [];
          try {
            for (let s of e) {
              if (s.type !== "delete" && s.type !== "put") throw R.errors.exception({ header: "Cache.#batchCacheOperations", message: 'operation type does not match "delete" or "put"' });
              if (s.type === "delete" && s.response != null) throw R.errors.exception({ header: "Cache.#batchCacheOperations", message: "delete operation should not have an associated response" });
              if (this.#r(s.request, s.options, A).length) throw new DOMException("???", "InvalidStateError");
              let o;
              if (s.type === "delete") {
                if (o = this.#r(s.request, s.options), o.length === 0) return [];
                for (let a of o) {
                  let c = r.indexOf(a);
                  Ih(c !== -1), r.splice(c, 1);
                }
              } else if (s.type === "put") {
                if (s.response == null) throw R.errors.exception({ header: "Cache.#batchCacheOperations", message: "put operation should have an associated response" });
                let a = s.request;
                if (!el(a.url)) throw R.errors.exception({ header: "Cache.#batchCacheOperations", message: "expected http or https scheme" });
                if (a.method !== "GET") throw R.errors.exception({ header: "Cache.#batchCacheOperations", message: "not get method" });
                if (s.options != null) throw R.errors.exception({ header: "Cache.#batchCacheOperations", message: "options must not be defined" });
                o = this.#r(s.request);
                for (let c of o) {
                  let l = r.indexOf(c);
                  Ih(l !== -1), r.splice(l, 1);
                }
                r.push([s.request, s.response]), A.push([s.request, s.response]);
              }
              i.push([s.request, s.response]);
            }
            return i;
          } catch (s) {
            throw this.#e.length = 0, this.#e = n, s;
          }
        }
        #r(e, r, n) {
          let A = [], i = n ?? this.#e;
          for (let s of i) {
            let [o, a] = s;
            this.#n(e, o, a, r) && A.push(s);
          }
          return A;
        }
        #n(e, r, n = null, A) {
          let i = new URL(e.url), s = new URL(r.url);
          if (A?.ignoreSearch && (s.search = "", i.search = ""), !nq(i, s, true)) return false;
          if (n == null || A?.ignoreVary || !n.headersList.contains("vary")) return true;
          let o = Ch(n.headersList.get("vary"));
          for (let a of o) {
            if (a === "*") return false;
            let c = r.headersList.get(a), l = e.headersList.get(a);
            if (c !== l) return false;
          }
          return true;
        }
        #i(e, r, n = 1 / 0) {
          let A = null;
          if (e !== void 0) if (R.is.Request(e)) {
            if (A = er(e), A.method !== "GET" && !r.ignoreMethod) return [];
          } else typeof e == "string" && (A = er(new vs(e)));
          let i = [];
          if (e === void 0) for (let o of this.#e) i.push(o[1]);
          else {
            let o = this.#r(A, r);
            for (let a of o) i.push(a[1]);
          }
          let s = [];
          for (let o of i) {
            let a = sq(o, "immutable");
            if (s.push(a.clone()), s.length >= n) break;
          }
          return Object.freeze(s);
        }
      };
      Object.defineProperties(tl.prototype, { [Symbol.toStringTag]: { value: "Cache", configurable: true }, match: Mn, matchAll: Mn, add: Mn, addAll: Mn, put: Mn, delete: Mn, keys: Mn });
      var eR = [{ key: "ignoreSearch", converter: R.converters.boolean, defaultValue: () => false }, { key: "ignoreMethod", converter: R.converters.boolean, defaultValue: () => false }, { key: "ignoreVary", converter: R.converters.boolean, defaultValue: () => false }];
      R.converters.CacheQueryOptions = R.dictionaryConverter(eR);
      R.converters.MultiCacheQueryOptions = R.dictionaryConverter([...eR, { key: "cacheName", converter: R.converters.DOMString }]);
      R.converters.Response = R.interfaceConverter(R.is.Response, "Response");
      R.converters["sequence<RequestInfo>"] = R.sequenceConverter(R.converters.RequestInfo);
      tR.exports = { Cache: tl };
    });
    var AR = C((XK, nR) => {
      "use strict";
      var { Cache: rl } = rR(), { webidl: ve } = Te(), { kEnumerableProperty: Ps } = Y(), { kConstruct: Ys } = ne(), nl = class t {
        #e = /* @__PURE__ */ new Map();
        constructor() {
          arguments[0] !== Ys && ve.illegalConstructor(), ve.util.markAsUncloneable(this);
        }
        async match(e, r = {}) {
          if (ve.brandCheck(this, t), ve.argumentLengthCheck(arguments, 1, "CacheStorage.match"), e = ve.converters.RequestInfo(e), r = ve.converters.MultiCacheQueryOptions(r), r.cacheName != null) {
            if (this.#e.has(r.cacheName)) {
              let n = this.#e.get(r.cacheName);
              return await new rl(Ys, n).match(e, r);
            }
          } else for (let n of this.#e.values()) {
            let i = await new rl(Ys, n).match(e, r);
            if (i !== void 0) return i;
          }
        }
        async has(e) {
          ve.brandCheck(this, t);
          let r = "CacheStorage.has";
          return ve.argumentLengthCheck(arguments, 1, r), e = ve.converters.DOMString(e, r, "cacheName"), this.#e.has(e);
        }
        async open(e) {
          ve.brandCheck(this, t);
          let r = "CacheStorage.open";
          if (ve.argumentLengthCheck(arguments, 1, r), e = ve.converters.DOMString(e, r, "cacheName"), this.#e.has(e)) {
            let A = this.#e.get(e);
            return new rl(Ys, A);
          }
          let n = [];
          return this.#e.set(e, n), new rl(Ys, n);
        }
        async delete(e) {
          ve.brandCheck(this, t);
          let r = "CacheStorage.delete";
          return ve.argumentLengthCheck(arguments, 1, r), e = ve.converters.DOMString(e, r, "cacheName"), this.#e.delete(e);
        }
        async keys() {
          return ve.brandCheck(this, t), [...this.#e.keys()];
        }
      };
      Object.defineProperties(nl.prototype, { [Symbol.toStringTag]: { value: "CacheStorage", configurable: true }, match: Ps, has: Ps, open: Ps, delete: Ps, keys: Ps });
      nR.exports = { CacheStorage: nl };
    });
    var sR = C(($K, iR) => {
      "use strict";
      iR.exports = { maxAttributeValueSize: 1024, maxNameValuePairSize: 4096 };
    });
    var Bh = C((KK, uR) => {
      "use strict";
      function uq(t) {
        for (let e = 0; e < t.length; ++e) {
          let r = t.charCodeAt(e);
          if (r >= 0 && r <= 8 || r >= 10 && r <= 31 || r === 127) return true;
        }
        return false;
      }
      function oR(t) {
        for (let e = 0; e < t.length; ++e) {
          let r = t.charCodeAt(e);
          if (r < 33 || r > 126 || r === 34 || r === 40 || r === 41 || r === 60 || r === 62 || r === 64 || r === 44 || r === 59 || r === 58 || r === 92 || r === 47 || r === 91 || r === 93 || r === 63 || r === 61 || r === 123 || r === 125) throw new Error("Invalid cookie name");
        }
      }
      function aR(t) {
        let e = t.length, r = 0;
        if (t[0] === '"') {
          if (e === 1 || t[e - 1] !== '"') throw new Error("Invalid cookie value");
          --e, ++r;
        }
        for (; r < e; ) {
          let n = t.charCodeAt(r++);
          if (n < 33 || n > 126 || n === 34 || n === 44 || n === 59 || n === 92) throw new Error("Invalid cookie value");
        }
      }
      function cR(t) {
        for (let e = 0; e < t.length; ++e) {
          let r = t.charCodeAt(e);
          if (r < 32 || r === 127 || r === 59) throw new Error("Invalid cookie path");
        }
      }
      function gq(t) {
        if (t.startsWith("-") || t.endsWith(".") || t.endsWith("-")) throw new Error("Invalid cookie domain");
      }
      var Eq = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], dq = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], Al = Array(61).fill(0).map((t, e) => e.toString().padStart(2, "0"));
      function lR(t) {
        return typeof t == "number" && (t = new Date(t)), `${Eq[t.getUTCDay()]}, ${Al[t.getUTCDate()]} ${dq[t.getUTCMonth()]} ${t.getUTCFullYear()} ${Al[t.getUTCHours()]}:${Al[t.getUTCMinutes()]}:${Al[t.getUTCSeconds()]} GMT`;
      }
      function hq(t) {
        if (t < 0) throw new Error("Invalid cookie max-age");
      }
      function fq(t) {
        if (t.name.length === 0) return null;
        oR(t.name), aR(t.value);
        let e = [`${t.name}=${t.value}`];
        t.name.startsWith("__Secure-") && (t.secure = true), t.name.startsWith("__Host-") && (t.secure = true, t.domain = null, t.path = "/"), t.secure && e.push("Secure"), t.httpOnly && e.push("HttpOnly"), typeof t.maxAge == "number" && (hq(t.maxAge), e.push(`Max-Age=${t.maxAge}`)), t.domain && (gq(t.domain), e.push(`Domain=${t.domain}`)), t.path && (cR(t.path), e.push(`Path=${t.path}`)), t.expires && t.expires.toString() !== "Invalid Date" && e.push(`Expires=${lR(t.expires)}`), t.sameSite && e.push(`SameSite=${t.sameSite}`);
        for (let r of t.unparsed) {
          if (!r.includes("=")) throw new Error("Invalid unparsed");
          let [n, ...A] = r.split("=");
          e.push(`${n.trim()}=${A.join("=")}`);
        }
        return e.join("; ");
      }
      uR.exports = { isCTLExcludingHtab: uq, validateCookieName: oR, validateCookiePath: cR, validateCookieValue: aR, toIMFDate: lR, stringify: fq };
    });
    var ER = C((zK, gR) => {
      "use strict";
      var { maxNameValuePairSize: Qq, maxAttributeValueSize: Cq } = sR(), { isCTLExcludingHtab: Iq } = Bh(), { collectASequenceOfCodePointsFast: il } = tt(), Bq = __require("node:assert"), { unescape: pq } = __require("node:querystring");
      function mq(t) {
        if (Iq(t)) return null;
        let e = "", r = "", n = "", A = "";
        if (t.includes(";")) {
          let i = { position: 0 };
          e = il(";", t, i), r = t.slice(i.position);
        } else e = t;
        if (!e.includes("=")) A = e;
        else {
          let i = { position: 0 };
          n = il("=", e, i), A = e.slice(i.position + 1);
        }
        return n = n.trim(), A = A.trim(), n.length + A.length > Qq ? null : { name: n, value: pq(A), ...zA(r) };
      }
      function zA(t, e = {}) {
        if (t.length === 0) return e;
        Bq(t[0] === ";"), t = t.slice(1);
        let r = "";
        t.includes(";") ? (r = il(";", t, { position: 0 }), t = t.slice(r.length)) : (r = t, t = "");
        let n = "", A = "";
        if (r.includes("=")) {
          let s = { position: 0 };
          n = il("=", r, s), A = r.slice(s.position + 1);
        } else n = r;
        if (n = n.trim(), A = A.trim(), A.length > Cq) return zA(t, e);
        let i = n.toLowerCase();
        if (i === "expires") {
          let s = new Date(A);
          e.expires = s;
        } else if (i === "max-age") {
          let s = A.charCodeAt(0);
          if ((s < 48 || s > 57) && A[0] !== "-" || !/^\d+$/.test(A)) return zA(t, e);
          let o = Number(A);
          e.maxAge = o;
        } else if (i === "domain") {
          let s = A;
          s[0] === "." && (s = s.slice(1)), s = s.toLowerCase(), e.domain = s;
        } else if (i === "path") {
          let s = "";
          A.length === 0 || A[0] !== "/" ? s = "/" : s = A, e.path = s;
        } else if (i === "secure") e.secure = true;
        else if (i === "httponly") e.httpOnly = true;
        else if (i === "samesite") {
          let s = "Default", o = A.toLowerCase();
          o.includes("none") && (s = "None"), o.includes("strict") && (s = "Strict"), o.includes("lax") && (s = "Lax"), e.sameSite = s;
        } else e.unparsed ??= [], e.unparsed.push(`${n}=${A}`);
        return zA(t, e);
      }
      gR.exports = { parseSetCookie: mq, parseUnparsedAttributes: zA };
    });
    var QR = C((ez, fR) => {
      "use strict";
      var { parseSetCookie: dR } = ER(), { stringify: yq } = Bh(), { webidl: q } = Te(), { Headers: wq } = Tn(), sl = q.brandCheckMultiple([wq, globalThis.Headers].filter(Boolean));
      function Dq(t) {
        q.argumentLengthCheck(arguments, 1, "getCookies"), sl(t);
        let e = t.get("cookie"), r = {};
        if (!e) return r;
        for (let n of e.split(";")) {
          let [A, ...i] = n.split("=");
          r[A.trim()] = i.join("=");
        }
        return r;
      }
      function Rq(t, e, r) {
        sl(t);
        let n = "deleteCookie";
        q.argumentLengthCheck(arguments, 2, n), e = q.converters.DOMString(e, n, "name"), r = q.converters.DeleteCookieAttributes(r), hR(t, { name: e, value: "", expires: /* @__PURE__ */ new Date(0), ...r });
      }
      function Sq(t) {
        q.argumentLengthCheck(arguments, 1, "getSetCookies"), sl(t);
        let e = t.getSetCookie();
        return e ? e.map((r) => dR(r)) : [];
      }
      function bq(t) {
        return t = q.converters.DOMString(t), dR(t);
      }
      function hR(t, e) {
        q.argumentLengthCheck(arguments, 2, "setCookie"), sl(t), e = q.converters.Cookie(e);
        let r = yq(e);
        r && t.append("set-cookie", r, true);
      }
      q.converters.DeleteCookieAttributes = q.dictionaryConverter([{ converter: q.nullableConverter(q.converters.DOMString), key: "path", defaultValue: () => null }, { converter: q.nullableConverter(q.converters.DOMString), key: "domain", defaultValue: () => null }]);
      q.converters.Cookie = q.dictionaryConverter([{ converter: q.converters.DOMString, key: "name" }, { converter: q.converters.DOMString, key: "value" }, { converter: q.nullableConverter((t) => typeof t == "number" ? q.converters["unsigned long long"](t) : new Date(t)), key: "expires", defaultValue: () => null }, { converter: q.nullableConverter(q.converters["long long"]), key: "maxAge", defaultValue: () => null }, { converter: q.nullableConverter(q.converters.DOMString), key: "domain", defaultValue: () => null }, { converter: q.nullableConverter(q.converters.DOMString), key: "path", defaultValue: () => null }, { converter: q.nullableConverter(q.converters.boolean), key: "secure", defaultValue: () => null }, { converter: q.nullableConverter(q.converters.boolean), key: "httpOnly", defaultValue: () => null }, { converter: q.converters.USVString, key: "sameSite", allowedValues: ["Strict", "Lax", "None"] }, { converter: q.sequenceConverter(q.converters.DOMString), key: "unparsed", defaultValue: () => new Array(0) }]);
      fR.exports = { getCookies: Dq, deleteCookie: Rq, getSetCookies: Sq, setCookie: hR, parseCookie: bq };
    });
    var cl = C((tz, IR) => {
      "use strict";
      var { webidl: S } = Te(), { kEnumerableProperty: $e } = Y(), { kConstruct: CR } = ne(), ei = class t extends Event {
        #e;
        constructor(e, r = {}) {
          if (e === CR) {
            super(arguments[1], arguments[2]), S.util.markAsUncloneable(this);
            return;
          }
          let n = "MessageEvent constructor";
          S.argumentLengthCheck(arguments, 1, n), e = S.converters.DOMString(e, n, "type"), r = S.converters.MessageEventInit(r, n, "eventInitDict"), super(e, r), this.#e = r, S.util.markAsUncloneable(this);
        }
        get data() {
          return S.brandCheck(this, t), this.#e.data;
        }
        get origin() {
          return S.brandCheck(this, t), this.#e.origin;
        }
        get lastEventId() {
          return S.brandCheck(this, t), this.#e.lastEventId;
        }
        get source() {
          return S.brandCheck(this, t), this.#e.source;
        }
        get ports() {
          return S.brandCheck(this, t), Object.isFrozen(this.#e.ports) || Object.freeze(this.#e.ports), this.#e.ports;
        }
        initMessageEvent(e, r = false, n = false, A = null, i = "", s = "", o = null, a = []) {
          return S.brandCheck(this, t), S.argumentLengthCheck(arguments, 1, "MessageEvent.initMessageEvent"), new t(e, { bubbles: r, cancelable: n, data: A, origin: i, lastEventId: s, source: o, ports: a });
        }
        static createFastMessageEvent(e, r) {
          let n = new t(CR, e, r);
          return n.#e = r, n.#e.data ??= null, n.#e.origin ??= "", n.#e.lastEventId ??= "", n.#e.source ??= null, n.#e.ports ??= [], n;
        }
      }, { createFastMessageEvent: Nq } = ei;
      delete ei.createFastMessageEvent;
      var ol = class t extends Event {
        #e;
        constructor(e, r = {}) {
          let n = "CloseEvent constructor";
          S.argumentLengthCheck(arguments, 1, n), e = S.converters.DOMString(e, n, "type"), r = S.converters.CloseEventInit(r), super(e, r), this.#e = r, S.util.markAsUncloneable(this);
        }
        get wasClean() {
          return S.brandCheck(this, t), this.#e.wasClean;
        }
        get code() {
          return S.brandCheck(this, t), this.#e.code;
        }
        get reason() {
          return S.brandCheck(this, t), this.#e.reason;
        }
      }, al = class t extends Event {
        #e;
        constructor(e, r) {
          let n = "ErrorEvent constructor";
          S.argumentLengthCheck(arguments, 1, n), super(e, r), S.util.markAsUncloneable(this), e = S.converters.DOMString(e, n, "type"), r = S.converters.ErrorEventInit(r ?? {}), this.#e = r;
        }
        get message() {
          return S.brandCheck(this, t), this.#e.message;
        }
        get filename() {
          return S.brandCheck(this, t), this.#e.filename;
        }
        get lineno() {
          return S.brandCheck(this, t), this.#e.lineno;
        }
        get colno() {
          return S.brandCheck(this, t), this.#e.colno;
        }
        get error() {
          return S.brandCheck(this, t), this.#e.error;
        }
      };
      Object.defineProperties(ei.prototype, { [Symbol.toStringTag]: { value: "MessageEvent", configurable: true }, data: $e, origin: $e, lastEventId: $e, source: $e, ports: $e, initMessageEvent: $e });
      Object.defineProperties(ol.prototype, { [Symbol.toStringTag]: { value: "CloseEvent", configurable: true }, reason: $e, code: $e, wasClean: $e });
      Object.defineProperties(al.prototype, { [Symbol.toStringTag]: { value: "ErrorEvent", configurable: true }, message: $e, filename: $e, lineno: $e, colno: $e, error: $e });
      S.converters.MessagePort = S.interfaceConverter(S.is.MessagePort, "MessagePort");
      S.converters["sequence<MessagePort>"] = S.sequenceConverter(S.converters.MessagePort);
      var ph = [{ key: "bubbles", converter: S.converters.boolean, defaultValue: () => false }, { key: "cancelable", converter: S.converters.boolean, defaultValue: () => false }, { key: "composed", converter: S.converters.boolean, defaultValue: () => false }];
      S.converters.MessageEventInit = S.dictionaryConverter([...ph, { key: "data", converter: S.converters.any, defaultValue: () => null }, { key: "origin", converter: S.converters.USVString, defaultValue: () => "" }, { key: "lastEventId", converter: S.converters.DOMString, defaultValue: () => "" }, { key: "source", converter: S.nullableConverter(S.converters.MessagePort), defaultValue: () => null }, { key: "ports", converter: S.converters["sequence<MessagePort>"], defaultValue: () => new Array(0) }]);
      S.converters.CloseEventInit = S.dictionaryConverter([...ph, { key: "wasClean", converter: S.converters.boolean, defaultValue: () => false }, { key: "code", converter: S.converters["unsigned short"], defaultValue: () => 0 }, { key: "reason", converter: S.converters.USVString, defaultValue: () => "" }]);
      S.converters.ErrorEventInit = S.dictionaryConverter([...ph, { key: "message", converter: S.converters.DOMString, defaultValue: () => "" }, { key: "filename", converter: S.converters.USVString, defaultValue: () => "" }, { key: "lineno", converter: S.converters["unsigned long"], defaultValue: () => 0 }, { key: "colno", converter: S.converters["unsigned long"], defaultValue: () => 0 }, { key: "error", converter: S.converters.any }]);
      IR.exports = { MessageEvent: ei, CloseEvent: ol, ErrorEvent: al, createFastMessageEvent: Nq };
    });
    var zr = C((rz, BR) => {
      "use strict";
      var Fq = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11", Tq = { enumerable: true, writable: false, configurable: false }, xq = { CONNECTING: 0, OPEN: 1, CLOSING: 2, CLOSED: 3 }, Uq = { SENT: 1, RECEIVED: 2 }, kq = { CONTINUATION: 0, TEXT: 1, BINARY: 2, CLOSE: 8, PING: 9, PONG: 10 }, Mq = 65535, Lq = { INFO: 0, PAYLOADLENGTH_16: 2, PAYLOADLENGTH_64: 3, READ_DATA: 4 }, vq = Buffer.allocUnsafe(0), Pq = { text: 1, typedArray: 2, arrayBuffer: 3, blob: 4 };
      BR.exports = { uid: Fq, sentCloseFrameState: Uq, staticPropertyDescriptors: Tq, states: xq, opcodes: kq, maxUnsigned16Bit: Mq, parserStates: Lq, emptyBuffer: vq, sendHints: Pq };
    });
    var Ln = C((nz, DR) => {
      "use strict";
      var { states: ll, opcodes: ti } = zr(), { isUtf8: Yq } = __require("node:buffer"), { collectASequenceOfCodePointsFast: Gq, removeHTTPWhitespace: pR } = tt();
      function Oq(t) {
        return t === ll.CONNECTING;
      }
      function Vq(t) {
        return t === ll.OPEN;
      }
      function Hq(t) {
        return t === ll.CLOSING;
      }
      function qq(t) {
        return t === ll.CLOSED;
      }
      function Jq(t, e, r = (A, i) => new Event(A, i), n = {}) {
        let A = r(t, n);
        e.dispatchEvent(A);
      }
      function Wq(t, e, r) {
        t.onMessage(e, r);
      }
      function _q(t) {
        return t.byteLength === t.buffer.byteLength ? t.buffer : new Uint8Array(t).buffer;
      }
      function jq(t) {
        if (t.length === 0) return false;
        for (let e = 0; e < t.length; ++e) {
          let r = t.charCodeAt(e);
          if (r < 33 || r > 126 || r === 34 || r === 40 || r === 41 || r === 44 || r === 47 || r === 58 || r === 59 || r === 60 || r === 61 || r === 62 || r === 63 || r === 64 || r === 91 || r === 92 || r === 93 || r === 123 || r === 125) return false;
        }
        return true;
      }
      function Zq(t) {
        return t >= 1e3 && t < 1015 ? t !== 1004 && t !== 1005 && t !== 1006 : t >= 3e3 && t <= 4999;
      }
      function mR(t) {
        return t === ti.CLOSE || t === ti.PING || t === ti.PONG;
      }
      function yR(t) {
        return t === ti.CONTINUATION;
      }
      function wR(t) {
        return t === ti.TEXT || t === ti.BINARY;
      }
      function Xq(t) {
        return wR(t) || yR(t) || mR(t);
      }
      function $q(t) {
        let e = { position: 0 }, r = /* @__PURE__ */ new Map();
        for (; e.position < t.length; ) {
          let n = Gq(";", t, e), [A, i = ""] = n.split("=");
          r.set(pR(A, true, false), pR(i, false, true)), e.position++;
        }
        return r;
      }
      function Kq(t) {
        for (let e = 0; e < t.length; e++) {
          let r = t.charCodeAt(e);
          if (r < 48 || r > 57) return false;
        }
        return true;
      }
      function zq(t, e) {
        let r;
        try {
          r = new URL(t, e);
        } catch (n) {
          throw new DOMException(n, "SyntaxError");
        }
        if (r.protocol === "http:" ? r.protocol = "ws:" : r.protocol === "https:" && (r.protocol = "wss:"), r.protocol !== "ws:" && r.protocol !== "wss:") throw new DOMException("expected a ws: or wss: url", "SyntaxError");
        if (r.hash.length || r.href.endsWith("#")) throw new DOMException("hash", "SyntaxError");
        return r;
      }
      function eJ(t, e) {
        if (t !== null && t !== 1e3 && (t < 3e3 || t > 4999)) throw new DOMException("invalid code", "InvalidAccessError");
        if (e !== null) {
          let r = Buffer.byteLength(e);
          if (r > 123) throw new DOMException(`Reason must be less than 123 bytes; received ${r}`, "SyntaxError");
        }
      }
      var tJ = (() => {
        if (typeof process.versions.icu == "string") {
          let t = new TextDecoder("utf-8", { fatal: true });
          return t.decode.bind(t);
        }
        return function(t) {
          if (Yq(t)) return t.toString("utf-8");
          throw new TypeError("Invalid utf-8 received.");
        };
      })();
      DR.exports = { isConnecting: Oq, isEstablished: Vq, isClosing: Hq, isClosed: qq, fireEvent: Jq, isValidSubprotocol: jq, isValidStatusCode: Zq, websocketMessageReceived: Wq, utf8Decode: tJ, isControlFrame: mR, isContinuationFrame: yR, isTextBinaryFrame: wR, isValidOpcode: Xq, parseExtensions: $q, isValidClientWindowBits: Kq, toArrayBuffer: _q, getURLRecord: zq, validateCloseCodeAndReason: eJ };
    });
    var Os = C((Az, bR) => {
      "use strict";
      var { maxUnsigned16Bit: RR, opcodes: rJ } = zr(), ul = 8 * 1024, mh, Gs = null, ri = ul;
      try {
        mh = __require("node:crypto");
      } catch {
        mh = { randomFillSync: function(e, r, n) {
          for (let A = 0; A < e.length; ++A) e[A] = Math.random() * 255 | 0;
          return e;
        } };
      }
      function SR() {
        return ri === ul && (ri = 0, mh.randomFillSync(Gs ??= Buffer.allocUnsafeSlow(ul), 0, ul)), [Gs[ri++], Gs[ri++], Gs[ri++], Gs[ri++]];
      }
      var yh = class {
        constructor(e) {
          this.frameData = e;
        }
        createFrame(e) {
          let r = this.frameData, n = SR(), A = r?.byteLength ?? 0, i = A, s = 6;
          A > RR ? (s += 8, i = 127) : A > 125 && (s += 2, i = 126);
          let o = Buffer.allocUnsafe(A + s);
          o[0] = o[1] = 0, o[0] |= 128, o[0] = (o[0] & 240) + e;
          o[s - 4] = n[0], o[s - 3] = n[1], o[s - 2] = n[2], o[s - 1] = n[3], o[1] = i, i === 126 ? o.writeUInt16BE(A, 2) : i === 127 && (o[2] = o[3] = 0, o.writeUIntBE(A, 4, 6)), o[1] |= 128;
          for (let a = 0; a < A; ++a) o[s + a] = r[a] ^ n[a & 3];
          return o;
        }
        static createFastTextFrame(e) {
          let r = SR(), n = e.length;
          for (let o = 0; o < n; ++o) e[o] ^= r[o & 3];
          let A = n, i = 6;
          n > RR ? (i += 8, A = 127) : n > 125 && (i += 2, A = 126);
          let s = Buffer.allocUnsafeSlow(i);
          return s[0] = 128 | rJ.TEXT, s[1] = A | 128, s[i - 4] = r[0], s[i - 3] = r[1], s[i - 2] = r[2], s[i - 1] = r[3], A === 126 ? s.writeUInt16BE(n, 2) : A === 127 && (s[2] = s[3] = 0, s.writeUIntBE(n, 4, 6)), [s, e];
        }
      };
      bR.exports = { WebsocketFrameSend: yh };
    });
    var El = C((iz, UR) => {
      "use strict";
      var { uid: nJ, states: gl, sentCloseFrameState: wh, emptyBuffer: NR, opcodes: AJ } = zr(), { parseExtensions: iJ, isClosed: sJ, isClosing: oJ, isEstablished: TR, validateCloseCodeAndReason: aJ } = Ln(), { channels: FR } = lr(), { makeRequest: cJ } = $A(), { fetching: lJ } = Ls(), { Headers: uJ, getHeadersList: gJ } = Tn(), { getDecodeSplit: EJ } = Ve(), { WebsocketFrameSend: dJ } = Os(), hJ = __require("node:assert"), Dh;
      try {
        Dh = __require("node:crypto");
      } catch {
      }
      function fJ(t, e, r, n, A) {
        let i = t;
        i.protocol = t.protocol === "ws:" ? "http:" : "https:";
        let s = cJ({ urlList: [i], client: r, serviceWorkers: "none", referrer: "no-referrer", mode: "websocket", credentials: "include", cache: "no-store", redirect: "error" });
        if (A.headers) {
          let l = gJ(new uJ(A.headers));
          s.headersList = l;
        }
        let o = Dh.randomBytes(16).toString("base64");
        s.headersList.append("sec-websocket-key", o, true), s.headersList.append("sec-websocket-version", "13", true);
        for (let l of e) s.headersList.append("sec-websocket-protocol", l, true);
        return s.headersList.append("sec-websocket-extensions", "permessage-deflate; client_max_window_bits", true), lJ({ request: s, useParallelQueue: true, dispatcher: A.dispatcher, processResponse(l) {
          if (l.type === "error" && (n.readyState = gl.CLOSED), l.type === "error" || l.status !== 101) {
            mr(n, 1002, "Received network error or non-101 status code.");
            return;
          }
          if (e.length !== 0 && !l.headersList.get("Sec-WebSocket-Protocol")) {
            mr(n, 1002, "Server did not respond with sent protocols.");
            return;
          }
          if (l.headersList.get("Upgrade")?.toLowerCase() !== "websocket") {
            mr(n, 1002, 'Server did not set Upgrade header to "websocket".');
            return;
          }
          if (l.headersList.get("Connection")?.toLowerCase() !== "upgrade") {
            mr(n, 1002, 'Server did not set Connection header to "upgrade".');
            return;
          }
          let u = l.headersList.get("Sec-WebSocket-Accept"), g = Dh.createHash("sha1").update(o + nJ).digest("base64");
          if (u !== g) {
            mr(n, 1002, "Incorrect hash received in Sec-WebSocket-Accept header.");
            return;
          }
          let E = l.headersList.get("Sec-WebSocket-Extensions"), h;
          if (E !== null && (h = iJ(E), !h.has("permessage-deflate"))) {
            mr(n, 1002, "Sec-WebSocket-Extensions header does not match.");
            return;
          }
          let f = l.headersList.get("Sec-WebSocket-Protocol");
          if (f !== null && !EJ("sec-websocket-protocol", s.headersList).includes(f)) {
            mr(n, 1002, "Protocol was not set in the opening handshake.");
            return;
          }
          l.socket.on("data", n.onSocketData), l.socket.on("close", n.onSocketClose), l.socket.on("error", n.onSocketError), FR.open.hasSubscribers && FR.open.publish({ address: l.socket.address(), protocol: f, extensions: E }), n.wasEverConnected = true, n.onConnectionEstablished(l, h);
        } });
      }
      function xR(t, e, r, n = false) {
        if (e ??= null, r ??= "", n && aJ(e, r), !(sJ(t.readyState) || oJ(t.readyState))) if (!TR(t.readyState)) mr(t), t.readyState = gl.CLOSING;
        else if (!t.closeState.has(wh.SENT) && !t.closeState.has(wh.RECEIVED)) {
          let A = new dJ();
          r.length !== 0 && e === null && (e = 1e3), hJ(e === null || Number.isInteger(e)), e === null && r.length === 0 ? A.frameData = NR : e !== null && r === null ? (A.frameData = Buffer.allocUnsafe(2), A.frameData.writeUInt16BE(e, 0)) : e !== null && r !== null ? (A.frameData = Buffer.allocUnsafe(2 + Buffer.byteLength(r)), A.frameData.writeUInt16BE(e, 0), A.frameData.write(r, 2, "utf-8")) : A.frameData = NR, t.socket.write(A.createFrame(AJ.CLOSE)), t.closeState.add(wh.SENT), t.readyState = gl.CLOSING;
        } else t.readyState = gl.CLOSING;
      }
      function mr(t, e, r) {
        TR(t.readyState) && xR(t, e, r, false), t.controller.abort(), t.socket?.destroyed === false && t.socket.destroy(), t.onFail(e, r);
      }
      UR.exports = { establishWebSocketConnection: fJ, failWebsocketConnection: mr, closeWebSocketConnection: xR };
    });
    var MR = C((sz, kR) => {
      "use strict";
      var { createInflateRaw: QJ, Z_DEFAULT_WINDOWBITS: CJ } = __require("node:zlib"), { isValidClientWindowBits: IJ } = Ln(), BJ = Buffer.from([0, 0, 255, 255]), dl = Symbol("kBuffer"), hl = Symbol("kLength"), Rh = class {
        #e;
        #t = {};
        constructor(e) {
          this.#t.serverNoContextTakeover = e.has("server_no_context_takeover"), this.#t.serverMaxWindowBits = e.get("server_max_window_bits");
        }
        decompress(e, r, n) {
          if (!this.#e) {
            let A = CJ;
            if (this.#t.serverMaxWindowBits) {
              if (!IJ(this.#t.serverMaxWindowBits)) {
                n(new Error("Invalid server_max_window_bits"));
                return;
              }
              A = Number.parseInt(this.#t.serverMaxWindowBits);
            }
            this.#e = QJ({ windowBits: A }), this.#e[dl] = [], this.#e[hl] = 0, this.#e.on("data", (i) => {
              this.#e[dl].push(i), this.#e[hl] += i.length;
            }), this.#e.on("error", (i) => {
              this.#e = null, n(i);
            });
          }
          this.#e.write(e), r && this.#e.write(BJ), this.#e.flush(() => {
            let A = Buffer.concat(this.#e[dl], this.#e[hl]);
            this.#e[dl].length = 0, this.#e[hl] = 0, n(null, A);
          });
        }
      };
      kR.exports = { PerMessageDeflate: Rh };
    });
    var Nh = C((oz, GR) => {
      "use strict";
      var { Writable: pJ } = __require("node:stream"), mJ = __require("node:assert"), { parserStates: Ke, opcodes: ni, states: yJ, emptyBuffer: LR, sentCloseFrameState: Vs } = zr(), { channels: fl } = lr(), { isValidStatusCode: wJ, isValidOpcode: DJ, websocketMessageReceived: vR, utf8Decode: RJ, isControlFrame: PR, isTextBinaryFrame: Sh, isContinuationFrame: SJ } = Ln(), { failWebsocketConnection: st } = El(), { WebsocketFrameSend: YR } = Os(), { PerMessageDeflate: bJ } = MR(), bh = class extends pJ {
        #e = [];
        #t = 0;
        #r = 0;
        #n = false;
        #i = Ke.INFO;
        #A = {};
        #a = [];
        #s;
        #o;
        constructor(e, r) {
          super(), this.#o = e, this.#s = r ?? /* @__PURE__ */ new Map(), this.#s.has("permessage-deflate") && this.#s.set("permessage-deflate", new bJ(r));
        }
        _write(e, r, n) {
          this.#e.push(e), this.#r += e.length, this.#n = true, this.run(n);
        }
        run(e) {
          for (; this.#n; ) if (this.#i === Ke.INFO) {
            if (this.#r < 2) return e();
            let r = this.consume(2), n = (r[0] & 128) !== 0, A = r[0] & 15, i = (r[1] & 128) === 128, s = !n && A !== ni.CONTINUATION, o = r[1] & 127, a = r[0] & 64, c = r[0] & 32, l = r[0] & 16;
            if (!DJ(A)) return st(this.#o, 1002, "Invalid opcode received"), e();
            if (i) return st(this.#o, 1002, "Frame cannot be masked"), e();
            if (a !== 0 && !this.#s.has("permessage-deflate")) {
              st(this.#o, 1002, "Expected RSV1 to be clear.");
              return;
            }
            if (c !== 0 || l !== 0) {
              st(this.#o, 1002, "RSV1, RSV2, RSV3 must be clear");
              return;
            }
            if (s && !Sh(A)) {
              st(this.#o, 1002, "Invalid frame type was fragmented.");
              return;
            }
            if (Sh(A) && this.#a.length > 0) {
              st(this.#o, 1002, "Expected continuation frame");
              return;
            }
            if (this.#A.fragmented && s) {
              st(this.#o, 1002, "Fragmented frame exceeded 125 bytes.");
              return;
            }
            if ((o > 125 || s) && PR(A)) {
              st(this.#o, 1002, "Control frame either too large or fragmented");
              return;
            }
            if (SJ(A) && this.#a.length === 0 && !this.#A.compressed) {
              st(this.#o, 1002, "Unexpected continuation frame");
              return;
            }
            o <= 125 ? (this.#A.payloadLength = o, this.#i = Ke.READ_DATA) : o === 126 ? this.#i = Ke.PAYLOADLENGTH_16 : o === 127 && (this.#i = Ke.PAYLOADLENGTH_64), Sh(A) && (this.#A.binaryType = A, this.#A.compressed = a !== 0), this.#A.opcode = A, this.#A.masked = i, this.#A.fin = n, this.#A.fragmented = s;
          } else if (this.#i === Ke.PAYLOADLENGTH_16) {
            if (this.#r < 2) return e();
            let r = this.consume(2);
            this.#A.payloadLength = r.readUInt16BE(0), this.#i = Ke.READ_DATA;
          } else if (this.#i === Ke.PAYLOADLENGTH_64) {
            if (this.#r < 8) return e();
            let r = this.consume(8), n = r.readUInt32BE(0);
            if (n > 2 ** 31 - 1) {
              st(this.#o, 1009, "Received payload length > 2^31 bytes.");
              return;
            }
            let A = r.readUInt32BE(4);
            this.#A.payloadLength = (n << 8) + A, this.#i = Ke.READ_DATA;
          } else if (this.#i === Ke.READ_DATA) {
            if (this.#r < this.#A.payloadLength) return e();
            let r = this.consume(this.#A.payloadLength);
            if (PR(this.#A.opcode)) this.#n = this.parseControlFrame(r), this.#i = Ke.INFO;
            else if (!this.#A.compressed) this.writeFragments(r), !this.#A.fragmented && this.#A.fin && vR(this.#o, this.#A.binaryType, this.consumeFragments()), this.#i = Ke.INFO;
            else {
              this.#s.get("permessage-deflate").decompress(r, this.#A.fin, (n, A) => {
                if (n) {
                  st(this.#o, 1007, n.message);
                  return;
                }
                if (this.writeFragments(A), !this.#A.fin) {
                  this.#i = Ke.INFO, this.#n = true, this.run(e);
                  return;
                }
                vR(this.#o, this.#A.binaryType, this.consumeFragments()), this.#n = true, this.#i = Ke.INFO, this.run(e);
              }), this.#n = false;
              break;
            }
          }
        }
        consume(e) {
          if (e > this.#r) throw new Error("Called consume() before buffers satiated.");
          if (e === 0) return LR;
          this.#r -= e;
          let r = this.#e[0];
          if (r.length > e) return this.#e[0] = r.subarray(e, r.length), r.subarray(0, e);
          if (r.length === e) return this.#e.shift();
          {
            let n = 0, A = Buffer.allocUnsafeSlow(e);
            for (; n !== e; ) {
              let i = this.#e[0], s = i.length;
              if (s + n === e) {
                A.set(this.#e.shift(), n);
                break;
              } else if (s + n > e) {
                A.set(i.subarray(0, e - n), n), this.#e[0] = i.subarray(e - n);
                break;
              } else A.set(this.#e.shift(), n), n += s;
            }
            return A;
          }
        }
        writeFragments(e) {
          this.#t += e.length, this.#a.push(e);
        }
        consumeFragments() {
          let e = this.#a;
          if (e.length === 1) return this.#t = 0, e.shift();
          let r = 0, n = Buffer.allocUnsafeSlow(this.#t);
          for (let A = 0; A < e.length; ++A) {
            let i = e[A];
            n.set(i, r), r += i.length;
          }
          return this.#a = [], this.#t = 0, n;
        }
        parseCloseBody(e) {
          mJ(e.length !== 1);
          let r;
          if (e.length >= 2 && (r = e.readUInt16BE(0)), r !== void 0 && !wJ(r)) return { code: 1002, reason: "Invalid status code", error: true };
          let n = e.subarray(2);
          n[0] === 239 && n[1] === 187 && n[2] === 191 && (n = n.subarray(3));
          try {
            n = RJ(n);
          } catch {
            return { code: 1007, reason: "Invalid UTF-8", error: true };
          }
          return { code: r, reason: n, error: false };
        }
        parseControlFrame(e) {
          let { opcode: r, payloadLength: n } = this.#A;
          if (r === ni.CLOSE) {
            if (n === 1) return st(this.#o, 1002, "Received close frame with a 1-byte body."), false;
            if (this.#A.closeInfo = this.parseCloseBody(e), this.#A.closeInfo.error) {
              let { code: A, reason: i } = this.#A.closeInfo;
              return st(this.#o, A, i), false;
            }
            if (!this.#o.closeState.has(Vs.SENT) && !this.#o.closeState.has(Vs.RECEIVED)) {
              let A = LR;
              this.#A.closeInfo.code && (A = Buffer.allocUnsafe(2), A.writeUInt16BE(this.#A.closeInfo.code, 0));
              let i = new YR(A);
              this.#o.socket.write(i.createFrame(ni.CLOSE)), this.#o.closeState.add(Vs.SENT);
            }
            return this.#o.readyState = yJ.CLOSING, this.#o.closeState.add(Vs.RECEIVED), false;
          } else if (r === ni.PING) {
            if (!this.#o.closeState.has(Vs.RECEIVED)) {
              let A = new YR(e);
              this.#o.socket.write(A.createFrame(ni.PONG)), fl.ping.hasSubscribers && fl.ping.publish({ payload: e });
            }
          } else r === ni.PONG && fl.pong.hasSubscribers && fl.pong.publish({ payload: e });
          return true;
        }
        get closingInfo() {
          return this.#A.closeInfo;
        }
      };
      GR.exports = { ByteParser: bh };
    });
    var qR = C((az, HR) => {
      "use strict";
      var { WebsocketFrameSend: VR } = Os(), { opcodes: OR, sendHints: vn } = zr(), NJ = UE(), Th = class {
        #e = new NJ();
        #t = false;
        #r;
        constructor(e) {
          this.#r = e;
        }
        add(e, r, n) {
          if (n !== vn.blob) {
            if (this.#t) {
              let i = { promise: null, callback: r, frame: Fh(e, n) };
              this.#e.push(i);
            } else if (n === vn.text) {
              let { 0: i, 1: s } = VR.createFastTextFrame(e);
              this.#r.cork(), this.#r.write(i), this.#r.write(s, r), this.#r.uncork();
            } else this.#r.write(Fh(e, n), r);
            return;
          }
          let A = { promise: e.arrayBuffer().then((i) => {
            A.promise = null, A.frame = Fh(i, n);
          }), callback: r, frame: null };
          this.#e.push(A), this.#t || this.#n();
        }
        async #n() {
          this.#t = true;
          let e = this.#e;
          for (; !e.isEmpty(); ) {
            let r = e.shift();
            r.promise !== null && await r.promise, this.#r.write(r.frame, r.callback), r.callback = r.frame = null;
          }
          this.#t = false;
        }
      };
      function Fh(t, e) {
        return new VR(FJ(t, e)).createFrame(e === vn.text ? OR.TEXT : OR.BINARY);
      }
      function FJ(t, e) {
        switch (e) {
          case vn.text:
          case vn.typedArray:
            return new Uint8Array(t.buffer, t.byteOffset, t.byteLength);
          case vn.arrayBuffer:
          case vn.blob:
            return new Uint8Array(t);
        }
      }
      HR.exports = { SendQueue: Th };
    });
    var $R = C((cz, XR) => {
      "use strict";
      var { webidl: x } = Te(), { URLSerializer: TJ } = tt(), { environmentSettingsObject: JR } = Ve(), { staticPropertyDescriptors: en, states: tr, sentCloseFrameState: xh, sendHints: Ql, opcodes: WR } = zr(), { isConnecting: xJ, isEstablished: UJ, isClosing: kJ, isValidSubprotocol: MJ, fireEvent: Hs, utf8Decode: LJ, toArrayBuffer: vJ, getURLRecord: PJ } = Ln(), { establishWebSocketConnection: YJ, closeWebSocketConnection: GJ, failWebsocketConnection: _R } = El(), { ByteParser: OJ } = Nh(), { kEnumerableProperty: It } = Y(), { getGlobalDispatcher: VJ } = kc(), { types: ZR } = __require("node:util"), { ErrorEvent: HJ, CloseEvent: jR, createFastMessageEvent: qJ } = cl(), { SendQueue: JJ } = qR(), { channels: Cl } = lr(), ot = class t extends EventTarget {
        #e = { open: null, error: null, close: null, message: null };
        #t = 0;
        #r = "";
        #n = "";
        #i;
        #A = { onConnectionEstablished: (e, r) => this.#c(e, r), onFail: (e, r) => this.#g(e, r), onMessage: (e, r) => this.#l(e, r), onParserError: (e) => _R(this.#A, null, e.message), onParserDrain: () => this.#u(), onSocketData: (e) => {
          this.#o.write(e) || this.#A.socket.pause();
        }, onSocketError: (e) => {
          this.#A.readyState = tr.CLOSING, Cl.socketError.hasSubscribers && Cl.socketError.publish(e), this.#A.socket.destroy();
        }, onSocketClose: () => this.#E(), readyState: tr.CONNECTING, socket: null, closeState: /* @__PURE__ */ new Set(), controller: null, wasEverConnected: false };
        #a;
        #s;
        #o;
        constructor(e, r = []) {
          super(), x.util.markAsUncloneable(this);
          let n = "WebSocket constructor";
          x.argumentLengthCheck(arguments, 1, n);
          let A = x.converters["DOMString or sequence<DOMString> or WebSocketInit"](r, n, "options");
          e = x.converters.USVString(e), r = A.protocols;
          let i = JR.settingsObject.baseUrl, s = PJ(e, i);
          if (typeof r == "string" && (r = [r]), r.length !== new Set(r.map((a) => a.toLowerCase())).size) throw new DOMException("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
          if (r.length > 0 && !r.every((a) => MJ(a))) throw new DOMException("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
          this.#a = new URL(s.href);
          let o = JR.settingsObject;
          this.#A.controller = YJ(s, r, o, this.#A, A), this.#A.readyState = t.CONNECTING, this.#s = "blob";
        }
        close(e = void 0, r = void 0) {
          x.brandCheck(this, t), e !== void 0 && (e = x.converters["unsigned short"](e, "WebSocket.close", "code", { clamp: true })), r !== void 0 && (r = x.converters.USVString(r)), e ??= null, r ??= "", GJ(this.#A, e, r, true);
        }
        send(e) {
          x.brandCheck(this, t);
          let r = "WebSocket.send";
          if (x.argumentLengthCheck(arguments, 1, r), e = x.converters.WebSocketSendData(e, r, "data"), xJ(this.#A.readyState)) throw new DOMException("Sent before connected.", "InvalidStateError");
          if (!(!UJ(this.#A.readyState) || kJ(this.#A.readyState))) if (typeof e == "string") {
            let n = Buffer.from(e);
            this.#t += n.byteLength, this.#i.add(n, () => {
              this.#t -= n.byteLength;
            }, Ql.text);
          } else ZR.isArrayBuffer(e) ? (this.#t += e.byteLength, this.#i.add(e, () => {
            this.#t -= e.byteLength;
          }, Ql.arrayBuffer)) : ArrayBuffer.isView(e) ? (this.#t += e.byteLength, this.#i.add(e, () => {
            this.#t -= e.byteLength;
          }, Ql.typedArray)) : x.is.Blob(e) && (this.#t += e.size, this.#i.add(e, () => {
            this.#t -= e.size;
          }, Ql.blob));
        }
        get readyState() {
          return x.brandCheck(this, t), this.#A.readyState;
        }
        get bufferedAmount() {
          return x.brandCheck(this, t), this.#t;
        }
        get url() {
          return x.brandCheck(this, t), TJ(this.#a);
        }
        get extensions() {
          return x.brandCheck(this, t), this.#n;
        }
        get protocol() {
          return x.brandCheck(this, t), this.#r;
        }
        get onopen() {
          return x.brandCheck(this, t), this.#e.open;
        }
        set onopen(e) {
          x.brandCheck(this, t), this.#e.open && this.removeEventListener("open", this.#e.open), typeof e == "function" ? (this.#e.open = e, this.addEventListener("open", e)) : this.#e.open = null;
        }
        get onerror() {
          return x.brandCheck(this, t), this.#e.error;
        }
        set onerror(e) {
          x.brandCheck(this, t), this.#e.error && this.removeEventListener("error", this.#e.error), typeof e == "function" ? (this.#e.error = e, this.addEventListener("error", e)) : this.#e.error = null;
        }
        get onclose() {
          return x.brandCheck(this, t), this.#e.close;
        }
        set onclose(e) {
          x.brandCheck(this, t), this.#e.close && this.removeEventListener("close", this.#e.close), typeof e == "function" ? (this.#e.close = e, this.addEventListener("close", e)) : this.#e.close = null;
        }
        get onmessage() {
          return x.brandCheck(this, t), this.#e.message;
        }
        set onmessage(e) {
          x.brandCheck(this, t), this.#e.message && this.removeEventListener("message", this.#e.message), typeof e == "function" ? (this.#e.message = e, this.addEventListener("message", e)) : this.#e.message = null;
        }
        get binaryType() {
          return x.brandCheck(this, t), this.#s;
        }
        set binaryType(e) {
          x.brandCheck(this, t), e !== "blob" && e !== "arraybuffer" ? this.#s = "blob" : this.#s = e;
        }
        #c(e, r) {
          this.#A.socket = e.socket;
          let n = new OJ(this.#A, r);
          n.on("drain", () => this.#A.onParserDrain()), n.on("error", (s) => this.#A.onParserError(s)), this.#o = n, this.#i = new JJ(e.socket), this.#A.readyState = tr.OPEN;
          let A = e.headersList.get("sec-websocket-extensions");
          A !== null && (this.#n = A);
          let i = e.headersList.get("sec-websocket-protocol");
          i !== null && (this.#r = i), Hs("open", this);
        }
        #g(e, r) {
          r && Hs("error", this, (n, A) => new HJ(n, A), { error: new Error(r), message: r }), this.#A.wasEverConnected || (this.#A.readyState = tr.CLOSED, Hs("close", this, (n, A) => new jR(n, A), { wasClean: false, code: e, reason: r }));
        }
        #l(e, r) {
          if (this.#A.readyState !== tr.OPEN) return;
          let n;
          if (e === WR.TEXT) try {
            n = LJ(r);
          } catch {
            _R(this.#A, 1007, "Received invalid UTF-8 in text frame.");
            return;
          }
          else e === WR.BINARY && (this.#s === "blob" ? n = new Blob([r]) : n = vJ(r));
          Hs("message", this, qJ, { origin: this.#a.origin, data: n });
        }
        #u() {
          this.#A.socket.resume();
        }
        #E() {
          let e = this.#A.closeState.has(xh.SENT) && this.#A.closeState.has(xh.RECEIVED), r = 1005, n = "", A = this.#o.closingInfo;
          A && !A.error ? (r = A.code ?? 1005, n = A.reason) : this.#A.closeState.has(xh.RECEIVED) || (r = 1006), this.#A.readyState = tr.CLOSED, Hs("close", this, (i, s) => new jR(i, s), { wasClean: e, code: r, reason: n }), Cl.close.hasSubscribers && Cl.close.publish({ websocket: this, code: r, reason: n });
        }
      };
      ot.CONNECTING = ot.prototype.CONNECTING = tr.CONNECTING;
      ot.OPEN = ot.prototype.OPEN = tr.OPEN;
      ot.CLOSING = ot.prototype.CLOSING = tr.CLOSING;
      ot.CLOSED = ot.prototype.CLOSED = tr.CLOSED;
      Object.defineProperties(ot.prototype, { CONNECTING: en, OPEN: en, CLOSING: en, CLOSED: en, url: It, readyState: It, bufferedAmount: It, onopen: It, onerror: It, onclose: It, close: It, onmessage: It, binaryType: It, send: It, extensions: It, protocol: It, [Symbol.toStringTag]: { value: "WebSocket", writable: false, enumerable: false, configurable: true } });
      Object.defineProperties(ot, { CONNECTING: en, OPEN: en, CLOSING: en, CLOSED: en });
      x.converters["sequence<DOMString>"] = x.sequenceConverter(x.converters.DOMString);
      x.converters["DOMString or sequence<DOMString>"] = function(t, e, r) {
        return x.util.Type(t) === x.util.Types.OBJECT && Symbol.iterator in t ? x.converters["sequence<DOMString>"](t) : x.converters.DOMString(t, e, r);
      };
      x.converters.WebSocketInit = x.dictionaryConverter([{ key: "protocols", converter: x.converters["DOMString or sequence<DOMString>"], defaultValue: () => new Array(0) }, { key: "dispatcher", converter: x.converters.any, defaultValue: () => VJ() }, { key: "headers", converter: x.nullableConverter(x.converters.HeadersInit) }]);
      x.converters["DOMString or sequence<DOMString> or WebSocketInit"] = function(t) {
        return x.util.Type(t) === x.util.Types.OBJECT && !(Symbol.iterator in t) ? x.converters.WebSocketInit(t) : { protocols: x.converters["DOMString or sequence<DOMString>"](t) };
      };
      x.converters.WebSocketSendData = function(t) {
        return x.util.Type(t) === x.util.Types.OBJECT && (x.is.Blob(t) || ArrayBuffer.isView(t) || ZR.isArrayBuffer(t)) ? t : x.converters.USVString(t);
      };
      XR.exports = { WebSocket: ot };
    });
    var Uh = C((lz, eS) => {
      "use strict";
      var { webidl: Il } = Te(), { validateCloseCodeAndReason: WJ } = Ln(), { kConstruct: KR } = ne(), { kEnumerableProperty: zR } = Y(), Pn = class t extends DOMException {
        #e;
        #t;
        constructor(e = "", r = void 0) {
          if (e = Il.converters.DOMString(e, "WebSocketError", "message"), super(e, "WebSocketError"), r === KR) return;
          r !== null && (r = Il.converters.WebSocketCloseInfo(r));
          let n = r.closeCode ?? null, A = r.reason ?? "";
          WJ(n, A), A.length !== 0 && n === null && (n = 1e3), this.#e = n, this.#t = A;
        }
        get closeCode() {
          return this.#e;
        }
        get reason() {
          return this.#t;
        }
        static createUnvalidatedWebSocketError(e, r, n) {
          let A = new t(e, KR);
          return A.#e = r, A.#t = n, A;
        }
      }, { createUnvalidatedWebSocketError: _J } = Pn;
      delete Pn.createUnvalidatedWebSocketError;
      Object.defineProperties(Pn.prototype, { closeCode: zR, reason: zR, [Symbol.toStringTag]: { value: "WebSocketError", writable: false, enumerable: false, configurable: true } });
      Il.is.WebSocketError = Il.util.MakeTypeAssertion(Pn);
      eS.exports = { WebSocketError: Pn, createUnvalidatedWebSocketError: _J };
    });
    var iS = C((uz, AS) => {
      "use strict";
      var { createDeferredPromise: kh, environmentSettingsObject: tS } = Ve(), { states: Ai, opcodes: Bl, sentCloseFrameState: ii } = zr(), { webidl: Pe } = Te(), { getURLRecord: jJ, isValidSubprotocol: ZJ, isEstablished: XJ, utf8Decode: $J } = Ln(), { establishWebSocketConnection: KJ, failWebsocketConnection: Mh, closeWebSocketConnection: Lh } = El(), { types: zJ } = __require("node:util"), { channels: rS } = lr(), { WebsocketFrameSend: eW } = Os(), { ByteParser: tW } = Nh(), { WebSocketError: rW, createUnvalidatedWebSocketError: nW } = Uh(), { utf8DecodeBytes: AW } = Ve(), { kEnumerableProperty: pl } = Y(), nS = false, ml = class {
        #e;
        #t;
        #r;
        #n;
        #i;
        #A;
        #a = false;
        #s = { onConnectionEstablished: (e, r) => this.#g(e, r), onFail: (e, r) => {
        }, onMessage: (e, r) => this.#l(e, r), onParserError: (e) => Mh(this.#s, null, e.message), onParserDrain: () => this.#s.socket.resume(), onSocketData: (e) => {
          this.#o.write(e) || this.#s.socket.pause();
        }, onSocketError: (e) => {
          this.#s.readyState = Ai.CLOSING, rS.socketError.hasSubscribers && rS.socketError.publish(e), this.#s.socket.destroy();
        }, onSocketClose: () => this.#u(), readyState: Ai.CONNECTING, socket: null, closeState: /* @__PURE__ */ new Set(), controller: null, wasEverConnected: false };
        #o;
        constructor(e, r = void 0) {
          nS || (process.emitWarning("WebSocketStream is experimental! Expect it to change at any time.", { code: "UNDICI-WSS" }), nS = true), Pe.argumentLengthCheck(arguments, 1, "WebSocket"), e = Pe.converters.USVString(e), r !== null && (r = Pe.converters.WebSocketStreamOptions(r));
          let n = tS.settingsObject.baseUrl, A = jJ(e, n), i = r.protocols;
          if (i.length !== new Set(i.map((o) => o.toLowerCase())).size) throw new DOMException("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
          if (i.length > 0 && !i.every((o) => ZJ(o))) throw new DOMException("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
          if (this.#e = A.toString(), this.#t = kh(), this.#r = kh(), r.signal != null) {
            let o = r.signal;
            if (o.aborted) {
              this.#t.reject(o.reason), this.#r.reject(o.reason);
              return;
            }
            o.addEventListener("abort", () => {
              XJ(this.#s.readyState) || (Mh(this.#s), this.#s.readyState = Ai.CLOSING, this.#t.reject(o.reason), this.#r.reject(o.reason), this.#a = true);
            }, { once: true });
          }
          let s = tS.settingsObject;
          this.#s.controller = KJ(A, i, s, this.#s, r);
        }
        get url() {
          return this.#e.toString();
        }
        get opened() {
          return this.#t.promise;
        }
        get closed() {
          return this.#r.promise;
        }
        close(e = void 0) {
          e !== null && (e = Pe.converters.WebSocketCloseInfo(e));
          let r = e.closeCode ?? null, n = e.reason;
          Lh(this.#s, r, n, true);
        }
        #c(e) {
          let r = kh(), n = null, A = null;
          if (ArrayBuffer.isView(e) || zJ.isArrayBuffer(e)) n = new Uint8Array(ArrayBuffer.isView(e) ? new Uint8Array(e.buffer, e.byteOffset, e.byteLength) : e), A = Bl.BINARY;
          else {
            let i;
            try {
              i = Pe.converters.DOMString(e);
            } catch (s) {
              r.reject(s);
              return;
            }
            n = new TextEncoder().encode(i), A = Bl.TEXT;
          }
          if (!this.#s.closeState.has(ii.SENT) && !this.#s.closeState.has(ii.RECEIVED)) {
            let i = new eW(n);
            this.#s.socket.write(i.createFrame(A), () => {
              r.resolve(void 0);
            });
          }
          return r;
        }
        #g(e, r) {
          this.#s.socket = e.socket;
          let n = new tW(this.#s, r);
          n.on("drain", () => this.#s.onParserDrain()), n.on("error", (a) => this.#s.onParserError(a)), this.#o = n, this.#s.readyState = Ai.OPEN;
          let A = r ?? "", i = e.headersList.get("sec-websocket-protocol") ?? "", s = new ReadableStream({ start: (a) => {
            this.#i = a;
          }, pull(a) {
            let c;
            for (; a.desiredSize > 0 && (c = e.socket.read()) !== null; ) a.enqueue(c);
          }, cancel: (a) => this.#d(a) }), o = new WritableStream({ write: (a) => this.#c(a), close: () => Lh(this.#s, null, null), abort: (a) => this.#E(a) });
          this.#n = s, this.#A = o, this.#t.resolve({ extensions: A, protocol: i, readable: s, writable: o });
        }
        #l(e, r) {
          if (this.#s.readyState !== Ai.OPEN) return;
          let n;
          if (e === Bl.TEXT) try {
            n = $J(r);
          } catch {
            Mh(this.#s, "Received invalid UTF-8 in text frame.");
            return;
          }
          else e === Bl.BINARY && (n = new Uint8Array(r.buffer, r.byteOffset, r.byteLength));
          this.#i.enqueue(n);
        }
        #u() {
          let e = this.#s.closeState.has(ii.SENT) && this.#s.closeState.has(ii.RECEIVED);
          if (this.#s.readyState = Ai.CLOSED, this.#a) return;
          this.#s.wasEverConnected || this.#t.reject(new rW("Socket never opened"));
          let r = this.#o.closingInfo, n = r?.code ?? 1005;
          !this.#s.closeState.has(ii.SENT) && !this.#s.closeState.has(ii.RECEIVED) && (n = 1006);
          let A = r?.reason == null ? "" : AW(Buffer.from(r.reason));
          if (e) this.#n.cancel().catch(() => {
          }), this.#A.locked || this.#A.abort(new DOMException("A closed WebSocketStream cannot be written to", "InvalidStateError")), this.#r.resolve({ closeCode: n, reason: A });
          else {
            let i = nW("unclean close", n, A);
            this.#i.error(i), this.#A.abort(i), this.#r.reject(i);
          }
        }
        #E(e) {
          let r = null, n = "";
          Pe.is.WebSocketError(e) && (r = e.closeCode, n = e.reason), Lh(this.#s, r, n);
        }
        #d(e) {
          this.#E(e);
        }
      };
      Object.defineProperties(ml.prototype, { url: pl, opened: pl, closed: pl, close: pl, [Symbol.toStringTag]: { value: "WebSocketStream", writable: false, enumerable: false, configurable: true } });
      Pe.converters.WebSocketStreamOptions = Pe.dictionaryConverter([{ key: "protocols", converter: Pe.sequenceConverter(Pe.converters.USVString), defaultValue: () => [] }, { key: "signal", converter: Pe.nullableConverter(Pe.converters.AbortSignal), defaultValue: () => null }]);
      Pe.converters.WebSocketCloseInfo = Pe.dictionaryConverter([{ key: "closeCode", converter: (t) => Pe.converters["unsigned short"](t, { enforceRange: true }) }, { key: "reason", converter: Pe.converters.USVString, defaultValue: () => "" }]);
      AS.exports = { WebSocketStream: ml };
    });
    var vh = C((gz, sS) => {
      "use strict";
      function iW(t) {
        return t.indexOf("\0") === -1;
      }
      function sW(t) {
        if (t.length === 0) return false;
        for (let e = 0; e < t.length; e++) if (t.charCodeAt(e) < 48 || t.charCodeAt(e) > 57) return false;
        return true;
      }
      function oW(t) {
        return new Promise((e) => {
          setTimeout(e, t).unref();
        });
      }
      sS.exports = { isValidLastEventId: iW, isASCIINumber: sW, delay: oW };
    });
    var lS = C((Ez, cS) => {
      "use strict";
      var { Transform: aW } = __require("node:stream"), { isASCIINumber: oS, isValidLastEventId: aS } = vh(), yr = [239, 187, 191], Ph = 10, yl = 13, cW = 58, lW = 32, Yh = class extends aW {
        state;
        checkBOM = true;
        crlfCheck = false;
        eventEndCheck = false;
        buffer = null;
        pos = 0;
        event = { data: void 0, event: void 0, id: void 0, retry: void 0 };
        constructor(e = {}) {
          e.readableObjectMode = true, super(e), this.state = e.eventSourceSettings || {}, e.push && (this.push = e.push);
        }
        _transform(e, r, n) {
          if (e.length === 0) {
            n();
            return;
          }
          if (this.buffer ? this.buffer = Buffer.concat([this.buffer, e]) : this.buffer = e, this.checkBOM) switch (this.buffer.length) {
            case 1:
              if (this.buffer[0] === yr[0]) {
                n();
                return;
              }
              this.checkBOM = false, n();
              return;
            case 2:
              if (this.buffer[0] === yr[0] && this.buffer[1] === yr[1]) {
                n();
                return;
              }
              this.checkBOM = false;
              break;
            case 3:
              if (this.buffer[0] === yr[0] && this.buffer[1] === yr[1] && this.buffer[2] === yr[2]) {
                this.buffer = Buffer.alloc(0), this.checkBOM = false, n();
                return;
              }
              this.checkBOM = false;
              break;
            default:
              this.buffer[0] === yr[0] && this.buffer[1] === yr[1] && this.buffer[2] === yr[2] && (this.buffer = this.buffer.subarray(3)), this.checkBOM = false;
              break;
          }
          for (; this.pos < this.buffer.length; ) {
            if (this.eventEndCheck) {
              if (this.crlfCheck) {
                if (this.buffer[this.pos] === Ph) {
                  this.buffer = this.buffer.subarray(this.pos + 1), this.pos = 0, this.crlfCheck = false;
                  continue;
                }
                this.crlfCheck = false;
              }
              if (this.buffer[this.pos] === Ph || this.buffer[this.pos] === yl) {
                this.buffer[this.pos] === yl && (this.crlfCheck = true), this.buffer = this.buffer.subarray(this.pos + 1), this.pos = 0, (this.event.data !== void 0 || this.event.event || this.event.id || this.event.retry) && this.processEvent(this.event), this.clearEvent();
                continue;
              }
              this.eventEndCheck = false;
              continue;
            }
            if (this.buffer[this.pos] === Ph || this.buffer[this.pos] === yl) {
              this.buffer[this.pos] === yl && (this.crlfCheck = true), this.parseLine(this.buffer.subarray(0, this.pos), this.event), this.buffer = this.buffer.subarray(this.pos + 1), this.pos = 0, this.eventEndCheck = true;
              continue;
            }
            this.pos++;
          }
          n();
        }
        parseLine(e, r) {
          if (e.length === 0) return;
          let n = e.indexOf(cW);
          if (n === 0) return;
          let A = "", i = "";
          if (n !== -1) {
            A = e.subarray(0, n).toString("utf8");
            let s = n + 1;
            e[s] === lW && ++s, i = e.subarray(s).toString("utf8");
          } else A = e.toString("utf8"), i = "";
          switch (A) {
            case "data":
              r[A] === void 0 ? r[A] = i : r[A] += `
${i}`;
              break;
            case "retry":
              oS(i) && (r[A] = i);
              break;
            case "id":
              aS(i) && (r[A] = i);
              break;
            case "event":
              i.length > 0 && (r[A] = i);
              break;
          }
        }
        processEvent(e) {
          e.retry && oS(e.retry) && (this.state.reconnectionTime = parseInt(e.retry, 10)), e.id && aS(e.id) && (this.state.lastEventId = e.id), e.data !== void 0 && this.push({ type: e.event || "message", options: { data: e.data, lastEventId: this.state.lastEventId, origin: this.state.origin } });
        }
        clearEvent() {
          this.event = { data: void 0, event: void 0, id: void 0, retry: void 0 };
        }
      };
      cS.exports = { EventSourceStream: Yh };
    });
    var CS = C((dz, QS) => {
      "use strict";
      var { pipeline: uW } = __require("node:stream"), { fetching: gW } = Ls(), { makeRequest: EW } = $A(), { webidl: wr } = Te(), { EventSourceStream: dW } = lS(), { parseMIMEType: hW } = tt(), { createFastMessageEvent: fW } = cl(), { isNetworkError: uS } = ks(), { delay: QW } = vh(), { kEnumerableProperty: Yn } = Y(), { environmentSettingsObject: gS } = Ve(), ES = false, dS = 3e3, qs = 0, hS = 1, Js = 2, CW = "anonymous", IW = "use-credentials", si = class t extends EventTarget {
        #e = { open: null, error: null, message: null };
        #t;
        #r = false;
        #n = qs;
        #i = null;
        #A = null;
        #a;
        #s;
        constructor(e, r = {}) {
          super(), wr.util.markAsUncloneable(this);
          let n = "EventSource constructor";
          wr.argumentLengthCheck(arguments, 1, n), ES || (ES = true, process.emitWarning("EventSource is experimental, expect them to change at any time.", { code: "UNDICI-ES" })), e = wr.converters.USVString(e), r = wr.converters.EventSourceInitDict(r, n, "eventSourceInitDict"), this.#a = r.dispatcher, this.#s = { lastEventId: "", reconnectionTime: dS };
          let A = gS, i;
          try {
            i = new URL(e, A.settingsObject.baseUrl), this.#s.origin = i.origin;
          } catch (a) {
            throw new DOMException(a, "SyntaxError");
          }
          this.#t = i.href;
          let s = CW;
          r.withCredentials === true && (s = IW, this.#r = true);
          let o = { redirect: "follow", keepalive: true, mode: "cors", credentials: s === "anonymous" ? "same-origin" : "omit", referrer: "no-referrer" };
          o.client = gS.settingsObject, o.headersList = [["accept", { name: "accept", value: "text/event-stream" }]], o.cache = "no-store", o.initiator = "other", o.urlList = [new URL(this.#t)], this.#i = EW(o), this.#o();
        }
        get readyState() {
          return this.#n;
        }
        get url() {
          return this.#t;
        }
        get withCredentials() {
          return this.#r;
        }
        #o() {
          if (this.#n === Js) return;
          this.#n = qs;
          let e = { request: this.#i, dispatcher: this.#a }, r = (n) => {
            uS(n) && (this.dispatchEvent(new Event("error")), this.close()), this.#c();
          };
          e.processResponseEndOfBody = r, e.processResponse = (n) => {
            if (uS(n)) if (n.aborted) {
              this.close(), this.dispatchEvent(new Event("error"));
              return;
            } else {
              this.#c();
              return;
            }
            let A = n.headersList.get("content-type", true), i = A !== null ? hW(A) : "failure", s = i !== "failure" && i.essence === "text/event-stream";
            if (n.status !== 200 || s === false) {
              this.close(), this.dispatchEvent(new Event("error"));
              return;
            }
            this.#n = hS, this.dispatchEvent(new Event("open")), this.#s.origin = n.urlList[n.urlList.length - 1].origin;
            let o = new dW({ eventSourceSettings: this.#s, push: (a) => {
              this.dispatchEvent(fW(a.type, a.options));
            } });
            uW(n.body.stream, o, (a) => {
              a?.aborted === false && (this.close(), this.dispatchEvent(new Event("error")));
            });
          }, this.#A = gW(e);
        }
        async #c() {
          this.#n !== Js && (this.#n = qs, this.dispatchEvent(new Event("error")), await QW(this.#s.reconnectionTime), this.#n === qs && (this.#s.lastEventId.length && this.#i.headersList.set("last-event-id", this.#s.lastEventId, true), this.#o()));
        }
        close() {
          wr.brandCheck(this, t), this.#n !== Js && (this.#n = Js, this.#A.abort(), this.#i = null);
        }
        get onopen() {
          return this.#e.open;
        }
        set onopen(e) {
          this.#e.open && this.removeEventListener("open", this.#e.open), typeof e == "function" ? (this.#e.open = e, this.addEventListener("open", e)) : this.#e.open = null;
        }
        get onmessage() {
          return this.#e.message;
        }
        set onmessage(e) {
          this.#e.message && this.removeEventListener("message", this.#e.message), typeof e == "function" ? (this.#e.message = e, this.addEventListener("message", e)) : this.#e.message = null;
        }
        get onerror() {
          return this.#e.error;
        }
        set onerror(e) {
          this.#e.error && this.removeEventListener("error", this.#e.error), typeof e == "function" ? (this.#e.error = e, this.addEventListener("error", e)) : this.#e.error = null;
        }
      }, fS = { CONNECTING: { __proto__: null, configurable: false, enumerable: true, value: qs, writable: false }, OPEN: { __proto__: null, configurable: false, enumerable: true, value: hS, writable: false }, CLOSED: { __proto__: null, configurable: false, enumerable: true, value: Js, writable: false } };
      Object.defineProperties(si, fS);
      Object.defineProperties(si.prototype, fS);
      Object.defineProperties(si.prototype, { close: Yn, onerror: Yn, onmessage: Yn, onopen: Yn, readyState: Yn, url: Yn, withCredentials: Yn });
      wr.converters.EventSourceInitDict = wr.dictionaryConverter([{ key: "withCredentials", converter: wr.converters.boolean, defaultValue: () => false }, { key: "dispatcher", converter: wr.converters.any }]);
      QS.exports = { EventSource: si, defaultReconnectionTime: dS };
    });
    var mS = C((hz, T) => {
      "use strict";
      var BW = Qs(), IS = zi(), pW = vA(), mW = Ny(), yW = PA(), wW = $E(), DW = Wy(), RW = Ky(), BS = H(), Dl = Y(), { InvalidArgumentError: wl } = BS, oi = Uw(), SW = ts(), bW = Ud(), NW = dD(), FW = Ld(), TW = Id(), xW = Bc(), { getGlobalDispatcher: pS, setGlobalDispatcher: UW } = kc(), kW = Ns(), MW = Vd();
      Object.assign(IS.prototype, oi);
      T.exports.Dispatcher = IS;
      T.exports.Client = BW;
      T.exports.Pool = pW;
      T.exports.BalancedPool = mW;
      T.exports.Agent = yW;
      T.exports.ProxyAgent = wW;
      T.exports.EnvHttpProxyAgent = DW;
      T.exports.RetryAgent = RW;
      T.exports.RetryHandler = xW;
      T.exports.DecoratorHandler = kW;
      T.exports.RedirectHandler = MW;
      T.exports.interceptors = { redirect: RD(), responseError: bD(), retry: FD(), dump: xD(), dns: kD(), cache: $D() };
      T.exports.cacheStores = { MemoryCacheStore: $d() };
      var LW = e0();
      T.exports.cacheStores.SqliteCacheStore = LW;
      T.exports.buildConnector = SW;
      T.exports.errors = BS;
      T.exports.util = { parseHeaders: Dl.parseHeaders, headerNameToString: Dl.headerNameToString };
      function Ws(t) {
        return (e, r, n) => {
          if (typeof r == "function" && (n = r, r = null), !e || typeof e != "string" && typeof e != "object" && !(e instanceof URL)) throw new wl("invalid url");
          if (r != null && typeof r != "object") throw new wl("invalid opts");
          if (r && r.path != null) {
            if (typeof r.path != "string") throw new wl("invalid opts.path");
            let s = r.path;
            r.path.startsWith("/") || (s = `/${s}`), e = new URL(Dl.parseOrigin(e).origin + s);
          } else r || (r = typeof e == "object" ? e : {}), e = Dl.parseURL(e);
          let { agent: A, dispatcher: i = pS() } = r;
          if (A) throw new wl("unsupported opts.agent. Did you mean opts.client?");
          return t.call(i, { ...r, origin: e.origin, path: e.search ? `${e.pathname}${e.search}` : e.pathname, method: r.method || (r.body ? "PUT" : "GET") }, n);
        };
      }
      T.exports.setGlobalDispatcher = UW;
      T.exports.getGlobalDispatcher = pS;
      var vW = Ls().fetch;
      T.exports.fetch = async function(e, r = void 0) {
        try {
          return await vW(e, r);
        } catch (n) {
          throw n && typeof n == "object" && Error.captureStackTrace(n), n;
        }
      };
      T.exports.Headers = Tn().Headers;
      T.exports.Response = ks().Response;
      T.exports.Request = $A().Request;
      T.exports.FormData = Za().FormData;
      var { setGlobalOrigin: PW, getGlobalOrigin: YW } = $g();
      T.exports.setGlobalOrigin = PW;
      T.exports.getGlobalOrigin = YW;
      var { CacheStorage: GW } = AR(), { kConstruct: OW } = ne();
      T.exports.caches = new GW(OW);
      var { deleteCookie: VW, getCookies: HW, getSetCookies: qW, setCookie: JW, parseCookie: WW } = QR();
      T.exports.deleteCookie = VW;
      T.exports.getCookies = HW;
      T.exports.getSetCookies = qW;
      T.exports.setCookie = JW;
      T.exports.parseCookie = WW;
      var { parseMIMEType: _W, serializeAMimeType: jW } = tt();
      T.exports.parseMIMEType = _W;
      T.exports.serializeAMimeType = jW;
      var { CloseEvent: ZW, ErrorEvent: XW, MessageEvent: $W } = cl();
      T.exports.WebSocket = $R().WebSocket;
      T.exports.CloseEvent = ZW;
      T.exports.ErrorEvent = XW;
      T.exports.MessageEvent = $W;
      T.exports.WebSocketStream = iS().WebSocketStream;
      T.exports.WebSocketError = Uh().WebSocketError;
      T.exports.request = Ws(oi.request);
      T.exports.stream = Ws(oi.stream);
      T.exports.pipeline = Ws(oi.pipeline);
      T.exports.connect = Ws(oi.connect);
      T.exports.upgrade = Ws(oi.upgrade);
      T.exports.MockClient = bW;
      T.exports.MockPool = FW;
      T.exports.MockAgent = NW;
      T.exports.mockErrors = TW;
      var { EventSource: KW } = CS();
      T.exports.EventSource = KW;
    });
    var T_ = {};
    Jn(T_, { DMMF: () => Ui, Debug: () => ce, Decimal: () => Lt, Extensions: () => Ll, MetricsClient: () => QA, PrismaClientInitializationError: () => Z, PrismaClientKnownRequestError: () => Ne, PrismaClientRustPanicError: () => ut, PrismaClientUnknownRequestError: () => pe, PrismaClientValidationError: () => Ue, Public: () => vl, Sql: () => _e, createParam: () => RI, defineDmmfProperty: () => xI, deserializeJsonResponse: () => sA, deserializeRawResult: () => Ul, dmmfToRuntimeDataModel: () => KC, empty: () => MI, getPrismaClient: () => Ib, getRuntime: () => gB, join: () => kI, makeStrictEnum: () => Bb, makeTypedQueryFactory: () => UI, objectEnumValues: () => ca, raw: () => _u, serializeJsonQuery: () => fa, skip: () => ha, sqltag: () => ju, warnEnvConflicts: () => pb, warnOnce: () => Fi });
    module.exports = Sb(T_);
    var Ll = {};
    Jn(Ll, { defineExtension: () => tf, getExtensionContext: () => rf });
    function tf(t) {
      return typeof t == "function" ? t : (e) => e.$extends(t);
    }
    function rf(t) {
      return t;
    }
    var vl = {};
    Jn(vl, { validator: () => nf });
    function nf(...t) {
      return (e) => e;
    }
    var uo = {};
    Jn(uo, { $: () => cf, bgBlack: () => vb, bgBlue: () => Ob, bgCyan: () => Hb, bgGreen: () => Yb, bgMagenta: () => Vb, bgRed: () => Pb, bgWhite: () => qb, bgYellow: () => Gb, black: () => Ub, blue: () => An, bold: () => be, cyan: () => Ar, dim: () => nn, gray: () => hi, green: () => Sr, grey: () => Lb, hidden: () => Tb, inverse: () => Fb, italic: () => Nb, magenta: () => kb, red: () => at, reset: () => bb, strikethrough: () => xb, underline: () => Je, white: () => Mb, yellow: () => nr });
    var Pl;
    var Af;
    var sf;
    var of;
    var af = true;
    typeof process < "u" && ({ FORCE_COLOR: Pl, NODE_DISABLE_COLORS: Af, NO_COLOR: sf, TERM: of } = process.env || {}, af = process.stdout && process.stdout.isTTY);
    var cf = { enabled: !Af && sf == null && of !== "dumb" && (Pl != null && Pl !== "0" || af) };
    function Ae(t, e) {
      let r = new RegExp(`\\x1b\\[${e}m`, "g"), n = `\x1B[${t}m`, A = `\x1B[${e}m`;
      return function(i) {
        return !cf.enabled || i == null ? i : n + (~("" + i).indexOf(A) ? i.replace(r, A + n) : i) + A;
      };
    }
    var bb = Ae(0, 0);
    var be = Ae(1, 22);
    var nn = Ae(2, 22);
    var Nb = Ae(3, 23);
    var Je = Ae(4, 24);
    var Fb = Ae(7, 27);
    var Tb = Ae(8, 28);
    var xb = Ae(9, 29);
    var Ub = Ae(30, 39);
    var at = Ae(31, 39);
    var Sr = Ae(32, 39);
    var nr = Ae(33, 39);
    var An = Ae(34, 39);
    var kb = Ae(35, 39);
    var Ar = Ae(36, 39);
    var Mb = Ae(37, 39);
    var hi = Ae(90, 39);
    var Lb = Ae(90, 39);
    var vb = Ae(40, 49);
    var Pb = Ae(41, 49);
    var Yb = Ae(42, 49);
    var Gb = Ae(43, 49);
    var Ob = Ae(44, 49);
    var Vb = Ae(45, 49);
    var Hb = Ae(46, 49);
    var qb = Ae(47, 49);
    var Jb = 100;
    var lf = ["green", "yellow", "blue", "magenta", "cyan", "red"];
    var fi = [];
    var uf = Date.now();
    var Wb = 0;
    var Yl = typeof process < "u" ? process.env : {};
    globalThis.DEBUG ??= Yl.DEBUG ?? "";
    globalThis.DEBUG_COLORS ??= Yl.DEBUG_COLORS ? Yl.DEBUG_COLORS === "true" : true;
    var Qi = { enable(t) {
      typeof t == "string" && (globalThis.DEBUG = t);
    }, disable() {
      let t = globalThis.DEBUG;
      return globalThis.DEBUG = "", t;
    }, enabled(t) {
      let e = globalThis.DEBUG.split(",").map((A) => A.replace(/[.+?^${}()|[\]\\]/g, "\\$&")), r = e.some((A) => A === "" || A[0] === "-" ? false : t.match(RegExp(A.split("*").join(".*") + "$"))), n = e.some((A) => A === "" || A[0] !== "-" ? false : t.match(RegExp(A.slice(1).split("*").join(".*") + "$")));
      return r && !n;
    }, log: (...t) => {
      let [e, r, ...n] = t;
      (console.warn ?? console.log)(`${e} ${r}`, ...n);
    }, formatters: {} };
    function _b(t) {
      let e = { color: lf[Wb++ % lf.length], enabled: Qi.enabled(t), namespace: t, log: Qi.log, extend: () => {
      } }, r = (...n) => {
        let { enabled: A, namespace: i, color: s, log: o } = e;
        if (n.length !== 0 && fi.push([i, ...n]), fi.length > Jb && fi.shift(), Qi.enabled(i) || A) {
          let a = n.map((l) => typeof l == "string" ? l : jb(l)), c = `+${Date.now() - uf}ms`;
          uf = Date.now(), globalThis.DEBUG_COLORS ? o(uo[s](be(i)), ...a, uo[s](c)) : o(i, ...a, c);
        }
      };
      return new Proxy(r, { get: (n, A) => e[A], set: (n, A, i) => e[A] = i });
    }
    var ce = new Proxy(_b, { get: (t, e) => Qi[e], set: (t, e, r) => Qi[e] = r });
    function jb(t, e = 2) {
      let r = /* @__PURE__ */ new Set();
      return JSON.stringify(t, (n, A) => {
        if (typeof A == "object" && A !== null) {
          if (r.has(A)) return "[Circular *]";
          r.add(A);
        } else if (typeof A == "bigint") return A.toString();
        return A;
      }, e);
    }
    function gf(t = 7500) {
      let e = fi.map(([r, ...n]) => `${r} ${n.map((A) => typeof A == "string" ? A : JSON.stringify(A)).join(" ")}`).join(`
`);
      return e.length < t ? e : e.slice(-t);
    }
    function Ef() {
      fi.length = 0;
    }
    var Wn = ce;
    var Gl = ["darwin", "darwin-arm64", "debian-openssl-1.0.x", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "rhel-openssl-1.0.x", "rhel-openssl-1.1.x", "rhel-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "linux-arm64-openssl-1.0.x", "linux-arm64-openssl-3.0.x", "linux-arm-openssl-1.1.x", "linux-arm-openssl-1.0.x", "linux-arm-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-1.1.x", "linux-musl-arm64-openssl-3.0.x", "linux-nixos", "linux-static-x64", "linux-static-arm64", "windows", "freebsd11", "freebsd12", "freebsd13", "freebsd14", "freebsd15", "openbsd", "netbsd", "arm"];
    var go = "libquery_engine";
    function Eo(t, e) {
      let r = e === "url";
      return t.includes("windows") ? r ? "query_engine.dll.node" : `query_engine-${t}.dll.node` : t.includes("darwin") ? r ? `${go}.dylib.node` : `${go}-${t}.dylib.node` : r ? `${go}.so.node` : `${go}-${t}.so.node`;
    }
    var Qf = G(__require("node:child_process"));
    var Jl = G(__require("node:fs/promises"));
    var Bo = G(__require("node:os"));
    var ir = Symbol.for("@ts-pattern/matcher");
    var Zb = Symbol.for("@ts-pattern/isVariadic");
    var fo = "@ts-pattern/anonymous-select-key";
    var Ol = (t) => !!(t && typeof t == "object");
    var ho = (t) => t && !!t[ir];
    var xt = (t, e, r) => {
      if (ho(t)) {
        let n = t[ir](), { matched: A, selections: i } = n.match(e);
        return A && i && Object.keys(i).forEach((s) => r(s, i[s])), A;
      }
      if (Ol(t)) {
        if (!Ol(e)) return false;
        if (Array.isArray(t)) {
          if (!Array.isArray(e)) return false;
          let n = [], A = [], i = [];
          for (let s of t.keys()) {
            let o = t[s];
            ho(o) && o[Zb] ? i.push(o) : i.length ? A.push(o) : n.push(o);
          }
          if (i.length) {
            if (i.length > 1) throw new Error("Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.");
            if (e.length < n.length + A.length) return false;
            let s = e.slice(0, n.length), o = A.length === 0 ? [] : e.slice(-A.length), a = e.slice(n.length, A.length === 0 ? 1 / 0 : -A.length);
            return n.every((c, l) => xt(c, s[l], r)) && A.every((c, l) => xt(c, o[l], r)) && (i.length === 0 || xt(i[0], a, r));
          }
          return t.length === e.length && t.every((s, o) => xt(s, e[o], r));
        }
        return Reflect.ownKeys(t).every((n) => {
          let A = t[n];
          return (n in e || ho(i = A) && i[ir]().matcherType === "optional") && xt(A, e[n], r);
          var i;
        });
      }
      return Object.is(e, t);
    };
    var xr = (t) => {
      var e, r, n;
      return Ol(t) ? ho(t) ? (e = (r = (n = t[ir]()).getSelectionKeys) == null ? void 0 : r.call(n)) != null ? e : [] : Array.isArray(t) ? Ci(t, xr) : Ci(Object.values(t), xr) : [];
    };
    var Ci = (t, e) => t.reduce((r, n) => r.concat(e(n)), []);
    function ct(t) {
      return Object.assign(t, { optional: () => Xb(t), and: (e) => le(t, e), or: (e) => $b(t, e), select: (e) => e === void 0 ? df(t) : df(e, t) });
    }
    function Xb(t) {
      return ct({ [ir]: () => ({ match: (e) => {
        let r = {}, n = (A, i) => {
          r[A] = i;
        };
        return e === void 0 ? (xr(t).forEach((A) => n(A, void 0)), { matched: true, selections: r }) : { matched: xt(t, e, n), selections: r };
      }, getSelectionKeys: () => xr(t), matcherType: "optional" }) });
    }
    function le(...t) {
      return ct({ [ir]: () => ({ match: (e) => {
        let r = {}, n = (A, i) => {
          r[A] = i;
        };
        return { matched: t.every((A) => xt(A, e, n)), selections: r };
      }, getSelectionKeys: () => Ci(t, xr), matcherType: "and" }) });
    }
    function $b(...t) {
      return ct({ [ir]: () => ({ match: (e) => {
        let r = {}, n = (A, i) => {
          r[A] = i;
        };
        return Ci(t, xr).forEach((A) => n(A, void 0)), { matched: t.some((A) => xt(A, e, n)), selections: r };
      }, getSelectionKeys: () => Ci(t, xr), matcherType: "or" }) });
    }
    function j(t) {
      return { [ir]: () => ({ match: (e) => ({ matched: !!t(e) }) }) };
    }
    function df(...t) {
      let e = typeof t[0] == "string" ? t[0] : void 0, r = t.length === 2 ? t[1] : typeof t[0] == "string" ? void 0 : t[0];
      return ct({ [ir]: () => ({ match: (n) => {
        let A = { [e ?? fo]: n };
        return { matched: r === void 0 || xt(r, n, (i, s) => {
          A[i] = s;
        }), selections: A };
      }, getSelectionKeys: () => [e ?? fo].concat(r === void 0 ? [] : xr(r)) }) });
    }
    function Ft(t) {
      return typeof t == "number";
    }
    function br(t) {
      return typeof t == "string";
    }
    function Nr(t) {
      return typeof t == "bigint";
    }
    var H_ = ct(j(function(t) {
      return true;
    }));
    var Fr = (t) => Object.assign(ct(t), { startsWith: (e) => {
      return Fr(le(t, (r = e, j((n) => br(n) && n.startsWith(r)))));
      var r;
    }, endsWith: (e) => {
      return Fr(le(t, (r = e, j((n) => br(n) && n.endsWith(r)))));
      var r;
    }, minLength: (e) => Fr(le(t, ((r) => j((n) => br(n) && n.length >= r))(e))), length: (e) => Fr(le(t, ((r) => j((n) => br(n) && n.length === r))(e))), maxLength: (e) => Fr(le(t, ((r) => j((n) => br(n) && n.length <= r))(e))), includes: (e) => {
      return Fr(le(t, (r = e, j((n) => br(n) && n.includes(r)))));
      var r;
    }, regex: (e) => {
      return Fr(le(t, (r = e, j((n) => br(n) && !!n.match(r)))));
      var r;
    } });
    var q_ = Fr(j(br));
    var Tt = (t) => Object.assign(ct(t), { between: (e, r) => Tt(le(t, ((n, A) => j((i) => Ft(i) && n <= i && A >= i))(e, r))), lt: (e) => Tt(le(t, ((r) => j((n) => Ft(n) && n < r))(e))), gt: (e) => Tt(le(t, ((r) => j((n) => Ft(n) && n > r))(e))), lte: (e) => Tt(le(t, ((r) => j((n) => Ft(n) && n <= r))(e))), gte: (e) => Tt(le(t, ((r) => j((n) => Ft(n) && n >= r))(e))), int: () => Tt(le(t, j((e) => Ft(e) && Number.isInteger(e)))), finite: () => Tt(le(t, j((e) => Ft(e) && Number.isFinite(e)))), positive: () => Tt(le(t, j((e) => Ft(e) && e > 0))), negative: () => Tt(le(t, j((e) => Ft(e) && e < 0))) });
    var J_ = Tt(j(Ft));
    var Tr = (t) => Object.assign(ct(t), { between: (e, r) => Tr(le(t, ((n, A) => j((i) => Nr(i) && n <= i && A >= i))(e, r))), lt: (e) => Tr(le(t, ((r) => j((n) => Nr(n) && n < r))(e))), gt: (e) => Tr(le(t, ((r) => j((n) => Nr(n) && n > r))(e))), lte: (e) => Tr(le(t, ((r) => j((n) => Nr(n) && n <= r))(e))), gte: (e) => Tr(le(t, ((r) => j((n) => Nr(n) && n >= r))(e))), positive: () => Tr(le(t, j((e) => Nr(e) && e > 0))), negative: () => Tr(le(t, j((e) => Nr(e) && e < 0))) });
    var W_ = Tr(j(Nr));
    var __ = ct(j(function(t) {
      return typeof t == "boolean";
    }));
    var j_ = ct(j(function(t) {
      return typeof t == "symbol";
    }));
    var Z_ = ct(j(function(t) {
      return t == null;
    }));
    var X_ = ct(j(function(t) {
      return t != null;
    }));
    var Vl = class extends Error {
      constructor(e) {
        let r;
        try {
          r = JSON.stringify(e);
        } catch {
          r = e;
        }
        super(`Pattern matching error: no pattern matches value ${r}`), this.input = void 0, this.input = e;
      }
    };
    var Hl = { matched: false, value: void 0 };
    function Qo(t) {
      return new ql(t, Hl);
    }
    var ql = class t {
      constructor(e, r) {
        this.input = void 0, this.state = void 0, this.input = e, this.state = r;
      }
      with(...e) {
        if (this.state.matched) return this;
        let r = e[e.length - 1], n = [e[0]], A;
        e.length === 3 && typeof e[1] == "function" ? A = e[1] : e.length > 2 && n.push(...e.slice(1, e.length - 1));
        let i = false, s = {}, o = (c, l) => {
          i = true, s[c] = l;
        }, a = !n.some((c) => xt(c, this.input, o)) || A && !A(this.input) ? Hl : { matched: true, value: r(i ? fo in s ? s[fo] : s : this.input, this.input) };
        return new t(this.input, a);
      }
      when(e, r) {
        if (this.state.matched) return this;
        let n = !!e(this.input);
        return new t(this.input, n ? { matched: true, value: r(this.input, this.input) } : Hl);
      }
      otherwise(e) {
        return this.state.matched ? this.state.value : e(this.input);
      }
      exhaustive() {
        if (this.state.matched) return this.state.value;
        throw new Vl(this.input);
      }
      run() {
        return this.exhaustive();
      }
      returnType() {
        return this;
      }
    };
    var Cf = __require("node:util");
    var Kb = { warn: nr("prisma:warn") };
    var zb = { warn: () => !process.env.PRISMA_DISABLE_WARNINGS };
    function Co(t, ...e) {
      zb.warn() && console.warn(`${Kb.warn} ${t}`, ...e);
    }
    var eN = (0, Cf.promisify)(Qf.default.exec);
    var Ge = Wn("prisma:get-platform");
    var tN = ["1.0.x", "1.1.x", "3.0.x"];
    async function If() {
      let t = Bo.default.platform(), e = process.arch;
      if (t === "freebsd") {
        let s = await po("freebsd-version");
        if (s && s.trim().length > 0) {
          let a = /^(\d+)\.?/.exec(s);
          if (a) return { platform: "freebsd", targetDistro: `freebsd${a[1]}`, arch: e };
        }
      }
      if (t !== "linux") return { platform: t, arch: e };
      let r = await nN(), n = await gN(), A = iN({ arch: e, archFromUname: n, familyDistro: r.familyDistro }), { libssl: i } = await sN(A);
      return { platform: "linux", libssl: i, arch: e, archFromUname: n, ...r };
    }
    function rN(t) {
      let e = /^ID="?([^"\n]*)"?$/im, r = /^ID_LIKE="?([^"\n]*)"?$/im, n = e.exec(t), A = n && n[1] && n[1].toLowerCase() || "", i = r.exec(t), s = i && i[1] && i[1].toLowerCase() || "", o = Qo({ id: A, idLike: s }).with({ id: "alpine" }, ({ id: a }) => ({ targetDistro: "musl", familyDistro: a, originalDistro: a })).with({ id: "raspbian" }, ({ id: a }) => ({ targetDistro: "arm", familyDistro: "debian", originalDistro: a })).with({ id: "nixos" }, ({ id: a }) => ({ targetDistro: "nixos", originalDistro: a, familyDistro: "nixos" })).with({ id: "debian" }, { id: "ubuntu" }, ({ id: a }) => ({ targetDistro: "debian", familyDistro: "debian", originalDistro: a })).with({ id: "rhel" }, { id: "centos" }, { id: "fedora" }, ({ id: a }) => ({ targetDistro: "rhel", familyDistro: "rhel", originalDistro: a })).when(({ idLike: a }) => a.includes("debian") || a.includes("ubuntu"), ({ id: a }) => ({ targetDistro: "debian", familyDistro: "debian", originalDistro: a })).when(({ idLike: a }) => A === "arch" || a.includes("arch"), ({ id: a }) => ({ targetDistro: "debian", familyDistro: "arch", originalDistro: a })).when(({ idLike: a }) => a.includes("centos") || a.includes("fedora") || a.includes("rhel") || a.includes("suse"), ({ id: a }) => ({ targetDistro: "rhel", familyDistro: "rhel", originalDistro: a })).otherwise(({ id: a }) => ({ targetDistro: void 0, familyDistro: void 0, originalDistro: a }));
      return Ge(`Found distro info:
${JSON.stringify(o, null, 2)}`), o;
    }
    async function nN() {
      let t = "/etc/os-release";
      try {
        let e = await Jl.default.readFile(t, { encoding: "utf-8" });
        return rN(e);
      } catch {
        return { targetDistro: void 0, familyDistro: void 0, originalDistro: void 0 };
      }
    }
    function AN(t) {
      let e = /^OpenSSL\s(\d+\.\d+)\.\d+/.exec(t);
      if (e) {
        let r = `${e[1]}.x`;
        return Bf(r);
      }
    }
    function hf(t) {
      let e = /libssl\.so\.(\d)(\.\d)?/.exec(t);
      if (e) {
        let r = `${e[1]}${e[2] ?? ".0"}.x`;
        return Bf(r);
      }
    }
    function Bf(t) {
      let e = (() => {
        if (pf(t)) return t;
        let r = t.split(".");
        return r[1] = "0", r.join(".");
      })();
      if (tN.includes(e)) return e;
    }
    function iN(t) {
      return Qo(t).with({ familyDistro: "musl" }, () => (Ge('Trying platform-specific paths for "alpine"'), ["/lib", "/usr/lib"])).with({ familyDistro: "debian" }, ({ archFromUname: e }) => (Ge('Trying platform-specific paths for "debian" (and "ubuntu")'), [`/usr/lib/${e}-linux-gnu`, `/lib/${e}-linux-gnu`])).with({ familyDistro: "rhel" }, () => (Ge('Trying platform-specific paths for "rhel"'), ["/lib64", "/usr/lib64"])).otherwise(({ familyDistro: e, arch: r, archFromUname: n }) => (Ge(`Don't know any platform-specific paths for "${e}" on ${r} (${n})`), []));
    }
    async function sN(t) {
      let e = 'grep -v "libssl.so.0"', r = await ff(t);
      if (r) {
        Ge(`Found libssl.so file using platform-specific paths: ${r}`);
        let i = hf(r);
        if (Ge(`The parsed libssl version is: ${i}`), i) return { libssl: i, strategy: "libssl-specific-path" };
      }
      Ge('Falling back to "ldconfig" and other generic paths');
      let n = await po(`ldconfig -p | sed "s/.*=>s*//" | sed "s|.*/||" | grep libssl | sort | ${e}`);
      if (n || (n = await ff(["/lib64", "/usr/lib64", "/lib", "/usr/lib"])), n) {
        Ge(`Found libssl.so file using "ldconfig" or other generic paths: ${n}`);
        let i = hf(n);
        if (Ge(`The parsed libssl version is: ${i}`), i) return { libssl: i, strategy: "ldconfig" };
      }
      let A = await po("openssl version -v");
      if (A) {
        Ge(`Found openssl binary with version: ${A}`);
        let i = AN(A);
        if (Ge(`The parsed openssl version is: ${i}`), i) return { libssl: i, strategy: "openssl-binary" };
      }
      return Ge("Couldn't find any version of libssl or OpenSSL in the system"), {};
    }
    async function ff(t) {
      for (let e of t) {
        let r = await oN(e);
        if (r) return r;
      }
    }
    async function oN(t) {
      try {
        return (await Jl.default.readdir(t)).find((r) => r.startsWith("libssl.so.") && !r.startsWith("libssl.so.0"));
      } catch (e) {
        if (e.code === "ENOENT") return;
        throw e;
      }
    }
    async function sn() {
      let { binaryTarget: t } = await cN();
      return t;
    }
    function aN(t) {
      return t.binaryTarget !== void 0;
    }
    var Io = {};
    async function cN() {
      if (aN(Io)) return Promise.resolve({ ...Io, memoized: true });
      let t = await If(), e = lN(t);
      return Io = { ...t, binaryTarget: e }, { ...Io, memoized: false };
    }
    function lN(t) {
      let { platform: e, arch: r, archFromUname: n, libssl: A, targetDistro: i, familyDistro: s, originalDistro: o } = t;
      e === "linux" && !["x64", "arm64"].includes(r) && Co(`Prisma only officially supports Linux on amd64 (x86_64) and arm64 (aarch64) system architectures (detected "${r}" instead). If you are using your own custom Prisma engines, you can ignore this warning, as long as you've compiled the engines for your system architecture "${n}".`);
      let a = "1.1.x";
      if (e === "linux" && A === void 0) {
        let l = Qo({ familyDistro: s }).with({ familyDistro: "debian" }, () => "Please manually install OpenSSL via `apt-get update -y && apt-get install -y openssl` and try installing Prisma again. If you're running Prisma on Docker, add this command to your Dockerfile, or switch to an image that already has OpenSSL installed.").otherwise(() => "Please manually install OpenSSL and try installing Prisma again.");
        Co(`Prisma failed to detect the libssl/openssl version to use, and may not work as expected. Defaulting to "openssl-${a}".
${l}`);
      }
      let c = "debian";
      if (e === "linux" && i === void 0 && Ge(`Distro is "${o}". Falling back to Prisma engines built for "${c}".`), e === "darwin" && r === "arm64") return "darwin-arm64";
      if (e === "darwin") return "darwin";
      if (e === "win32") return "windows";
      if (e === "freebsd") return i;
      if (e === "openbsd") return "openbsd";
      if (e === "netbsd") return "netbsd";
      if (e === "linux" && i === "nixos") return "linux-nixos";
      if (e === "linux" && r === "arm64") return `${i === "musl" ? "linux-musl-arm64" : "linux-arm64"}-openssl-${A || a}`;
      if (e === "linux" && r === "arm") return `linux-arm-openssl-${A || a}`;
      if (e === "linux" && i === "musl") {
        let l = "linux-musl";
        return !A || pf(A) ? l : `${l}-openssl-${A}`;
      }
      return e === "linux" && i && A ? `${i}-openssl-${A}` : (e !== "linux" && Co(`Prisma detected unknown OS "${e}" and may not work as expected. Defaulting to "linux".`), A ? `${c}-openssl-${A}` : i ? `${i}-openssl-${a}` : `${c}-openssl-${a}`);
    }
    async function uN(t) {
      try {
        return await t();
      } catch {
        return;
      }
    }
    function po(t) {
      return uN(async () => {
        let e = await eN(t);
        return Ge(`Command "${t}" successfully returned "${e.stdout}"`), e.stdout;
      });
    }
    async function gN() {
      return typeof Bo.default.machine == "function" ? Bo.default.machine() : (await po("uname -m"))?.trim();
    }
    function pf(t) {
      return t.startsWith("1.");
    }
    var oT = AC();
    var gu = oT.version;
    function tA(t) {
      let e = aT();
      return e || (t?.config.engineType === "library" ? "library" : t?.config.engineType === "binary" ? "binary" : t?.config.engineType === "client" ? "client" : cT(t));
    }
    function aT() {
      let t = process.env.PRISMA_CLIENT_ENGINE_TYPE;
      return t === "library" ? "library" : t === "binary" ? "binary" : t === "client" ? "client" : void 0;
    }
    function cT(t) {
      return t?.previewFeatures.includes("queryCompiler") ? "client" : "library";
    }
    var CT = G(Po());
    var ie = G(__require("node:path"));
    var IT = G(Po());
    var aj = ce("prisma:engines");
    function EC() {
      return ie.default.join(__dirname, "../");
    }
    ie.default.join(__dirname, "../query-engine-darwin");
    ie.default.join(__dirname, "../query-engine-darwin-arm64");
    ie.default.join(__dirname, "../query-engine-debian-openssl-1.0.x");
    ie.default.join(__dirname, "../query-engine-debian-openssl-1.1.x");
    ie.default.join(__dirname, "../query-engine-debian-openssl-3.0.x");
    ie.default.join(__dirname, "../query-engine-linux-static-x64");
    ie.default.join(__dirname, "../query-engine-linux-static-arm64");
    ie.default.join(__dirname, "../query-engine-rhel-openssl-1.0.x");
    ie.default.join(__dirname, "../query-engine-rhel-openssl-1.1.x");
    ie.default.join(__dirname, "../query-engine-rhel-openssl-3.0.x");
    ie.default.join(__dirname, "../libquery_engine-darwin.dylib.node");
    ie.default.join(__dirname, "../libquery_engine-darwin-arm64.dylib.node");
    ie.default.join(__dirname, "../libquery_engine-debian-openssl-1.0.x.so.node");
    ie.default.join(__dirname, "../libquery_engine-debian-openssl-1.1.x.so.node");
    ie.default.join(__dirname, "../libquery_engine-debian-openssl-3.0.x.so.node");
    ie.default.join(__dirname, "../libquery_engine-linux-arm64-openssl-1.0.x.so.node");
    ie.default.join(__dirname, "../libquery_engine-linux-arm64-openssl-1.1.x.so.node");
    ie.default.join(__dirname, "../libquery_engine-linux-arm64-openssl-3.0.x.so.node");
    ie.default.join(__dirname, "../libquery_engine-linux-musl.so.node");
    ie.default.join(__dirname, "../libquery_engine-linux-musl-openssl-3.0.x.so.node");
    ie.default.join(__dirname, "../libquery_engine-rhel-openssl-1.0.x.so.node");
    ie.default.join(__dirname, "../libquery_engine-rhel-openssl-1.1.x.so.node");
    ie.default.join(__dirname, "../libquery_engine-rhel-openssl-3.0.x.so.node");
    ie.default.join(__dirname, "../query_engine-windows.dll.node");
    var fu = G(__require("node:fs"));
    var dC = Wn("chmodPlusX");
    function Qu(t) {
      if (process.platform === "win32") return;
      let e = fu.default.statSync(t), r = e.mode | 64 | 8 | 1;
      if (e.mode === r) {
        dC(`Execution permissions of ${t} are fine`);
        return;
      }
      let n = r.toString(8).slice(-3);
      dC(`Have to call chmodPlusX on ${t}`), fu.default.chmodSync(t, n);
    }
    var QC = G(fC(), 1);
    function Cu(t) {
      let e = (0, QC.default)(t);
      if (e === 0) return t;
      let r = new RegExp(`^[ \\t]{${e}}`, "gm");
      return t.replace(r, "");
    }
    var CC = "prisma+postgres";
    var Yo = `${CC}:`;
    function Go(t) {
      return t?.toString().startsWith(`${Yo}//`) ?? false;
    }
    function Iu(t) {
      if (!Go(t)) return false;
      let { host: e } = new URL(t);
      return e.includes("localhost") || e.includes("127.0.0.1") || e.includes("[::1]");
    }
    var BC = G(Bu());
    function mu(t) {
      return String(new pu(t));
    }
    var pu = class {
      constructor(e) {
        this.config = e;
      }
      toString() {
        let { config: e } = this, r = e.provider.fromEnvVar ? `env("${e.provider.fromEnvVar}")` : e.provider.value, n = JSON.parse(JSON.stringify({ provider: r, binaryTargets: BT(e.binaryTargets) }));
        return `generator ${e.name} {
${(0, BC.default)(pT(n), 2)}
}`;
      }
    };
    function BT(t) {
      let e;
      if (t.length > 0) {
        let r = t.find((n) => n.fromEnvVar !== null);
        r ? e = `env("${r.fromEnvVar}")` : e = t.map((n) => n.native ? "native" : n.value);
      } else e = void 0;
      return e;
    }
    function pT(t) {
      let e = Object.keys(t).reduce((r, n) => Math.max(r, n.length), 0);
      return Object.entries(t).map(([r, n]) => `${r.padEnd(e)} = ${mT(n)}`).join(`
`);
    }
    function mT(t) {
      return JSON.parse(JSON.stringify(t, (e, r) => Array.isArray(r) ? `[${r.map((n) => JSON.stringify(n)).join(", ")}]` : JSON.stringify(r)));
    }
    var Di = {};
    Jn(Di, { error: () => DT, info: () => wT, log: () => yT, query: () => RT, should: () => pC, tags: () => wi, warn: () => yu });
    var wi = { error: at("prisma:error"), warn: nr("prisma:warn"), info: Ar("prisma:info"), query: An("prisma:query") };
    var pC = { warn: () => !process.env.PRISMA_DISABLE_WARNINGS };
    function yT(...t) {
      console.log(...t);
    }
    function yu(t, ...e) {
      pC.warn() && console.warn(`${wi.warn} ${t}`, ...e);
    }
    function wT(t, ...e) {
      console.info(`${wi.info} ${t}`, ...e);
    }
    function DT(t, ...e) {
      console.error(`${wi.error} ${t}`, ...e);
    }
    function RT(t, ...e) {
      console.log(`${wi.query} ${t}`, ...e);
    }
    function sr(t, e) {
      throw new Error(e);
    }
    var Oo = G(__require("node:stream"));
    var DC = G(__require("node:util"));
    function Ri(t, e) {
      return bT(t, e);
    }
    function bT(t, e) {
      return t ? NT(t, e) : new ln(e);
    }
    function NT(t, e) {
      if (!t) throw new Error("expected readStream");
      if (!t.readable) throw new Error("readStream must be readable");
      let r = new ln(e);
      return t.pipe(r), r;
    }
    function ln(t) {
      Oo.default.Transform.call(this, t), t = t || {}, this._readableState.objectMode = true, this._lineBuffer = [], this._keepEmptyLines = t.keepEmptyLines || false, this._lastChunkEndedWithCR = false, this.on("pipe", function(e) {
        this.encoding || e instanceof Oo.default.Readable && (this.encoding = e._readableState.encoding);
      });
    }
    DC.default.inherits(ln, Oo.default.Transform);
    ln.prototype._transform = function(t, e, r) {
      e = e || "utf8", Buffer.isBuffer(t) && (e == "buffer" ? (t = t.toString(), e = "utf8") : t = t.toString(e)), this._chunkEncoding = e;
      let n = t.split(/\r\n|\r|\n/g);
      this._lastChunkEndedWithCR && t[0] == `
` && n.shift(), this._lineBuffer.length > 0 && (this._lineBuffer[this._lineBuffer.length - 1] += n[0], n.shift()), this._lastChunkEndedWithCR = t[t.length - 1] == "\r", this._lineBuffer = this._lineBuffer.concat(n), this._pushBuffer(e, 1, r);
    };
    ln.prototype._pushBuffer = function(t, e, r) {
      for (; this._lineBuffer.length > e; ) {
        let n = this._lineBuffer.shift();
        if ((this._keepEmptyLines || n.length > 0) && !this.push(this._reencode(n, t))) {
          let A = this;
          setImmediate(function() {
            A._pushBuffer(t, e, r);
          });
          return;
        }
      }
      r();
    };
    ln.prototype._flush = function(t) {
      this._pushBuffer(this._chunkEncoding, 0, t);
    };
    ln.prototype._reencode = function(t, e) {
      return this.encoding && this.encoding != e ? Buffer.from(t, e).toString(this.encoding) : this.encoding ? t : Buffer.from(t, e);
    };
    var Si = G(__require("node:path"));
    function Du(t) {
      return Si.default.sep === Si.default.posix.sep ? t : t.split(Si.default.sep).join(Si.default.posix.sep);
    }
    var Nu = G(TC());
    var Vo = G(__require("node:fs"));
    var rA = G(__require("node:path"));
    function xC(t) {
      let e = t.ignoreProcessEnv ? {} : process.env, r = (n) => n.match(/(.?\${(?:[a-zA-Z0-9_]+)?})/g)?.reduce(function(i, s) {
        let o = /(.?)\${([a-zA-Z0-9_]+)?}/g.exec(s);
        if (!o) return i;
        let a = o[1], c, l;
        if (a === "\\") l = o[0], c = l.replace("\\$", "$");
        else {
          let u = o[2];
          l = o[0].substring(a.length), c = Object.hasOwnProperty.call(e, u) ? e[u] : t.parsed[u] || "", c = r(c);
        }
        return i.replace(l, c);
      }, n) ?? n;
      for (let n in t.parsed) {
        let A = Object.hasOwnProperty.call(e, n) ? e[n] : t.parsed[n];
        t.parsed[n] = r(A);
      }
      for (let n in t.parsed) e[n] = t.parsed[n];
      return t;
    }
    var bu = Wn("prisma:tryLoadEnv");
    function Ni({ rootEnvPath: t, schemaEnvPath: e }, r = { conflictCheck: "none" }) {
      let n = UC(t);
      r.conflictCheck !== "none" && qT(n, e, r.conflictCheck);
      let A = null;
      return kC(n?.path, e) || (A = UC(e)), !n && !A && bu("No Environment variables loaded"), A?.dotenvResult.error ? console.error(at(be("Schema Env Error: ")) + A.dotenvResult.error) : { message: [n?.message, A?.message].filter(Boolean).join(`
`), parsed: { ...n?.dotenvResult?.parsed, ...A?.dotenvResult?.parsed } };
    }
    function qT(t, e, r) {
      let n = t?.dotenvResult.parsed, A = !kC(t?.path, e);
      if (n && e && A && Vo.default.existsSync(e)) {
        let i = Nu.default.parse(Vo.default.readFileSync(e)), s = [];
        for (let o in i) n[o] === i[o] && s.push(o);
        if (s.length > 0) {
          let o = rA.default.relative(process.cwd(), t.path), a = rA.default.relative(process.cwd(), e);
          if (r === "error") {
            let c = `There is a conflict between env var${s.length > 1 ? "s" : ""} in ${Je(o)} and ${Je(a)}
Conflicting env vars:
${s.map((l) => `  ${be(l)}`).join(`
`)}

We suggest to move the contents of ${Je(a)} to ${Je(o)} to consolidate your env vars.
`;
            throw new Error(c);
          } else if (r === "warn") {
            let c = `Conflict for env var${s.length > 1 ? "s" : ""} ${s.map((l) => be(l)).join(", ")} in ${Je(o)} and ${Je(a)}
Env vars from ${Je(a)} overwrite the ones from ${Je(o)}
      `;
            console.warn(`${nr("warn(prisma)")} ${c}`);
          }
        }
      }
    }
    function UC(t) {
      if (JT(t)) {
        bu(`Environment variables loaded from ${t}`);
        let e = Nu.default.config({ path: t, debug: process.env.DOTENV_CONFIG_DEBUG ? true : void 0 });
        return { dotenvResult: xC(e), message: nn(`Environment variables loaded from ${rA.default.relative(process.cwd(), t)}`), path: t };
      } else bu(`Environment variables not found at ${t}`);
      return null;
    }
    function kC(t, e) {
      return t && e && rA.default.resolve(t) === rA.default.resolve(e);
    }
    function JT(t) {
      return !!(t && Vo.default.existsSync(t));
    }
    function Fu(t, e) {
      return Object.prototype.hasOwnProperty.call(t, e);
    }
    function nA(t, e) {
      let r = {};
      for (let n of Object.keys(t)) r[n] = e(t[n], n);
      return r;
    }
    function Tu(t, e) {
      if (t.length === 0) return;
      let r = t[0];
      for (let n = 1; n < t.length; n++) e(r, t[n]) < 0 && (r = t[n]);
      return r;
    }
    function M(t, e) {
      Object.defineProperty(t, "name", { value: e, configurable: true });
    }
    var LC = /* @__PURE__ */ new Set();
    var Fi = (t, e, ...r) => {
      LC.has(t) || (LC.add(t), yu(e, ...r));
    };
    var Z = class t extends Error {
      clientVersion;
      errorCode;
      retryable;
      constructor(e, r, n) {
        super(e), this.name = "PrismaClientInitializationError", this.clientVersion = r, this.errorCode = n, Error.captureStackTrace(t);
      }
      get [Symbol.toStringTag]() {
        return "PrismaClientInitializationError";
      }
    };
    M(Z, "PrismaClientInitializationError");
    var Ne = class extends Error {
      code;
      meta;
      clientVersion;
      batchRequestIdx;
      constructor(e, { code: r, clientVersion: n, meta: A, batchRequestIdx: i }) {
        super(e), this.name = "PrismaClientKnownRequestError", this.code = r, this.clientVersion = n, this.meta = A, Object.defineProperty(this, "batchRequestIdx", { value: i, enumerable: false, writable: true });
      }
      get [Symbol.toStringTag]() {
        return "PrismaClientKnownRequestError";
      }
    };
    M(Ne, "PrismaClientKnownRequestError");
    var ut = class extends Error {
      clientVersion;
      constructor(e, r) {
        super(e), this.name = "PrismaClientRustPanicError", this.clientVersion = r;
      }
      get [Symbol.toStringTag]() {
        return "PrismaClientRustPanicError";
      }
    };
    M(ut, "PrismaClientRustPanicError");
    var pe = class extends Error {
      clientVersion;
      batchRequestIdx;
      constructor(e, { clientVersion: r, batchRequestIdx: n }) {
        super(e), this.name = "PrismaClientUnknownRequestError", this.clientVersion = r, Object.defineProperty(this, "batchRequestIdx", { value: n, writable: true, enumerable: false });
      }
      get [Symbol.toStringTag]() {
        return "PrismaClientUnknownRequestError";
      }
    };
    M(pe, "PrismaClientUnknownRequestError");
    var Ue = class extends Error {
      name = "PrismaClientValidationError";
      clientVersion;
      constructor(e, { clientVersion: r }) {
        super(e), this.clientVersion = r;
      }
      get [Symbol.toStringTag]() {
        return "PrismaClientValidationError";
      }
    };
    M(Ue, "PrismaClientValidationError");
    var AA = 9e15;
    var Lr = 1e9;
    var xu = "0123456789abcdef";
    var _o = "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058";
    var jo = "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789";
    var Uu = { precision: 20, rounding: 4, modulo: 1, toExpNeg: -7, toExpPos: 21, minE: -AA, maxE: AA, crypto: false };
    var GC;
    var ar;
    var L = true;
    var Xo = "[DecimalError] ";
    var Mr = Xo + "Invalid argument: ";
    var OC = Xo + "Precision limit exceeded";
    var VC = Xo + "crypto unavailable";
    var HC = "[object Decimal]";
    var ke = Math.floor;
    var me = Math.pow;
    var WT = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i;
    var _T = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i;
    var jT = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i;
    var qC = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
    var Bt = 1e7;
    var N = 7;
    var ZT = 9007199254740991;
    var XT = _o.length - 1;
    var ku = jo.length - 1;
    var y = { toStringTag: HC };
    y.absoluteValue = y.abs = function() {
      var t = new this.constructor(this);
      return t.s < 0 && (t.s = 1), b(t);
    };
    y.ceil = function() {
      return b(new this.constructor(this), this.e + 1, 2);
    };
    y.clampedTo = y.clamp = function(t, e) {
      var r, n = this, A = n.constructor;
      if (t = new A(t), e = new A(e), !t.s || !e.s) return new A(NaN);
      if (t.gt(e)) throw Error(Mr + e);
      return r = n.cmp(t), r < 0 ? t : n.cmp(e) > 0 ? e : new A(n);
    };
    y.comparedTo = y.cmp = function(t) {
      var e, r, n, A, i = this, s = i.d, o = (t = new i.constructor(t)).d, a = i.s, c = t.s;
      if (!s || !o) return !a || !c ? NaN : a !== c ? a : s === o ? 0 : !s ^ a < 0 ? 1 : -1;
      if (!s[0] || !o[0]) return s[0] ? a : o[0] ? -c : 0;
      if (a !== c) return a;
      if (i.e !== t.e) return i.e > t.e ^ a < 0 ? 1 : -1;
      for (n = s.length, A = o.length, e = 0, r = n < A ? n : A; e < r; ++e) if (s[e] !== o[e]) return s[e] > o[e] ^ a < 0 ? 1 : -1;
      return n === A ? 0 : n > A ^ a < 0 ? 1 : -1;
    };
    y.cosine = y.cos = function() {
      var t, e, r = this, n = r.constructor;
      return r.d ? r.d[0] ? (t = n.precision, e = n.rounding, n.precision = t + Math.max(r.e, r.sd()) + N, n.rounding = 1, r = $T(n, ZC(n, r)), n.precision = t, n.rounding = e, b(ar == 2 || ar == 3 ? r.neg() : r, t, e, true)) : new n(1) : new n(NaN);
    };
    y.cubeRoot = y.cbrt = function() {
      var t, e, r, n, A, i, s, o, a, c, l = this, u = l.constructor;
      if (!l.isFinite() || l.isZero()) return new u(l);
      for (L = false, i = l.s * me(l.s * l, 1 / 3), !i || Math.abs(i) == 1 / 0 ? (r = Fe(l.d), t = l.e, (i = (t - r.length + 1) % 3) && (r += i == 1 || i == -2 ? "0" : "00"), i = me(r, 1 / 3), t = ke((t + 1) / 3) - (t % 3 == (t < 0 ? -1 : 2)), i == 1 / 0 ? r = "5e" + t : (r = i.toExponential(), r = r.slice(0, r.indexOf("e") + 1) + t), n = new u(r), n.s = l.s) : n = new u(i.toString()), s = (t = u.precision) + 3; ; ) if (o = n, a = o.times(o).times(o), c = a.plus(l), n = re(c.plus(l).times(o), c.plus(a), s + 2, 1), Fe(o.d).slice(0, s) === (r = Fe(n.d)).slice(0, s)) if (r = r.slice(s - 3, s + 1), r == "9999" || !A && r == "4999") {
        if (!A && (b(o, t + 1, 0), o.times(o).times(o).eq(l))) {
          n = o;
          break;
        }
        s += 4, A = 1;
      } else {
        (!+r || !+r.slice(1) && r.charAt(0) == "5") && (b(n, t + 1, 1), e = !n.times(n).times(n).eq(l));
        break;
      }
      return L = true, b(n, t, u.rounding, e);
    };
    y.decimalPlaces = y.dp = function() {
      var t, e = this.d, r = NaN;
      if (e) {
        if (t = e.length - 1, r = (t - ke(this.e / N)) * N, t = e[t], t) for (; t % 10 == 0; t /= 10) r--;
        r < 0 && (r = 0);
      }
      return r;
    };
    y.dividedBy = y.div = function(t) {
      return re(this, new this.constructor(t));
    };
    y.dividedToIntegerBy = y.divToInt = function(t) {
      var e = this, r = e.constructor;
      return b(re(e, new r(t), 0, 1, 1), r.precision, r.rounding);
    };
    y.equals = y.eq = function(t) {
      return this.cmp(t) === 0;
    };
    y.floor = function() {
      return b(new this.constructor(this), this.e + 1, 3);
    };
    y.greaterThan = y.gt = function(t) {
      return this.cmp(t) > 0;
    };
    y.greaterThanOrEqualTo = y.gte = function(t) {
      var e = this.cmp(t);
      return e == 1 || e === 0;
    };
    y.hyperbolicCosine = y.cosh = function() {
      var t, e, r, n, A, i = this, s = i.constructor, o = new s(1);
      if (!i.isFinite()) return new s(i.s ? 1 / 0 : NaN);
      if (i.isZero()) return o;
      r = s.precision, n = s.rounding, s.precision = r + Math.max(i.e, i.sd()) + 4, s.rounding = 1, A = i.d.length, A < 32 ? (t = Math.ceil(A / 3), e = (1 / Ko(4, t)).toString()) : (t = 16, e = "2.3283064365386962890625e-10"), i = iA(s, 1, i.times(e), new s(1), true);
      for (var a, c = t, l = new s(8); c--; ) a = i.times(i), i = o.minus(a.times(l.minus(a.times(l))));
      return b(i, s.precision = r, s.rounding = n, true);
    };
    y.hyperbolicSine = y.sinh = function() {
      var t, e, r, n, A = this, i = A.constructor;
      if (!A.isFinite() || A.isZero()) return new i(A);
      if (e = i.precision, r = i.rounding, i.precision = e + Math.max(A.e, A.sd()) + 4, i.rounding = 1, n = A.d.length, n < 3) A = iA(i, 2, A, A, true);
      else {
        t = 1.4 * Math.sqrt(n), t = t > 16 ? 16 : t | 0, A = A.times(1 / Ko(5, t)), A = iA(i, 2, A, A, true);
        for (var s, o = new i(5), a = new i(16), c = new i(20); t--; ) s = A.times(A), A = A.times(o.plus(s.times(a.times(s).plus(c))));
      }
      return i.precision = e, i.rounding = r, b(A, e, r, true);
    };
    y.hyperbolicTangent = y.tanh = function() {
      var t, e, r = this, n = r.constructor;
      return r.isFinite() ? r.isZero() ? new n(r) : (t = n.precision, e = n.rounding, n.precision = t + 7, n.rounding = 1, re(r.sinh(), r.cosh(), n.precision = t, n.rounding = e)) : new n(r.s);
    };
    y.inverseCosine = y.acos = function() {
      var t = this, e = t.constructor, r = t.abs().cmp(1), n = e.precision, A = e.rounding;
      return r !== -1 ? r === 0 ? t.isNeg() ? kt(e, n, A) : new e(0) : new e(NaN) : t.isZero() ? kt(e, n + 4, A).times(0.5) : (e.precision = n + 6, e.rounding = 1, t = new e(1).minus(t).div(t.plus(1)).sqrt().atan(), e.precision = n, e.rounding = A, t.times(2));
    };
    y.inverseHyperbolicCosine = y.acosh = function() {
      var t, e, r = this, n = r.constructor;
      return r.lte(1) ? new n(r.eq(1) ? 0 : NaN) : r.isFinite() ? (t = n.precision, e = n.rounding, n.precision = t + Math.max(Math.abs(r.e), r.sd()) + 4, n.rounding = 1, L = false, r = r.times(r).minus(1).sqrt().plus(r), L = true, n.precision = t, n.rounding = e, r.ln()) : new n(r);
    };
    y.inverseHyperbolicSine = y.asinh = function() {
      var t, e, r = this, n = r.constructor;
      return !r.isFinite() || r.isZero() ? new n(r) : (t = n.precision, e = n.rounding, n.precision = t + 2 * Math.max(Math.abs(r.e), r.sd()) + 6, n.rounding = 1, L = false, r = r.times(r).plus(1).sqrt().plus(r), L = true, n.precision = t, n.rounding = e, r.ln());
    };
    y.inverseHyperbolicTangent = y.atanh = function() {
      var t, e, r, n, A = this, i = A.constructor;
      return A.isFinite() ? A.e >= 0 ? new i(A.abs().eq(1) ? A.s / 0 : A.isZero() ? A : NaN) : (t = i.precision, e = i.rounding, n = A.sd(), Math.max(n, t) < 2 * -A.e - 1 ? b(new i(A), t, e, true) : (i.precision = r = n - A.e, A = re(A.plus(1), new i(1).minus(A), r + t, 1), i.precision = t + 4, i.rounding = 1, A = A.ln(), i.precision = t, i.rounding = e, A.times(0.5))) : new i(NaN);
    };
    y.inverseSine = y.asin = function() {
      var t, e, r, n, A = this, i = A.constructor;
      return A.isZero() ? new i(A) : (e = A.abs().cmp(1), r = i.precision, n = i.rounding, e !== -1 ? e === 0 ? (t = kt(i, r + 4, n).times(0.5), t.s = A.s, t) : new i(NaN) : (i.precision = r + 6, i.rounding = 1, A = A.div(new i(1).minus(A.times(A)).sqrt().plus(1)).atan(), i.precision = r, i.rounding = n, A.times(2)));
    };
    y.inverseTangent = y.atan = function() {
      var t, e, r, n, A, i, s, o, a, c = this, l = c.constructor, u = l.precision, g = l.rounding;
      if (c.isFinite()) {
        if (c.isZero()) return new l(c);
        if (c.abs().eq(1) && u + 4 <= ku) return s = kt(l, u + 4, g).times(0.25), s.s = c.s, s;
      } else {
        if (!c.s) return new l(NaN);
        if (u + 4 <= ku) return s = kt(l, u + 4, g).times(0.5), s.s = c.s, s;
      }
      for (l.precision = o = u + 10, l.rounding = 1, r = Math.min(28, o / N + 2 | 0), t = r; t; --t) c = c.div(c.times(c).plus(1).sqrt().plus(1));
      for (L = false, e = Math.ceil(o / N), n = 1, a = c.times(c), s = new l(c), A = c; t !== -1; ) if (A = A.times(a), i = s.minus(A.div(n += 2)), A = A.times(a), s = i.plus(A.div(n += 2)), s.d[e] !== void 0) for (t = e; s.d[t] === i.d[t] && t--; ) ;
      return r && (s = s.times(2 << r - 1)), L = true, b(s, l.precision = u, l.rounding = g, true);
    };
    y.isFinite = function() {
      return !!this.d;
    };
    y.isInteger = y.isInt = function() {
      return !!this.d && ke(this.e / N) > this.d.length - 2;
    };
    y.isNaN = function() {
      return !this.s;
    };
    y.isNegative = y.isNeg = function() {
      return this.s < 0;
    };
    y.isPositive = y.isPos = function() {
      return this.s > 0;
    };
    y.isZero = function() {
      return !!this.d && this.d[0] === 0;
    };
    y.lessThan = y.lt = function(t) {
      return this.cmp(t) < 0;
    };
    y.lessThanOrEqualTo = y.lte = function(t) {
      return this.cmp(t) < 1;
    };
    y.logarithm = y.log = function(t) {
      var e, r, n, A, i, s, o, a, c = this, l = c.constructor, u = l.precision, g = l.rounding, E = 5;
      if (t == null) t = new l(10), e = true;
      else {
        if (t = new l(t), r = t.d, t.s < 0 || !r || !r[0] || t.eq(1)) return new l(NaN);
        e = t.eq(10);
      }
      if (r = c.d, c.s < 0 || !r || !r[0] || c.eq(1)) return new l(r && !r[0] ? -1 / 0 : c.s != 1 ? NaN : r ? 0 : 1 / 0);
      if (e) if (r.length > 1) i = true;
      else {
        for (A = r[0]; A % 10 === 0; ) A /= 10;
        i = A !== 1;
      }
      if (L = false, o = u + E, s = kr(c, o), n = e ? Zo(l, o + 10) : kr(t, o), a = re(s, n, o, 1), Ti(a.d, A = u, g)) do
        if (o += 10, s = kr(c, o), n = e ? Zo(l, o + 10) : kr(t, o), a = re(s, n, o, 1), !i) {
          +Fe(a.d).slice(A + 1, A + 15) + 1 == 1e14 && (a = b(a, u + 1, 0));
          break;
        }
      while (Ti(a.d, A += 10, g));
      return L = true, b(a, u, g);
    };
    y.minus = y.sub = function(t) {
      var e, r, n, A, i, s, o, a, c, l, u, g, E = this, h = E.constructor;
      if (t = new h(t), !E.d || !t.d) return !E.s || !t.s ? t = new h(NaN) : E.d ? t.s = -t.s : t = new h(t.d || E.s !== t.s ? E : NaN), t;
      if (E.s != t.s) return t.s = -t.s, E.plus(t);
      if (c = E.d, g = t.d, o = h.precision, a = h.rounding, !c[0] || !g[0]) {
        if (g[0]) t.s = -t.s;
        else if (c[0]) t = new h(E);
        else return new h(a === 3 ? -0 : 0);
        return L ? b(t, o, a) : t;
      }
      if (r = ke(t.e / N), l = ke(E.e / N), c = c.slice(), i = l - r, i) {
        for (u = i < 0, u ? (e = c, i = -i, s = g.length) : (e = g, r = l, s = c.length), n = Math.max(Math.ceil(o / N), s) + 2, i > n && (i = n, e.length = 1), e.reverse(), n = i; n--; ) e.push(0);
        e.reverse();
      } else {
        for (n = c.length, s = g.length, u = n < s, u && (s = n), n = 0; n < s; n++) if (c[n] != g[n]) {
          u = c[n] < g[n];
          break;
        }
        i = 0;
      }
      for (u && (e = c, c = g, g = e, t.s = -t.s), s = c.length, n = g.length - s; n > 0; --n) c[s++] = 0;
      for (n = g.length; n > i; ) {
        if (c[--n] < g[n]) {
          for (A = n; A && c[--A] === 0; ) c[A] = Bt - 1;
          --c[A], c[n] += Bt;
        }
        c[n] -= g[n];
      }
      for (; c[--s] === 0; ) c.pop();
      for (; c[0] === 0; c.shift()) --r;
      return c[0] ? (t.d = c, t.e = $o(c, r), L ? b(t, o, a) : t) : new h(a === 3 ? -0 : 0);
    };
    y.modulo = y.mod = function(t) {
      var e, r = this, n = r.constructor;
      return t = new n(t), !r.d || !t.s || t.d && !t.d[0] ? new n(NaN) : !t.d || r.d && !r.d[0] ? b(new n(r), n.precision, n.rounding) : (L = false, n.modulo == 9 ? (e = re(r, t.abs(), 0, 3, 1), e.s *= t.s) : e = re(r, t, 0, n.modulo, 1), e = e.times(t), L = true, r.minus(e));
    };
    y.naturalExponential = y.exp = function() {
      return Mu(this);
    };
    y.naturalLogarithm = y.ln = function() {
      return kr(this);
    };
    y.negated = y.neg = function() {
      var t = new this.constructor(this);
      return t.s = -t.s, b(t);
    };
    y.plus = y.add = function(t) {
      var e, r, n, A, i, s, o, a, c, l, u = this, g = u.constructor;
      if (t = new g(t), !u.d || !t.d) return !u.s || !t.s ? t = new g(NaN) : u.d || (t = new g(t.d || u.s === t.s ? u : NaN)), t;
      if (u.s != t.s) return t.s = -t.s, u.minus(t);
      if (c = u.d, l = t.d, o = g.precision, a = g.rounding, !c[0] || !l[0]) return l[0] || (t = new g(u)), L ? b(t, o, a) : t;
      if (i = ke(u.e / N), n = ke(t.e / N), c = c.slice(), A = i - n, A) {
        for (A < 0 ? (r = c, A = -A, s = l.length) : (r = l, n = i, s = c.length), i = Math.ceil(o / N), s = i > s ? i + 1 : s + 1, A > s && (A = s, r.length = 1), r.reverse(); A--; ) r.push(0);
        r.reverse();
      }
      for (s = c.length, A = l.length, s - A < 0 && (A = s, r = l, l = c, c = r), e = 0; A; ) e = (c[--A] = c[A] + l[A] + e) / Bt | 0, c[A] %= Bt;
      for (e && (c.unshift(e), ++n), s = c.length; c[--s] == 0; ) c.pop();
      return t.d = c, t.e = $o(c, n), L ? b(t, o, a) : t;
    };
    y.precision = y.sd = function(t) {
      var e, r = this;
      if (t !== void 0 && t !== !!t && t !== 1 && t !== 0) throw Error(Mr + t);
      return r.d ? (e = JC(r.d), t && r.e + 1 > e && (e = r.e + 1)) : e = NaN, e;
    };
    y.round = function() {
      var t = this, e = t.constructor;
      return b(new e(t), t.e + 1, e.rounding);
    };
    y.sine = y.sin = function() {
      var t, e, r = this, n = r.constructor;
      return r.isFinite() ? r.isZero() ? new n(r) : (t = n.precision, e = n.rounding, n.precision = t + Math.max(r.e, r.sd()) + N, n.rounding = 1, r = zT(n, ZC(n, r)), n.precision = t, n.rounding = e, b(ar > 2 ? r.neg() : r, t, e, true)) : new n(NaN);
    };
    y.squareRoot = y.sqrt = function() {
      var t, e, r, n, A, i, s = this, o = s.d, a = s.e, c = s.s, l = s.constructor;
      if (c !== 1 || !o || !o[0]) return new l(!c || c < 0 && (!o || o[0]) ? NaN : o ? s : 1 / 0);
      for (L = false, c = Math.sqrt(+s), c == 0 || c == 1 / 0 ? (e = Fe(o), (e.length + a) % 2 == 0 && (e += "0"), c = Math.sqrt(e), a = ke((a + 1) / 2) - (a < 0 || a % 2), c == 1 / 0 ? e = "5e" + a : (e = c.toExponential(), e = e.slice(0, e.indexOf("e") + 1) + a), n = new l(e)) : n = new l(c.toString()), r = (a = l.precision) + 3; ; ) if (i = n, n = i.plus(re(s, i, r + 2, 1)).times(0.5), Fe(i.d).slice(0, r) === (e = Fe(n.d)).slice(0, r)) if (e = e.slice(r - 3, r + 1), e == "9999" || !A && e == "4999") {
        if (!A && (b(i, a + 1, 0), i.times(i).eq(s))) {
          n = i;
          break;
        }
        r += 4, A = 1;
      } else {
        (!+e || !+e.slice(1) && e.charAt(0) == "5") && (b(n, a + 1, 1), t = !n.times(n).eq(s));
        break;
      }
      return L = true, b(n, a, l.rounding, t);
    };
    y.tangent = y.tan = function() {
      var t, e, r = this, n = r.constructor;
      return r.isFinite() ? r.isZero() ? new n(r) : (t = n.precision, e = n.rounding, n.precision = t + 10, n.rounding = 1, r = r.sin(), r.s = 1, r = re(r, new n(1).minus(r.times(r)).sqrt(), t + 10, 0), n.precision = t, n.rounding = e, b(ar == 2 || ar == 4 ? r.neg() : r, t, e, true)) : new n(NaN);
    };
    y.times = y.mul = function(t) {
      var e, r, n, A, i, s, o, a, c, l = this, u = l.constructor, g = l.d, E = (t = new u(t)).d;
      if (t.s *= l.s, !g || !g[0] || !E || !E[0]) return new u(!t.s || g && !g[0] && !E || E && !E[0] && !g ? NaN : !g || !E ? t.s / 0 : t.s * 0);
      for (r = ke(l.e / N) + ke(t.e / N), a = g.length, c = E.length, a < c && (i = g, g = E, E = i, s = a, a = c, c = s), i = [], s = a + c, n = s; n--; ) i.push(0);
      for (n = c; --n >= 0; ) {
        for (e = 0, A = a + n; A > n; ) o = i[A] + E[n] * g[A - n - 1] + e, i[A--] = o % Bt | 0, e = o / Bt | 0;
        i[A] = (i[A] + e) % Bt | 0;
      }
      for (; !i[--s]; ) i.pop();
      return e ? ++r : i.shift(), t.d = i, t.e = $o(i, r), L ? b(t, u.precision, u.rounding) : t;
    };
    y.toBinary = function(t, e) {
      return Lu(this, 2, t, e);
    };
    y.toDecimalPlaces = y.toDP = function(t, e) {
      var r = this, n = r.constructor;
      return r = new n(r), t === void 0 ? r : (We(t, 0, Lr), e === void 0 ? e = n.rounding : We(e, 0, 8), b(r, t + r.e + 1, e));
    };
    y.toExponential = function(t, e) {
      var r, n = this, A = n.constructor;
      return t === void 0 ? r = Mt(n, true) : (We(t, 0, Lr), e === void 0 ? e = A.rounding : We(e, 0, 8), n = b(new A(n), t + 1, e), r = Mt(n, true, t + 1)), n.isNeg() && !n.isZero() ? "-" + r : r;
    };
    y.toFixed = function(t, e) {
      var r, n, A = this, i = A.constructor;
      return t === void 0 ? r = Mt(A) : (We(t, 0, Lr), e === void 0 ? e = i.rounding : We(e, 0, 8), n = b(new i(A), t + A.e + 1, e), r = Mt(n, false, t + n.e + 1)), A.isNeg() && !A.isZero() ? "-" + r : r;
    };
    y.toFraction = function(t) {
      var e, r, n, A, i, s, o, a, c, l, u, g, E = this, h = E.d, f = E.constructor;
      if (!h) return new f(E);
      if (c = r = new f(1), n = a = new f(0), e = new f(n), i = e.e = JC(h) - E.e - 1, s = i % N, e.d[0] = me(10, s < 0 ? N + s : s), t == null) t = i > 0 ? e : c;
      else {
        if (o = new f(t), !o.isInt() || o.lt(c)) throw Error(Mr + o);
        t = o.gt(e) ? i > 0 ? e : c : o;
      }
      for (L = false, o = new f(Fe(h)), l = f.precision, f.precision = i = h.length * N * 2; u = re(o, e, 0, 1, 1), A = r.plus(u.times(n)), A.cmp(t) != 1; ) r = n, n = A, A = c, c = a.plus(u.times(A)), a = A, A = e, e = o.minus(u.times(A)), o = A;
      return A = re(t.minus(r), n, 0, 1, 1), a = a.plus(A.times(c)), r = r.plus(A.times(n)), a.s = c.s = E.s, g = re(c, n, i, 1).minus(E).abs().cmp(re(a, r, i, 1).minus(E).abs()) < 1 ? [c, n] : [a, r], f.precision = l, L = true, g;
    };
    y.toHexadecimal = y.toHex = function(t, e) {
      return Lu(this, 16, t, e);
    };
    y.toNearest = function(t, e) {
      var r = this, n = r.constructor;
      if (r = new n(r), t == null) {
        if (!r.d) return r;
        t = new n(1), e = n.rounding;
      } else {
        if (t = new n(t), e === void 0 ? e = n.rounding : We(e, 0, 8), !r.d) return t.s ? r : t;
        if (!t.d) return t.s && (t.s = r.s), t;
      }
      return t.d[0] ? (L = false, r = re(r, t, 0, e, 1).times(t), L = true, b(r)) : (t.s = r.s, r = t), r;
    };
    y.toNumber = function() {
      return +this;
    };
    y.toOctal = function(t, e) {
      return Lu(this, 8, t, e);
    };
    y.toPower = y.pow = function(t) {
      var e, r, n, A, i, s, o = this, a = o.constructor, c = +(t = new a(t));
      if (!o.d || !t.d || !o.d[0] || !t.d[0]) return new a(me(+o, c));
      if (o = new a(o), o.eq(1)) return o;
      if (n = a.precision, i = a.rounding, t.eq(1)) return b(o, n, i);
      if (e = ke(t.e / N), e >= t.d.length - 1 && (r = c < 0 ? -c : c) <= ZT) return A = WC(a, o, r, n), t.s < 0 ? new a(1).div(A) : b(A, n, i);
      if (s = o.s, s < 0) {
        if (e < t.d.length - 1) return new a(NaN);
        if ((t.d[e] & 1) == 0 && (s = 1), o.e == 0 && o.d[0] == 1 && o.d.length == 1) return o.s = s, o;
      }
      return r = me(+o, c), e = r == 0 || !isFinite(r) ? ke(c * (Math.log("0." + Fe(o.d)) / Math.LN10 + o.e + 1)) : new a(r + "").e, e > a.maxE + 1 || e < a.minE - 1 ? new a(e > 0 ? s / 0 : 0) : (L = false, a.rounding = o.s = 1, r = Math.min(12, (e + "").length), A = Mu(t.times(kr(o, n + r)), n), A.d && (A = b(A, n + 5, 1), Ti(A.d, n, i) && (e = n + 10, A = b(Mu(t.times(kr(o, e + r)), e), e + 5, 1), +Fe(A.d).slice(n + 1, n + 15) + 1 == 1e14 && (A = b(A, n + 1, 0)))), A.s = s, L = true, a.rounding = i, b(A, n, i));
    };
    y.toPrecision = function(t, e) {
      var r, n = this, A = n.constructor;
      return t === void 0 ? r = Mt(n, n.e <= A.toExpNeg || n.e >= A.toExpPos) : (We(t, 1, Lr), e === void 0 ? e = A.rounding : We(e, 0, 8), n = b(new A(n), t, e), r = Mt(n, t <= n.e || n.e <= A.toExpNeg, t)), n.isNeg() && !n.isZero() ? "-" + r : r;
    };
    y.toSignificantDigits = y.toSD = function(t, e) {
      var r = this, n = r.constructor;
      return t === void 0 ? (t = n.precision, e = n.rounding) : (We(t, 1, Lr), e === void 0 ? e = n.rounding : We(e, 0, 8)), b(new n(r), t, e);
    };
    y.toString = function() {
      var t = this, e = t.constructor, r = Mt(t, t.e <= e.toExpNeg || t.e >= e.toExpPos);
      return t.isNeg() && !t.isZero() ? "-" + r : r;
    };
    y.truncated = y.trunc = function() {
      return b(new this.constructor(this), this.e + 1, 1);
    };
    y.valueOf = y.toJSON = function() {
      var t = this, e = t.constructor, r = Mt(t, t.e <= e.toExpNeg || t.e >= e.toExpPos);
      return t.isNeg() ? "-" + r : r;
    };
    function Fe(t) {
      var e, r, n, A = t.length - 1, i = "", s = t[0];
      if (A > 0) {
        for (i += s, e = 1; e < A; e++) n = t[e] + "", r = N - n.length, r && (i += Ur(r)), i += n;
        s = t[e], n = s + "", r = N - n.length, r && (i += Ur(r));
      } else if (s === 0) return "0";
      for (; s % 10 === 0; ) s /= 10;
      return i + s;
    }
    function We(t, e, r) {
      if (t !== ~~t || t < e || t > r) throw Error(Mr + t);
    }
    function Ti(t, e, r, n) {
      var A, i, s, o;
      for (i = t[0]; i >= 10; i /= 10) --e;
      return --e < 0 ? (e += N, A = 0) : (A = Math.ceil((e + 1) / N), e %= N), i = me(10, N - e), o = t[A] % i | 0, n == null ? e < 3 ? (e == 0 ? o = o / 100 | 0 : e == 1 && (o = o / 10 | 0), s = r < 4 && o == 99999 || r > 3 && o == 49999 || o == 5e4 || o == 0) : s = (r < 4 && o + 1 == i || r > 3 && o + 1 == i / 2) && (t[A + 1] / i / 100 | 0) == me(10, e - 2) - 1 || (o == i / 2 || o == 0) && (t[A + 1] / i / 100 | 0) == 0 : e < 4 ? (e == 0 ? o = o / 1e3 | 0 : e == 1 ? o = o / 100 | 0 : e == 2 && (o = o / 10 | 0), s = (n || r < 4) && o == 9999 || !n && r > 3 && o == 4999) : s = ((n || r < 4) && o + 1 == i || !n && r > 3 && o + 1 == i / 2) && (t[A + 1] / i / 1e3 | 0) == me(10, e - 3) - 1, s;
    }
    function Jo(t, e, r) {
      for (var n, A = [0], i, s = 0, o = t.length; s < o; ) {
        for (i = A.length; i--; ) A[i] *= e;
        for (A[0] += xu.indexOf(t.charAt(s++)), n = 0; n < A.length; n++) A[n] > r - 1 && (A[n + 1] === void 0 && (A[n + 1] = 0), A[n + 1] += A[n] / r | 0, A[n] %= r);
      }
      return A.reverse();
    }
    function $T(t, e) {
      var r, n, A;
      if (e.isZero()) return e;
      n = e.d.length, n < 32 ? (r = Math.ceil(n / 3), A = (1 / Ko(4, r)).toString()) : (r = 16, A = "2.3283064365386962890625e-10"), t.precision += r, e = iA(t, 1, e.times(A), new t(1));
      for (var i = r; i--; ) {
        var s = e.times(e);
        e = s.times(s).minus(s).times(8).plus(1);
      }
      return t.precision -= r, e;
    }
    var re = /* @__PURE__ */ function() {
      function t(n, A, i) {
        var s, o = 0, a = n.length;
        for (n = n.slice(); a--; ) s = n[a] * A + o, n[a] = s % i | 0, o = s / i | 0;
        return o && n.unshift(o), n;
      }
      function e(n, A, i, s) {
        var o, a;
        if (i != s) a = i > s ? 1 : -1;
        else for (o = a = 0; o < i; o++) if (n[o] != A[o]) {
          a = n[o] > A[o] ? 1 : -1;
          break;
        }
        return a;
      }
      function r(n, A, i, s) {
        for (var o = 0; i--; ) n[i] -= o, o = n[i] < A[i] ? 1 : 0, n[i] = o * s + n[i] - A[i];
        for (; !n[0] && n.length > 1; ) n.shift();
      }
      return function(n, A, i, s, o, a) {
        var c, l, u, g, E, h, f, B, Q, I, p, w, D, v, $, W, ae, xe, te, Rr, rn = n.constructor, Se = n.s == A.s ? 1 : -1, he = n.d, ee = A.d;
        if (!he || !he[0] || !ee || !ee[0]) return new rn(!n.s || !A.s || (he ? ee && he[0] == ee[0] : !ee) ? NaN : he && he[0] == 0 || !ee ? Se * 0 : Se / 0);
        for (a ? (E = 1, l = n.e - A.e) : (a = Bt, E = N, l = ke(n.e / E) - ke(A.e / E)), te = ee.length, ae = he.length, Q = new rn(Se), I = Q.d = [], u = 0; ee[u] == (he[u] || 0); u++) ;
        if (ee[u] > (he[u] || 0) && l--, i == null ? (v = i = rn.precision, s = rn.rounding) : o ? v = i + (n.e - A.e) + 1 : v = i, v < 0) I.push(1), h = true;
        else {
          if (v = v / E + 2 | 0, u = 0, te == 1) {
            for (g = 0, ee = ee[0], v++; (u < ae || g) && v--; u++) $ = g * a + (he[u] || 0), I[u] = $ / ee | 0, g = $ % ee | 0;
            h = g || u < ae;
          } else {
            for (g = a / (ee[0] + 1) | 0, g > 1 && (ee = t(ee, g, a), he = t(he, g, a), te = ee.length, ae = he.length), W = te, p = he.slice(0, te), w = p.length; w < te; ) p[w++] = 0;
            Rr = ee.slice(), Rr.unshift(0), xe = ee[0], ee[1] >= a / 2 && ++xe;
            do
              g = 0, c = e(ee, p, te, w), c < 0 ? (D = p[0], te != w && (D = D * a + (p[1] || 0)), g = D / xe | 0, g > 1 ? (g >= a && (g = a - 1), f = t(ee, g, a), B = f.length, w = p.length, c = e(f, p, B, w), c == 1 && (g--, r(f, te < B ? Rr : ee, B, a))) : (g == 0 && (c = g = 1), f = ee.slice()), B = f.length, B < w && f.unshift(0), r(p, f, w, a), c == -1 && (w = p.length, c = e(ee, p, te, w), c < 1 && (g++, r(p, te < w ? Rr : ee, w, a))), w = p.length) : c === 0 && (g++, p = [0]), I[u++] = g, c && p[0] ? p[w++] = he[W] || 0 : (p = [he[W]], w = 1);
            while ((W++ < ae || p[0] !== void 0) && v--);
            h = p[0] !== void 0;
          }
          I[0] || I.shift();
        }
        if (E == 1) Q.e = l, GC = h;
        else {
          for (u = 1, g = I[0]; g >= 10; g /= 10) u++;
          Q.e = u + l * E - 1, b(Q, o ? i + Q.e + 1 : i, s, h);
        }
        return Q;
      };
    }();
    function b(t, e, r, n) {
      var A, i, s, o, a, c, l, u, g, E = t.constructor;
      e: if (e != null) {
        if (u = t.d, !u) return t;
        for (A = 1, o = u[0]; o >= 10; o /= 10) A++;
        if (i = e - A, i < 0) i += N, s = e, l = u[g = 0], a = l / me(10, A - s - 1) % 10 | 0;
        else if (g = Math.ceil((i + 1) / N), o = u.length, g >= o) if (n) {
          for (; o++ <= g; ) u.push(0);
          l = a = 0, A = 1, i %= N, s = i - N + 1;
        } else break e;
        else {
          for (l = o = u[g], A = 1; o >= 10; o /= 10) A++;
          i %= N, s = i - N + A, a = s < 0 ? 0 : l / me(10, A - s - 1) % 10 | 0;
        }
        if (n = n || e < 0 || u[g + 1] !== void 0 || (s < 0 ? l : l % me(10, A - s - 1)), c = r < 4 ? (a || n) && (r == 0 || r == (t.s < 0 ? 3 : 2)) : a > 5 || a == 5 && (r == 4 || n || r == 6 && (i > 0 ? s > 0 ? l / me(10, A - s) : 0 : u[g - 1]) % 10 & 1 || r == (t.s < 0 ? 8 : 7)), e < 1 || !u[0]) return u.length = 0, c ? (e -= t.e + 1, u[0] = me(10, (N - e % N) % N), t.e = -e || 0) : u[0] = t.e = 0, t;
        if (i == 0 ? (u.length = g, o = 1, g--) : (u.length = g + 1, o = me(10, N - i), u[g] = s > 0 ? (l / me(10, A - s) % me(10, s) | 0) * o : 0), c) for (; ; ) if (g == 0) {
          for (i = 1, s = u[0]; s >= 10; s /= 10) i++;
          for (s = u[0] += o, o = 1; s >= 10; s /= 10) o++;
          i != o && (t.e++, u[0] == Bt && (u[0] = 1));
          break;
        } else {
          if (u[g] += o, u[g] != Bt) break;
          u[g--] = 0, o = 1;
        }
        for (i = u.length; u[--i] === 0; ) u.pop();
      }
      return L && (t.e > E.maxE ? (t.d = null, t.e = NaN) : t.e < E.minE && (t.e = 0, t.d = [0])), t;
    }
    function Mt(t, e, r) {
      if (!t.isFinite()) return jC(t);
      var n, A = t.e, i = Fe(t.d), s = i.length;
      return e ? (r && (n = r - s) > 0 ? i = i.charAt(0) + "." + i.slice(1) + Ur(n) : s > 1 && (i = i.charAt(0) + "." + i.slice(1)), i = i + (t.e < 0 ? "e" : "e+") + t.e) : A < 0 ? (i = "0." + Ur(-A - 1) + i, r && (n = r - s) > 0 && (i += Ur(n))) : A >= s ? (i += Ur(A + 1 - s), r && (n = r - A - 1) > 0 && (i = i + "." + Ur(n))) : ((n = A + 1) < s && (i = i.slice(0, n) + "." + i.slice(n)), r && (n = r - s) > 0 && (A + 1 === s && (i += "."), i += Ur(n))), i;
    }
    function $o(t, e) {
      var r = t[0];
      for (e *= N; r >= 10; r /= 10) e++;
      return e;
    }
    function Zo(t, e, r) {
      if (e > XT) throw L = true, r && (t.precision = r), Error(OC);
      return b(new t(_o), e, 1, true);
    }
    function kt(t, e, r) {
      if (e > ku) throw Error(OC);
      return b(new t(jo), e, r, true);
    }
    function JC(t) {
      var e = t.length - 1, r = e * N + 1;
      if (e = t[e], e) {
        for (; e % 10 == 0; e /= 10) r--;
        for (e = t[0]; e >= 10; e /= 10) r++;
      }
      return r;
    }
    function Ur(t) {
      for (var e = ""; t--; ) e += "0";
      return e;
    }
    function WC(t, e, r, n) {
      var A, i = new t(1), s = Math.ceil(n / N + 4);
      for (L = false; ; ) {
        if (r % 2 && (i = i.times(e), PC(i.d, s) && (A = true)), r = ke(r / 2), r === 0) {
          r = i.d.length - 1, A && i.d[r] === 0 && ++i.d[r];
          break;
        }
        e = e.times(e), PC(e.d, s);
      }
      return L = true, i;
    }
    function vC(t) {
      return t.d[t.d.length - 1] & 1;
    }
    function _C(t, e, r) {
      for (var n, A, i = new t(e[0]), s = 0; ++s < e.length; ) {
        if (A = new t(e[s]), !A.s) {
          i = A;
          break;
        }
        n = i.cmp(A), (n === r || n === 0 && i.s === r) && (i = A);
      }
      return i;
    }
    function Mu(t, e) {
      var r, n, A, i, s, o, a, c = 0, l = 0, u = 0, g = t.constructor, E = g.rounding, h = g.precision;
      if (!t.d || !t.d[0] || t.e > 17) return new g(t.d ? t.d[0] ? t.s < 0 ? 0 : 1 / 0 : 1 : t.s ? t.s < 0 ? 0 : t : NaN);
      for (e == null ? (L = false, a = h) : a = e, o = new g(0.03125); t.e > -2; ) t = t.times(o), u += 5;
      for (n = Math.log(me(2, u)) / Math.LN10 * 2 + 5 | 0, a += n, r = i = s = new g(1), g.precision = a; ; ) {
        if (i = b(i.times(t), a, 1), r = r.times(++l), o = s.plus(re(i, r, a, 1)), Fe(o.d).slice(0, a) === Fe(s.d).slice(0, a)) {
          for (A = u; A--; ) s = b(s.times(s), a, 1);
          if (e == null) if (c < 3 && Ti(s.d, a - n, E, c)) g.precision = a += 10, r = i = o = new g(1), l = 0, c++;
          else return b(s, g.precision = h, E, L = true);
          else return g.precision = h, s;
        }
        s = o;
      }
    }
    function kr(t, e) {
      var r, n, A, i, s, o, a, c, l, u, g, E = 1, h = 10, f = t, B = f.d, Q = f.constructor, I = Q.rounding, p = Q.precision;
      if (f.s < 0 || !B || !B[0] || !f.e && B[0] == 1 && B.length == 1) return new Q(B && !B[0] ? -1 / 0 : f.s != 1 ? NaN : B ? 0 : f);
      if (e == null ? (L = false, l = p) : l = e, Q.precision = l += h, r = Fe(B), n = r.charAt(0), Math.abs(i = f.e) < 15e14) {
        for (; n < 7 && n != 1 || n == 1 && r.charAt(1) > 3; ) f = f.times(t), r = Fe(f.d), n = r.charAt(0), E++;
        i = f.e, n > 1 ? (f = new Q("0." + r), i++) : f = new Q(n + "." + r.slice(1));
      } else return c = Zo(Q, l + 2, p).times(i + ""), f = kr(new Q(n + "." + r.slice(1)), l - h).plus(c), Q.precision = p, e == null ? b(f, p, I, L = true) : f;
      for (u = f, a = s = f = re(f.minus(1), f.plus(1), l, 1), g = b(f.times(f), l, 1), A = 3; ; ) {
        if (s = b(s.times(g), l, 1), c = a.plus(re(s, new Q(A), l, 1)), Fe(c.d).slice(0, l) === Fe(a.d).slice(0, l)) if (a = a.times(2), i !== 0 && (a = a.plus(Zo(Q, l + 2, p).times(i + ""))), a = re(a, new Q(E), l, 1), e == null) if (Ti(a.d, l - h, I, o)) Q.precision = l += h, c = s = f = re(u.minus(1), u.plus(1), l, 1), g = b(f.times(f), l, 1), A = o = 1;
        else return b(a, Q.precision = p, I, L = true);
        else return Q.precision = p, a;
        a = c, A += 2;
      }
    }
    function jC(t) {
      return String(t.s * t.s / 0);
    }
    function Wo(t, e) {
      var r, n, A;
      for ((r = e.indexOf(".")) > -1 && (e = e.replace(".", "")), (n = e.search(/e/i)) > 0 ? (r < 0 && (r = n), r += +e.slice(n + 1), e = e.substring(0, n)) : r < 0 && (r = e.length), n = 0; e.charCodeAt(n) === 48; n++) ;
      for (A = e.length; e.charCodeAt(A - 1) === 48; --A) ;
      if (e = e.slice(n, A), e) {
        if (A -= n, t.e = r = r - n - 1, t.d = [], n = (r + 1) % N, r < 0 && (n += N), n < A) {
          for (n && t.d.push(+e.slice(0, n)), A -= N; n < A; ) t.d.push(+e.slice(n, n += N));
          e = e.slice(n), n = N - e.length;
        } else n -= A;
        for (; n--; ) e += "0";
        t.d.push(+e), L && (t.e > t.constructor.maxE ? (t.d = null, t.e = NaN) : t.e < t.constructor.minE && (t.e = 0, t.d = [0]));
      } else t.e = 0, t.d = [0];
      return t;
    }
    function KT(t, e) {
      var r, n, A, i, s, o, a, c, l;
      if (e.indexOf("_") > -1) {
        if (e = e.replace(/(\d)_(?=\d)/g, "$1"), qC.test(e)) return Wo(t, e);
      } else if (e === "Infinity" || e === "NaN") return +e || (t.s = NaN), t.e = NaN, t.d = null, t;
      if (_T.test(e)) r = 16, e = e.toLowerCase();
      else if (WT.test(e)) r = 2;
      else if (jT.test(e)) r = 8;
      else throw Error(Mr + e);
      for (i = e.search(/p/i), i > 0 ? (a = +e.slice(i + 1), e = e.substring(2, i)) : e = e.slice(2), i = e.indexOf("."), s = i >= 0, n = t.constructor, s && (e = e.replace(".", ""), o = e.length, i = o - i, A = WC(n, new n(r), i, i * 2)), c = Jo(e, r, Bt), l = c.length - 1, i = l; c[i] === 0; --i) c.pop();
      return i < 0 ? new n(t.s * 0) : (t.e = $o(c, l), t.d = c, L = false, s && (t = re(t, A, o * 4)), a && (t = t.times(Math.abs(a) < 54 ? me(2, a) : un.pow(2, a))), L = true, t);
    }
    function zT(t, e) {
      var r, n = e.d.length;
      if (n < 3) return e.isZero() ? e : iA(t, 2, e, e);
      r = 1.4 * Math.sqrt(n), r = r > 16 ? 16 : r | 0, e = e.times(1 / Ko(5, r)), e = iA(t, 2, e, e);
      for (var A, i = new t(5), s = new t(16), o = new t(20); r--; ) A = e.times(e), e = e.times(i.plus(A.times(s.times(A).minus(o))));
      return e;
    }
    function iA(t, e, r, n, A) {
      var i, s, o, a, c = 1, l = t.precision, u = Math.ceil(l / N);
      for (L = false, a = r.times(r), o = new t(n); ; ) {
        if (s = re(o.times(a), new t(e++ * e++), l, 1), o = A ? n.plus(s) : n.minus(s), n = re(s.times(a), new t(e++ * e++), l, 1), s = o.plus(n), s.d[u] !== void 0) {
          for (i = u; s.d[i] === o.d[i] && i--; ) ;
          if (i == -1) break;
        }
        i = o, o = n, n = s, s = i, c++;
      }
      return L = true, s.d.length = u + 1, s;
    }
    function Ko(t, e) {
      for (var r = t; --e; ) r *= t;
      return r;
    }
    function ZC(t, e) {
      var r, n = e.s < 0, A = kt(t, t.precision, 1), i = A.times(0.5);
      if (e = e.abs(), e.lte(i)) return ar = n ? 4 : 1, e;
      if (r = e.divToInt(A), r.isZero()) ar = n ? 3 : 2;
      else {
        if (e = e.minus(r.times(A)), e.lte(i)) return ar = vC(r) ? n ? 2 : 3 : n ? 4 : 1, e;
        ar = vC(r) ? n ? 1 : 4 : n ? 3 : 2;
      }
      return e.minus(A).abs();
    }
    function Lu(t, e, r, n) {
      var A, i, s, o, a, c, l, u, g, E = t.constructor, h = r !== void 0;
      if (h ? (We(r, 1, Lr), n === void 0 ? n = E.rounding : We(n, 0, 8)) : (r = E.precision, n = E.rounding), !t.isFinite()) l = jC(t);
      else {
        for (l = Mt(t), s = l.indexOf("."), h ? (A = 2, e == 16 ? r = r * 4 - 3 : e == 8 && (r = r * 3 - 2)) : A = e, s >= 0 && (l = l.replace(".", ""), g = new E(1), g.e = l.length - s, g.d = Jo(Mt(g), 10, A), g.e = g.d.length), u = Jo(l, 10, A), i = a = u.length; u[--a] == 0; ) u.pop();
        if (!u[0]) l = h ? "0p+0" : "0";
        else {
          if (s < 0 ? i-- : (t = new E(t), t.d = u, t.e = i, t = re(t, g, r, n, 0, A), u = t.d, i = t.e, c = GC), s = u[r], o = A / 2, c = c || u[r + 1] !== void 0, c = n < 4 ? (s !== void 0 || c) && (n === 0 || n === (t.s < 0 ? 3 : 2)) : s > o || s === o && (n === 4 || c || n === 6 && u[r - 1] & 1 || n === (t.s < 0 ? 8 : 7)), u.length = r, c) for (; ++u[--r] > A - 1; ) u[r] = 0, r || (++i, u.unshift(1));
          for (a = u.length; !u[a - 1]; --a) ;
          for (s = 0, l = ""; s < a; s++) l += xu.charAt(u[s]);
          if (h) {
            if (a > 1) if (e == 16 || e == 8) {
              for (s = e == 16 ? 4 : 3, --a; a % s; a++) l += "0";
              for (u = Jo(l, A, e), a = u.length; !u[a - 1]; --a) ;
              for (s = 1, l = "1."; s < a; s++) l += xu.charAt(u[s]);
            } else l = l.charAt(0) + "." + l.slice(1);
            l = l + (i < 0 ? "p" : "p+") + i;
          } else if (i < 0) {
            for (; ++i; ) l = "0" + l;
            l = "0." + l;
          } else if (++i > a) for (i -= a; i--; ) l += "0";
          else i < a && (l = l.slice(0, i) + "." + l.slice(i));
        }
        l = (e == 16 ? "0x" : e == 2 ? "0b" : e == 8 ? "0o" : "") + l;
      }
      return t.s < 0 ? "-" + l : l;
    }
    function PC(t, e) {
      if (t.length > e) return t.length = e, true;
    }
    function ex(t) {
      return new this(t).abs();
    }
    function tx(t) {
      return new this(t).acos();
    }
    function rx(t) {
      return new this(t).acosh();
    }
    function nx(t, e) {
      return new this(t).plus(e);
    }
    function Ax(t) {
      return new this(t).asin();
    }
    function ix(t) {
      return new this(t).asinh();
    }
    function sx(t) {
      return new this(t).atan();
    }
    function ox(t) {
      return new this(t).atanh();
    }
    function ax(t, e) {
      t = new this(t), e = new this(e);
      var r, n = this.precision, A = this.rounding, i = n + 4;
      return !t.s || !e.s ? r = new this(NaN) : !t.d && !e.d ? (r = kt(this, i, 1).times(e.s > 0 ? 0.25 : 0.75), r.s = t.s) : !e.d || t.isZero() ? (r = e.s < 0 ? kt(this, n, A) : new this(0), r.s = t.s) : !t.d || e.isZero() ? (r = kt(this, i, 1).times(0.5), r.s = t.s) : e.s < 0 ? (this.precision = i, this.rounding = 1, r = this.atan(re(t, e, i, 1)), e = kt(this, i, 1), this.precision = n, this.rounding = A, r = t.s < 0 ? r.minus(e) : r.plus(e)) : r = this.atan(re(t, e, i, 1)), r;
    }
    function cx(t) {
      return new this(t).cbrt();
    }
    function lx(t) {
      return b(t = new this(t), t.e + 1, 2);
    }
    function ux(t, e, r) {
      return new this(t).clamp(e, r);
    }
    function gx(t) {
      if (!t || typeof t != "object") throw Error(Xo + "Object expected");
      var e, r, n, A = t.defaults === true, i = ["precision", 1, Lr, "rounding", 0, 8, "toExpNeg", -AA, 0, "toExpPos", 0, AA, "maxE", 0, AA, "minE", -AA, 0, "modulo", 0, 9];
      for (e = 0; e < i.length; e += 3) if (r = i[e], A && (this[r] = Uu[r]), (n = t[r]) !== void 0) if (ke(n) === n && n >= i[e + 1] && n <= i[e + 2]) this[r] = n;
      else throw Error(Mr + r + ": " + n);
      if (r = "crypto", A && (this[r] = Uu[r]), (n = t[r]) !== void 0) if (n === true || n === false || n === 0 || n === 1) if (n) if (typeof crypto < "u" && crypto && (crypto.getRandomValues || crypto.randomBytes)) this[r] = true;
      else throw Error(VC);
      else this[r] = false;
      else throw Error(Mr + r + ": " + n);
      return this;
    }
    function Ex(t) {
      return new this(t).cos();
    }
    function dx(t) {
      return new this(t).cosh();
    }
    function XC(t) {
      var e, r, n;
      function A(i) {
        var s, o, a, c = this;
        if (!(c instanceof A)) return new A(i);
        if (c.constructor = A, YC(i)) {
          c.s = i.s, L ? !i.d || i.e > A.maxE ? (c.e = NaN, c.d = null) : i.e < A.minE ? (c.e = 0, c.d = [0]) : (c.e = i.e, c.d = i.d.slice()) : (c.e = i.e, c.d = i.d ? i.d.slice() : i.d);
          return;
        }
        if (a = typeof i, a === "number") {
          if (i === 0) {
            c.s = 1 / i < 0 ? -1 : 1, c.e = 0, c.d = [0];
            return;
          }
          if (i < 0 ? (i = -i, c.s = -1) : c.s = 1, i === ~~i && i < 1e7) {
            for (s = 0, o = i; o >= 10; o /= 10) s++;
            L ? s > A.maxE ? (c.e = NaN, c.d = null) : s < A.minE ? (c.e = 0, c.d = [0]) : (c.e = s, c.d = [i]) : (c.e = s, c.d = [i]);
            return;
          }
          if (i * 0 !== 0) {
            i || (c.s = NaN), c.e = NaN, c.d = null;
            return;
          }
          return Wo(c, i.toString());
        }
        if (a === "string") return (o = i.charCodeAt(0)) === 45 ? (i = i.slice(1), c.s = -1) : (o === 43 && (i = i.slice(1)), c.s = 1), qC.test(i) ? Wo(c, i) : KT(c, i);
        if (a === "bigint") return i < 0 ? (i = -i, c.s = -1) : c.s = 1, Wo(c, i.toString());
        throw Error(Mr + i);
      }
      if (A.prototype = y, A.ROUND_UP = 0, A.ROUND_DOWN = 1, A.ROUND_CEIL = 2, A.ROUND_FLOOR = 3, A.ROUND_HALF_UP = 4, A.ROUND_HALF_DOWN = 5, A.ROUND_HALF_EVEN = 6, A.ROUND_HALF_CEIL = 7, A.ROUND_HALF_FLOOR = 8, A.EUCLID = 9, A.config = A.set = gx, A.clone = XC, A.isDecimal = YC, A.abs = ex, A.acos = tx, A.acosh = rx, A.add = nx, A.asin = Ax, A.asinh = ix, A.atan = sx, A.atanh = ox, A.atan2 = ax, A.cbrt = cx, A.ceil = lx, A.clamp = ux, A.cos = Ex, A.cosh = dx, A.div = hx, A.exp = fx, A.floor = Qx, A.hypot = Cx, A.ln = Ix, A.log = Bx, A.log10 = mx, A.log2 = px, A.max = yx, A.min = wx, A.mod = Dx, A.mul = Rx, A.pow = Sx, A.random = bx, A.round = Nx, A.sign = Fx, A.sin = Tx, A.sinh = xx, A.sqrt = Ux, A.sub = kx, A.sum = Mx, A.tan = Lx, A.tanh = vx, A.trunc = Px, t === void 0 && (t = {}), t && t.defaults !== true) for (n = ["precision", "rounding", "toExpNeg", "toExpPos", "maxE", "minE", "modulo", "crypto"], e = 0; e < n.length; ) t.hasOwnProperty(r = n[e++]) || (t[r] = this[r]);
      return A.config(t), A;
    }
    function hx(t, e) {
      return new this(t).div(e);
    }
    function fx(t) {
      return new this(t).exp();
    }
    function Qx(t) {
      return b(t = new this(t), t.e + 1, 3);
    }
    function Cx() {
      var t, e, r = new this(0);
      for (L = false, t = 0; t < arguments.length; ) if (e = new this(arguments[t++]), e.d) r.d && (r = r.plus(e.times(e)));
      else {
        if (e.s) return L = true, new this(1 / 0);
        r = e;
      }
      return L = true, r.sqrt();
    }
    function YC(t) {
      return t instanceof un || t && t.toStringTag === HC || false;
    }
    function Ix(t) {
      return new this(t).ln();
    }
    function Bx(t, e) {
      return new this(t).log(e);
    }
    function px(t) {
      return new this(t).log(2);
    }
    function mx(t) {
      return new this(t).log(10);
    }
    function yx() {
      return _C(this, arguments, -1);
    }
    function wx() {
      return _C(this, arguments, 1);
    }
    function Dx(t, e) {
      return new this(t).mod(e);
    }
    function Rx(t, e) {
      return new this(t).mul(e);
    }
    function Sx(t, e) {
      return new this(t).pow(e);
    }
    function bx(t) {
      var e, r, n, A, i = 0, s = new this(1), o = [];
      if (t === void 0 ? t = this.precision : We(t, 1, Lr), n = Math.ceil(t / N), this.crypto) if (crypto.getRandomValues) for (e = crypto.getRandomValues(new Uint32Array(n)); i < n; ) A = e[i], A >= 429e7 ? e[i] = crypto.getRandomValues(new Uint32Array(1))[0] : o[i++] = A % 1e7;
      else if (crypto.randomBytes) {
        for (e = crypto.randomBytes(n *= 4); i < n; ) A = e[i] + (e[i + 1] << 8) + (e[i + 2] << 16) + ((e[i + 3] & 127) << 24), A >= 214e7 ? crypto.randomBytes(4).copy(e, i) : (o.push(A % 1e7), i += 4);
        i = n / 4;
      } else throw Error(VC);
      else for (; i < n; ) o[i++] = Math.random() * 1e7 | 0;
      for (n = o[--i], t %= N, n && t && (A = me(10, N - t), o[i] = (n / A | 0) * A); o[i] === 0; i--) o.pop();
      if (i < 0) r = 0, o = [0];
      else {
        for (r = -1; o[0] === 0; r -= N) o.shift();
        for (n = 1, A = o[0]; A >= 10; A /= 10) n++;
        n < N && (r -= N - n);
      }
      return s.e = r, s.d = o, s;
    }
    function Nx(t) {
      return b(t = new this(t), t.e + 1, this.rounding);
    }
    function Fx(t) {
      return t = new this(t), t.d ? t.d[0] ? t.s : 0 * t.s : t.s || NaN;
    }
    function Tx(t) {
      return new this(t).sin();
    }
    function xx(t) {
      return new this(t).sinh();
    }
    function Ux(t) {
      return new this(t).sqrt();
    }
    function kx(t, e) {
      return new this(t).sub(e);
    }
    function Mx() {
      var t = 0, e = arguments, r = new this(e[t]);
      for (L = false; r.s && ++t < e.length; ) r = r.plus(e[t]);
      return L = true, b(r, this.precision, this.rounding);
    }
    function Lx(t) {
      return new this(t).tan();
    }
    function vx(t) {
      return new this(t).tanh();
    }
    function Px(t) {
      return b(t = new this(t), t.e + 1, 1);
    }
    y[Symbol.for("nodejs.util.inspect.custom")] = y.toString;
    y[Symbol.toStringTag] = "Decimal";
    var un = y.constructor = XC(Uu);
    _o = new un(_o);
    jo = new un(jo);
    var Lt = un;
    function sA(t) {
      return t === null ? t : Array.isArray(t) ? t.map(sA) : typeof t == "object" ? Yx(t) ? Gx(t) : t.constructor !== null && t.constructor.name !== "Object" ? t : nA(t, sA) : t;
    }
    function Yx(t) {
      return t !== null && typeof t == "object" && typeof t.$type == "string";
    }
    function Gx({ $type: t, value: e }) {
      switch (t) {
        case "BigInt":
          return BigInt(e);
        case "Bytes": {
          let { buffer: r, byteOffset: n, byteLength: A } = Buffer.from(e, "base64");
          return new Uint8Array(r, n, A);
        }
        case "DateTime":
          return new Date(e);
        case "Decimal":
          return new Lt(e);
        case "Json":
          return JSON.parse(e);
        default:
          sr(e, "Unknown tagged value");
      }
    }
    var vt = class {
      _map = /* @__PURE__ */ new Map();
      get(e) {
        return this._map.get(e)?.value;
      }
      set(e, r) {
        this._map.set(e, { value: r });
      }
      getOrCreate(e, r) {
        let n = this._map.get(e);
        if (n) return n.value;
        let A = r();
        return this.set(e, A), A;
      }
    };
    function vr(t) {
      return t.substring(0, 1).toLowerCase() + t.substring(1);
    }
    function $C(t, e) {
      let r = {};
      for (let n of t) {
        let A = n[e];
        r[A] = n;
      }
      return r;
    }
    function xi(t) {
      let e;
      return { get() {
        return e || (e = { value: t() }), e.value;
      } };
    }
    function KC(t) {
      return { models: vu(t.models), enums: vu(t.enums), types: vu(t.types) };
    }
    function vu(t) {
      let e = {};
      for (let { name: r, ...n } of t) e[r] = n;
      return e;
    }
    function oA(t) {
      return t instanceof Date || Object.prototype.toString.call(t) === "[object Date]";
    }
    function zo(t) {
      return t.toString() !== "Invalid Date";
    }
    function aA(t) {
      return un.isDecimal(t) ? true : t !== null && typeof t == "object" && typeof t.s == "number" && typeof t.e == "number" && typeof t.toFixed == "function" && Array.isArray(t.d);
    }
    var Ui = {};
    Jn(Ui, { ModelAction: () => cA, datamodelEnumToSchemaEnum: () => Ox });
    function Ox(t) {
      return { name: t.name, values: t.values.map((e) => e.name) };
    }
    var cA = ((p) => (p.findUnique = "findUnique", p.findUniqueOrThrow = "findUniqueOrThrow", p.findFirst = "findFirst", p.findFirstOrThrow = "findFirstOrThrow", p.findMany = "findMany", p.create = "create", p.createMany = "createMany", p.createManyAndReturn = "createManyAndReturn", p.update = "update", p.updateMany = "updateMany", p.updateManyAndReturn = "updateManyAndReturn", p.upsert = "upsert", p.delete = "delete", p.deleteMany = "deleteMany", p.groupBy = "groupBy", p.count = "count", p.aggregate = "aggregate", p.findRaw = "findRaw", p.aggregateRaw = "aggregateRaw", p))(cA || {});
    var nI = G(Bu());
    var rI = G(__require("node:fs"));
    var zC = { keyword: Ar, entity: Ar, value: (t) => be(An(t)), punctuation: An, directive: Ar, function: Ar, variable: (t) => be(An(t)), string: (t) => be(Sr(t)), boolean: nr, number: Ar, comment: hi };
    var Vx = (t) => t;
    var ea = {};
    var Hx = 0;
    var P = { manual: ea.Prism && ea.Prism.manual, disableWorkerMessageHandler: ea.Prism && ea.Prism.disableWorkerMessageHandler, util: { encode: function(t) {
      if (t instanceof pt) {
        let e = t;
        return new pt(e.type, P.util.encode(e.content), e.alias);
      } else return Array.isArray(t) ? t.map(P.util.encode) : t.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
    }, type: function(t) {
      return Object.prototype.toString.call(t).slice(8, -1);
    }, objId: function(t) {
      return t.__id || Object.defineProperty(t, "__id", { value: ++Hx }), t.__id;
    }, clone: function t(e, r) {
      let n, A, i = P.util.type(e);
      switch (r = r || {}, i) {
        case "Object":
          if (A = P.util.objId(e), r[A]) return r[A];
          n = {}, r[A] = n;
          for (let s in e) e.hasOwnProperty(s) && (n[s] = t(e[s], r));
          return n;
        case "Array":
          return A = P.util.objId(e), r[A] ? r[A] : (n = [], r[A] = n, e.forEach(function(s, o) {
            n[o] = t(s, r);
          }), n);
        default:
          return e;
      }
    } }, languages: { extend: function(t, e) {
      let r = P.util.clone(P.languages[t]);
      for (let n in e) r[n] = e[n];
      return r;
    }, insertBefore: function(t, e, r, n) {
      n = n || P.languages;
      let A = n[t], i = {};
      for (let o in A) if (A.hasOwnProperty(o)) {
        if (o == e) for (let a in r) r.hasOwnProperty(a) && (i[a] = r[a]);
        r.hasOwnProperty(o) || (i[o] = A[o]);
      }
      let s = n[t];
      return n[t] = i, P.languages.DFS(P.languages, function(o, a) {
        a === s && o != t && (this[o] = i);
      }), i;
    }, DFS: function t(e, r, n, A) {
      A = A || {};
      let i = P.util.objId;
      for (let s in e) if (e.hasOwnProperty(s)) {
        r.call(e, s, e[s], n || s);
        let o = e[s], a = P.util.type(o);
        a === "Object" && !A[i(o)] ? (A[i(o)] = true, t(o, r, null, A)) : a === "Array" && !A[i(o)] && (A[i(o)] = true, t(o, r, s, A));
      }
    } }, plugins: {}, highlight: function(t, e, r) {
      let n = { code: t, grammar: e, language: r };
      return P.hooks.run("before-tokenize", n), n.tokens = P.tokenize(n.code, n.grammar), P.hooks.run("after-tokenize", n), pt.stringify(P.util.encode(n.tokens), n.language);
    }, matchGrammar: function(t, e, r, n, A, i, s) {
      for (let f in r) {
        if (!r.hasOwnProperty(f) || !r[f]) continue;
        if (f == s) return;
        let B = r[f];
        B = P.util.type(B) === "Array" ? B : [B];
        for (let Q = 0; Q < B.length; ++Q) {
          let I = B[Q], p = I.inside, w = !!I.lookbehind, D = !!I.greedy, v = 0, $ = I.alias;
          if (D && !I.pattern.global) {
            let W = I.pattern.toString().match(/[imuy]*$/)[0];
            I.pattern = RegExp(I.pattern.source, W + "g");
          }
          I = I.pattern || I;
          for (let W = n, ae = A; W < e.length; ae += e[W].length, ++W) {
            let xe = e[W];
            if (e.length > t.length) return;
            if (xe instanceof pt) continue;
            if (D && W != e.length - 1) {
              I.lastIndex = ae;
              var u = I.exec(t);
              if (!u) break;
              var l = u.index + (w ? u[1].length : 0), g = u.index + u[0].length, o = W, a = ae;
              for (let ee = e.length; o < ee && (a < g || !e[o].type && !e[o - 1].greedy); ++o) a += e[o].length, l >= a && (++W, ae = a);
              if (e[W] instanceof pt) continue;
              c = o - W, xe = t.slice(ae, a), u.index -= ae;
            } else {
              I.lastIndex = 0;
              var u = I.exec(xe), c = 1;
            }
            if (!u) {
              if (i) break;
              continue;
            }
            w && (v = u[1] ? u[1].length : 0);
            var l = u.index + v, u = u[0].slice(v), g = l + u.length, E = xe.slice(0, l), h = xe.slice(g);
            let te = [W, c];
            E && (++W, ae += E.length, te.push(E));
            let Rr = new pt(f, p ? P.tokenize(u, p) : u, $, u, D);
            if (te.push(Rr), h && te.push(h), Array.prototype.splice.apply(e, te), c != 1 && P.matchGrammar(t, e, r, W, ae, true, f), i) break;
          }
        }
      }
    }, tokenize: function(t, e) {
      let r = [t], n = e.rest;
      if (n) {
        for (let A in n) e[A] = n[A];
        delete e.rest;
      }
      return P.matchGrammar(t, r, e, 0, 0, false), r;
    }, hooks: { all: {}, add: function(t, e) {
      let r = P.hooks.all;
      r[t] = r[t] || [], r[t].push(e);
    }, run: function(t, e) {
      let r = P.hooks.all[t];
      if (!(!r || !r.length)) for (var n = 0, A; A = r[n++]; ) A(e);
    } }, Token: pt };
    P.languages.clike = { comment: [{ pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/, lookbehind: true }, { pattern: /(^|[^\\:])\/\/.*/, lookbehind: true, greedy: true }], string: { pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/, greedy: true }, "class-name": { pattern: /((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i, lookbehind: true, inside: { punctuation: /[.\\]/ } }, keyword: /\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/, boolean: /\b(?:true|false)\b/, function: /\w+(?=\()/, number: /\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i, operator: /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/, punctuation: /[{}[\];(),.:]/ };
    P.languages.javascript = P.languages.extend("clike", { "class-name": [P.languages.clike["class-name"], { pattern: /(^|[^$\w\xA0-\uFFFF])[_$A-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\.(?:prototype|constructor))/, lookbehind: true }], keyword: [{ pattern: /((?:^|})\s*)(?:catch|finally)\b/, lookbehind: true }, { pattern: /(^|[^.])\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/, lookbehind: true }], number: /\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/, function: /[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/, operator: /-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/ });
    P.languages.javascript["class-name"][0].pattern = /(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/;
    P.languages.insertBefore("javascript", "keyword", { regex: { pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^/\\\[\r\n])+\/[gimyus]{0,6}(?=\s*($|[\r\n,.;})\]]))/, lookbehind: true, greedy: true }, "function-variable": { pattern: /[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/, alias: "function" }, parameter: [{ pattern: /(function(?:\s+[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)?\s*\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\))/, lookbehind: true, inside: P.languages.javascript }, { pattern: /[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=>)/i, inside: P.languages.javascript }, { pattern: /(\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*=>)/, lookbehind: true, inside: P.languages.javascript }, { pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*\s*)\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*\{)/, lookbehind: true, inside: P.languages.javascript }], constant: /\b[A-Z](?:[A-Z_]|\dx?)*\b/ });
    P.languages.markup && P.languages.markup.tag.addInlined("script", "javascript");
    P.languages.js = P.languages.javascript;
    P.languages.typescript = P.languages.extend("javascript", { keyword: /\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\b/, builtin: /\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\b/ });
    P.languages.ts = P.languages.typescript;
    function pt(t, e, r, n, A) {
      this.type = t, this.content = e, this.alias = r, this.length = (n || "").length | 0, this.greedy = !!A;
    }
    pt.stringify = function(t, e) {
      return typeof t == "string" ? t : Array.isArray(t) ? t.map(function(r) {
        return pt.stringify(r, e);
      }).join("") : qx(t.type)(t.content);
    };
    function qx(t) {
      return zC[t] || Vx;
    }
    function eI(t) {
      return Jx(t, P.languages.javascript);
    }
    function Jx(t, e) {
      return P.tokenize(t, e).map((n) => pt.stringify(n)).join("");
    }
    function tI(t) {
      return Cu(t);
    }
    var ta = class t {
      firstLineNumber;
      lines;
      static read(e) {
        let r;
        try {
          r = rI.default.readFileSync(e, "utf-8");
        } catch {
          return null;
        }
        return t.fromContent(r);
      }
      static fromContent(e) {
        let r = e.split(/\r?\n/);
        return new t(1, r);
      }
      constructor(e, r) {
        this.firstLineNumber = e, this.lines = r;
      }
      get lastLineNumber() {
        return this.firstLineNumber + this.lines.length - 1;
      }
      mapLineAt(e, r) {
        if (e < this.firstLineNumber || e > this.lines.length + this.firstLineNumber) return this;
        let n = e - this.firstLineNumber, A = [...this.lines];
        return A[n] = r(A[n]), new t(this.firstLineNumber, A);
      }
      mapLines(e) {
        return new t(this.firstLineNumber, this.lines.map((r, n) => e(r, this.firstLineNumber + n)));
      }
      lineAt(e) {
        return this.lines[e - this.firstLineNumber];
      }
      prependSymbolAt(e, r) {
        return this.mapLines((n, A) => A === e ? `${r} ${n}` : `  ${n}`);
      }
      slice(e, r) {
        let n = this.lines.slice(e - 1, r).join(`
`);
        return new t(e, tI(n).split(`
`));
      }
      highlight() {
        let e = eI(this.toString());
        return new t(this.firstLineNumber, e.split(`
`));
      }
      toString() {
        return this.lines.join(`
`);
      }
    };
    var Wx = { red: at, gray: hi, dim: nn, bold: be, underline: Je, highlightSource: (t) => t.highlight() };
    var _x = { red: (t) => t, gray: (t) => t, dim: (t) => t, bold: (t) => t, underline: (t) => t, highlightSource: (t) => t };
    function jx({ message: t, originalMethod: e, isPanic: r, callArguments: n }) {
      return { functionName: `prisma.${e}()`, message: t, isPanic: r ?? false, callArguments: n };
    }
    function Zx({ callsite: t, message: e, originalMethod: r, isPanic: n, callArguments: A }, i) {
      let s = jx({ message: e, originalMethod: r, isPanic: n, callArguments: A });
      if (!t || typeof window < "u" || process.env.NODE_ENV === "production") return s;
      let o = t.getLocation();
      if (!o || !o.lineNumber || !o.columnNumber) return s;
      let a = Math.max(1, o.lineNumber - 3), c = ta.read(o.fileName)?.slice(a, o.lineNumber), l = c?.lineAt(o.lineNumber);
      if (c && l) {
        let u = $x(l), g = Xx(l);
        if (!g) return s;
        s.functionName = `${g.code})`, s.location = o, n || (c = c.mapLineAt(o.lineNumber, (h) => h.slice(0, g.openingBraceIndex))), c = i.highlightSource(c);
        let E = String(c.lastLineNumber).length;
        if (s.contextLines = c.mapLines((h, f) => i.gray(String(f).padStart(E)) + " " + h).mapLines((h) => i.dim(h)).prependSymbolAt(o.lineNumber, i.bold(i.red("→"))), A) {
          let h = u + E + 1;
          h += 2, s.callArguments = (0, nI.default)(A, h).slice(h);
        }
      }
      return s;
    }
    function Xx(t) {
      let e = Object.keys(cA).join("|"), n = new RegExp(String.raw`\.(${e})\(`).exec(t);
      if (n) {
        let A = n.index + n[0].length, i = t.lastIndexOf(" ", n.index) + 1;
        return { code: t.slice(i, A), openingBraceIndex: A };
      }
      return null;
    }
    function $x(t) {
      let e = 0;
      for (let r = 0; r < t.length; r++) {
        if (t.charAt(r) !== " ") return e;
        e++;
      }
      return e;
    }
    function Kx({ functionName: t, location: e, message: r, isPanic: n, contextLines: A, callArguments: i }, s) {
      let o = [""], a = e ? " in" : ":";
      if (n ? (o.push(s.red(`Oops, an unknown error occurred! This is ${s.bold("on us")}, you did nothing wrong.`)), o.push(s.red(`It occurred in the ${s.bold(`\`${t}\``)} invocation${a}`))) : o.push(s.red(`Invalid ${s.bold(`\`${t}\``)} invocation${a}`)), e && o.push(s.underline(zx(e))), A) {
        o.push("");
        let c = [A.toString()];
        i && (c.push(i), c.push(s.dim(")"))), o.push(c.join("")), i && o.push("");
      } else o.push(""), i && o.push(i), o.push("");
      return o.push(r), o.join(`
`);
    }
    function zx(t) {
      let e = [t.fileName];
      return t.lineNumber && e.push(String(t.lineNumber)), t.columnNumber && e.push(String(t.columnNumber)), e.join(":");
    }
    function ra(t) {
      let e = t.showColors ? Wx : _x, r;
      return r = Zx(t, e), Kx(r, e);
    }
    var gI = G(Pu());
    function oI(t, e, r) {
      let n = aI(t), A = eU(n), i = rU(A);
      i ? na(i, e, r) : e.addErrorMessage(() => "Unknown error");
    }
    function aI(t) {
      return t.errors.flatMap((e) => e.kind === "Union" ? aI(e) : [e]);
    }
    function eU(t) {
      let e = /* @__PURE__ */ new Map(), r = [];
      for (let n of t) {
        if (n.kind !== "InvalidArgumentType") {
          r.push(n);
          continue;
        }
        let A = `${n.selectionPath.join(".")}:${n.argumentPath.join(".")}`, i = e.get(A);
        i ? e.set(A, { ...n, argument: { ...n.argument, typeNames: tU(i.argument.typeNames, n.argument.typeNames) } }) : e.set(A, n);
      }
      return r.push(...e.values()), r;
    }
    function tU(t, e) {
      return [...new Set(t.concat(e))];
    }
    function rU(t) {
      return Tu(t, (e, r) => {
        let n = iI(e), A = iI(r);
        return n !== A ? n - A : sI(e) - sI(r);
      });
    }
    function iI(t) {
      let e = 0;
      return Array.isArray(t.selectionPath) && (e += t.selectionPath.length), Array.isArray(t.argumentPath) && (e += t.argumentPath.length), e;
    }
    function sI(t) {
      switch (t.kind) {
        case "InvalidArgumentValue":
        case "ValueTooLarge":
          return 20;
        case "InvalidArgumentType":
          return 10;
        case "RequiredArgumentMissing":
          return -10;
        default:
          return 0;
      }
    }
    var et = class {
      constructor(e, r) {
        this.name = e;
        this.value = r;
      }
      isRequired = false;
      makeRequired() {
        return this.isRequired = true, this;
      }
      write(e) {
        let { colors: { green: r } } = e.context;
        e.addMarginSymbol(r(this.isRequired ? "+" : "?")), e.write(r(this.name)), this.isRequired || e.write(r("?")), e.write(r(": ")), typeof this.value == "string" ? e.write(r(this.value)) : e.write(this.value);
      }
    };
    lI();
    var lA = class {
      constructor(e = 0, r) {
        this.context = r;
        this.currentIndent = e;
      }
      lines = [];
      currentLine = "";
      currentIndent = 0;
      marginSymbol;
      afterNextNewLineCallback;
      write(e) {
        return typeof e == "string" ? this.currentLine += e : e.write(this), this;
      }
      writeJoined(e, r, n = (A, i) => i.write(A)) {
        let A = r.length - 1;
        for (let i = 0; i < r.length; i++) n(r[i], this), i !== A && this.write(e);
        return this;
      }
      writeLine(e) {
        return this.write(e).newLine();
      }
      newLine() {
        this.lines.push(this.indentedCurrentLine()), this.currentLine = "", this.marginSymbol = void 0;
        let e = this.afterNextNewLineCallback;
        return this.afterNextNewLineCallback = void 0, e?.(), this;
      }
      withIndent(e) {
        return this.indent(), e(this), this.unindent(), this;
      }
      afterNextNewline(e) {
        return this.afterNextNewLineCallback = e, this;
      }
      indent() {
        return this.currentIndent++, this;
      }
      unindent() {
        return this.currentIndent > 0 && this.currentIndent--, this;
      }
      addMarginSymbol(e) {
        return this.marginSymbol = e, this;
      }
      toString() {
        return this.lines.concat(this.indentedCurrentLine()).join(`
`);
      }
      getCurrentLineLength() {
        return this.currentLine.length;
      }
      indentedCurrentLine() {
        let e = this.currentLine.padStart(this.currentLine.length + 2 * this.currentIndent);
        return this.marginSymbol ? this.marginSymbol + e.slice(1) : e;
      }
    };
    cI();
    var Aa = class {
      constructor(e) {
        this.value = e;
      }
      write(e) {
        e.write(this.value);
      }
      markAsError() {
        this.value.markAsError();
      }
    };
    var ia = (t) => t;
    var sa = { bold: ia, red: ia, green: ia, dim: ia, enabled: false };
    var uI = { bold: be, red: at, green: Sr, dim: nn, enabled: true };
    var uA = { write(t) {
      t.writeLine(",");
    } };
    var Pt = class {
      constructor(e) {
        this.contents = e;
      }
      isUnderlined = false;
      color = (e) => e;
      underline() {
        return this.isUnderlined = true, this;
      }
      setColor(e) {
        return this.color = e, this;
      }
      write(e) {
        let r = e.getCurrentLineLength();
        e.write(this.color(this.contents)), this.isUnderlined && e.afterNextNewline(() => {
          e.write(" ".repeat(r)).writeLine(this.color("~".repeat(this.contents.length)));
        });
      }
    };
    var Pr = class {
      hasError = false;
      markAsError() {
        return this.hasError = true, this;
      }
    };
    var gA = class extends Pr {
      items = [];
      addItem(e) {
        return this.items.push(new Aa(e)), this;
      }
      getField(e) {
        return this.items[e];
      }
      getPrintWidth() {
        return this.items.length === 0 ? 2 : Math.max(...this.items.map((r) => r.value.getPrintWidth())) + 2;
      }
      write(e) {
        if (this.items.length === 0) {
          this.writeEmpty(e);
          return;
        }
        this.writeWithItems(e);
      }
      writeEmpty(e) {
        let r = new Pt("[]");
        this.hasError && r.setColor(e.context.colors.red).underline(), e.write(r);
      }
      writeWithItems(e) {
        let { colors: r } = e.context;
        e.writeLine("[").withIndent(() => e.writeJoined(uA, this.items).newLine()).write("]"), this.hasError && e.afterNextNewline(() => {
          e.writeLine(r.red("~".repeat(this.getPrintWidth())));
        });
      }
      asObject() {
      }
    };
    var EA = class t extends Pr {
      fields = {};
      suggestions = [];
      addField(e) {
        this.fields[e.name] = e;
      }
      addSuggestion(e) {
        this.suggestions.push(e);
      }
      getField(e) {
        return this.fields[e];
      }
      getDeepField(e) {
        let [r, ...n] = e, A = this.getField(r);
        if (!A) return;
        let i = A;
        for (let s of n) {
          let o;
          if (i.value instanceof t ? o = i.value.getField(s) : i.value instanceof gA && (o = i.value.getField(Number(s))), !o) return;
          i = o;
        }
        return i;
      }
      getDeepFieldValue(e) {
        return e.length === 0 ? this : this.getDeepField(e)?.value;
      }
      hasField(e) {
        return !!this.getField(e);
      }
      removeAllFields() {
        this.fields = {};
      }
      removeField(e) {
        delete this.fields[e];
      }
      getFields() {
        return this.fields;
      }
      isEmpty() {
        return Object.keys(this.fields).length === 0;
      }
      getFieldValue(e) {
        return this.getField(e)?.value;
      }
      getDeepSubSelectionValue(e) {
        let r = this;
        for (let n of e) {
          if (!(r instanceof t)) return;
          let A = r.getSubSelectionValue(n);
          if (!A) return;
          r = A;
        }
        return r;
      }
      getDeepSelectionParent(e) {
        let r = this.getSelectionParent();
        if (!r) return;
        let n = r;
        for (let A of e) {
          let i = n.value.getFieldValue(A);
          if (!i || !(i instanceof t)) return;
          let s = i.getSelectionParent();
          if (!s) return;
          n = s;
        }
        return n;
      }
      getSelectionParent() {
        let e = this.getField("select")?.value.asObject();
        if (e) return { kind: "select", value: e };
        let r = this.getField("include")?.value.asObject();
        if (r) return { kind: "include", value: r };
      }
      getSubSelectionValue(e) {
        return this.getSelectionParent()?.value.fields[e].value;
      }
      getPrintWidth() {
        let e = Object.values(this.fields);
        return e.length == 0 ? 2 : Math.max(...e.map((n) => n.getPrintWidth())) + 2;
      }
      write(e) {
        let r = Object.values(this.fields);
        if (r.length === 0 && this.suggestions.length === 0) {
          this.writeEmpty(e);
          return;
        }
        this.writeWithContents(e, r);
      }
      asObject() {
        return this;
      }
      writeEmpty(e) {
        let r = new Pt("{}");
        this.hasError && r.setColor(e.context.colors.red).underline(), e.write(r);
      }
      writeWithContents(e, r) {
        e.writeLine("{").withIndent(() => {
          e.writeJoined(uA, [...r, ...this.suggestions]).newLine();
        }), e.write("}"), this.hasError && e.afterNextNewline(() => {
          e.writeLine(e.context.colors.red("~".repeat(this.getPrintWidth())));
        });
      }
    };
    var De = class extends Pr {
      constructor(r) {
        super();
        this.text = r;
      }
      getPrintWidth() {
        return this.text.length;
      }
      write(r) {
        let n = new Pt(this.text);
        this.hasError && n.underline().setColor(r.context.colors.red), r.write(n);
      }
      asObject() {
      }
    };
    var ki = class {
      fields = [];
      addField(e, r) {
        return this.fields.push({ write(n) {
          let { green: A, dim: i } = n.context.colors;
          n.write(A(i(`${e}: ${r}`))).addMarginSymbol(A(i("+")));
        } }), this;
      }
      write(e) {
        let { colors: { green: r } } = e.context;
        e.writeLine(r("{")).withIndent(() => {
          e.writeJoined(uA, this.fields).newLine();
        }).write(r("}")).addMarginSymbol(r("+"));
      }
    };
    function na(t, e, r) {
      switch (t.kind) {
        case "MutuallyExclusiveFields":
          nU(t, e);
          break;
        case "IncludeOnScalar":
          AU(t, e);
          break;
        case "EmptySelection":
          iU(t, e, r);
          break;
        case "UnknownSelectionField":
          cU(t, e);
          break;
        case "InvalidSelectionValue":
          lU(t, e);
          break;
        case "UnknownArgument":
          uU(t, e);
          break;
        case "UnknownInputField":
          gU(t, e);
          break;
        case "RequiredArgumentMissing":
          EU(t, e);
          break;
        case "InvalidArgumentType":
          dU(t, e);
          break;
        case "InvalidArgumentValue":
          hU(t, e);
          break;
        case "ValueTooLarge":
          fU(t, e);
          break;
        case "SomeFieldsMissing":
          QU(t, e);
          break;
        case "TooManyFieldsGiven":
          CU(t, e);
          break;
        case "Union":
          oI(t, e, r);
          break;
        default:
          throw new Error("not implemented: " + t.kind);
      }
    }
    function nU(t, e) {
      let r = e.arguments.getDeepSubSelectionValue(t.selectionPath)?.asObject();
      r && (r.getField(t.firstField)?.markAsError(), r.getField(t.secondField)?.markAsError()), e.addErrorMessage((n) => `Please ${n.bold("either")} use ${n.green(`\`${t.firstField}\``)} or ${n.green(`\`${t.secondField}\``)}, but ${n.red("not both")} at the same time.`);
    }
    function AU(t, e) {
      let [r, n] = Mi(t.selectionPath), A = t.outputType, i = e.arguments.getDeepSelectionParent(r)?.value;
      if (i && (i.getField(n)?.markAsError(), A)) for (let s of A.fields) s.isRelation && i.addSuggestion(new et(s.name, "true"));
      e.addErrorMessage((s) => {
        let o = `Invalid scalar field ${s.red(`\`${n}\``)} for ${s.bold("include")} statement`;
        return A ? o += ` on model ${s.bold(A.name)}. ${Li(s)}` : o += ".", o += `
Note that ${s.bold("include")} statements only accept relation fields.`, o;
      });
    }
    function iU(t, e, r) {
      let n = e.arguments.getDeepSubSelectionValue(t.selectionPath)?.asObject();
      if (n) {
        let A = n.getField("omit")?.value.asObject();
        if (A) {
          sU(t, e, A);
          return;
        }
        if (n.hasField("select")) {
          oU(t, e);
          return;
        }
      }
      if (r?.[vr(t.outputType.name)]) {
        aU(t, e);
        return;
      }
      e.addErrorMessage(() => `Unknown field at "${t.selectionPath.join(".")} selection"`);
    }
    function sU(t, e, r) {
      r.removeAllFields();
      for (let n of t.outputType.fields) r.addSuggestion(new et(n.name, "false"));
      e.addErrorMessage((n) => `The ${n.red("omit")} statement includes every field of the model ${n.bold(t.outputType.name)}. At least one field must be included in the result`);
    }
    function oU(t, e) {
      let r = t.outputType, n = e.arguments.getDeepSelectionParent(t.selectionPath)?.value, A = n?.isEmpty() ?? false;
      n && (n.removeAllFields(), hI(n, r)), e.addErrorMessage((i) => A ? `The ${i.red("`select`")} statement for type ${i.bold(r.name)} must not be empty. ${Li(i)}` : `The ${i.red("`select`")} statement for type ${i.bold(r.name)} needs ${i.bold("at least one truthy value")}.`);
    }
    function aU(t, e) {
      let r = new ki();
      for (let A of t.outputType.fields) A.isRelation || r.addField(A.name, "false");
      let n = new et("omit", r).makeRequired();
      if (t.selectionPath.length === 0) e.arguments.addSuggestion(n);
      else {
        let [A, i] = Mi(t.selectionPath), o = e.arguments.getDeepSelectionParent(A)?.value.asObject()?.getField(i);
        if (o) {
          let a = o?.value.asObject() ?? new EA();
          a.addSuggestion(n), o.value = a;
        }
      }
      e.addErrorMessage((A) => `The global ${A.red("omit")} configuration excludes every field of the model ${A.bold(t.outputType.name)}. At least one field must be included in the result`);
    }
    function cU(t, e) {
      let r = fI(t.selectionPath, e);
      if (r.parentKind !== "unknown") {
        r.field.markAsError();
        let n = r.parent;
        switch (r.parentKind) {
          case "select":
            hI(n, t.outputType);
            break;
          case "include":
            IU(n, t.outputType);
            break;
          case "omit":
            BU(n, t.outputType);
            break;
        }
      }
      e.addErrorMessage((n) => {
        let A = [`Unknown field ${n.red(`\`${r.fieldName}\``)}`];
        return r.parentKind !== "unknown" && A.push(`for ${n.bold(r.parentKind)} statement`), A.push(`on model ${n.bold(`\`${t.outputType.name}\``)}.`), A.push(Li(n)), A.join(" ");
      });
    }
    function lU(t, e) {
      let r = fI(t.selectionPath, e);
      r.parentKind !== "unknown" && r.field.value.markAsError(), e.addErrorMessage((n) => `Invalid value for selection field \`${n.red(r.fieldName)}\`: ${t.underlyingError}`);
    }
    function uU(t, e) {
      let r = t.argumentPath[0], n = e.arguments.getDeepSubSelectionValue(t.selectionPath)?.asObject();
      n && (n.getField(r)?.markAsError(), pU(n, t.arguments)), e.addErrorMessage((A) => EI(A, r, t.arguments.map((i) => i.name)));
    }
    function gU(t, e) {
      let [r, n] = Mi(t.argumentPath), A = e.arguments.getDeepSubSelectionValue(t.selectionPath)?.asObject();
      if (A) {
        A.getDeepField(t.argumentPath)?.markAsError();
        let i = A.getDeepFieldValue(r)?.asObject();
        i && QI(i, t.inputType);
      }
      e.addErrorMessage((i) => EI(i, n, t.inputType.fields.map((s) => s.name)));
    }
    function EI(t, e, r) {
      let n = [`Unknown argument \`${t.red(e)}\`.`], A = yU(e, r);
      return A && n.push(`Did you mean \`${t.green(A)}\`?`), r.length > 0 && n.push(Li(t)), n.join(" ");
    }
    function EU(t, e) {
      let r;
      e.addErrorMessage((a) => r?.value instanceof De && r.value.text === "null" ? `Argument \`${a.green(i)}\` must not be ${a.red("null")}.` : `Argument \`${a.green(i)}\` is missing.`);
      let n = e.arguments.getDeepSubSelectionValue(t.selectionPath)?.asObject();
      if (!n) return;
      let [A, i] = Mi(t.argumentPath), s = new ki(), o = n.getDeepFieldValue(A)?.asObject();
      if (o) if (r = o.getField(i), r && o.removeField(i), t.inputTypes.length === 1 && t.inputTypes[0].kind === "object") {
        for (let a of t.inputTypes[0].fields) s.addField(a.name, a.typeNames.join(" | "));
        o.addSuggestion(new et(i, s).makeRequired());
      } else {
        let a = t.inputTypes.map(dI).join(" | ");
        o.addSuggestion(new et(i, a).makeRequired());
      }
    }
    function dI(t) {
      return t.kind === "list" ? `${dI(t.elementType)}[]` : t.name;
    }
    function dU(t, e) {
      let r = t.argument.name, n = e.arguments.getDeepSubSelectionValue(t.selectionPath)?.asObject();
      n && n.getDeepFieldValue(t.argumentPath)?.markAsError(), e.addErrorMessage((A) => {
        let i = oa("or", t.argument.typeNames.map((s) => A.green(s)));
        return `Argument \`${A.bold(r)}\`: Invalid value provided. Expected ${i}, provided ${A.red(t.inferredType)}.`;
      });
    }
    function hU(t, e) {
      let r = t.argument.name, n = e.arguments.getDeepSubSelectionValue(t.selectionPath)?.asObject();
      n && n.getDeepFieldValue(t.argumentPath)?.markAsError(), e.addErrorMessage((A) => {
        let i = [`Invalid value for argument \`${A.bold(r)}\``];
        if (t.underlyingError && i.push(`: ${t.underlyingError}`), i.push("."), t.argument.typeNames.length > 0) {
          let s = oa("or", t.argument.typeNames.map((o) => A.green(o)));
          i.push(` Expected ${s}.`);
        }
        return i.join("");
      });
    }
    function fU(t, e) {
      let r = t.argument.name, n = e.arguments.getDeepSubSelectionValue(t.selectionPath)?.asObject(), A;
      if (n) {
        let s = n.getDeepField(t.argumentPath)?.value;
        s?.markAsError(), s instanceof De && (A = s.text);
      }
      e.addErrorMessage((i) => {
        let s = ["Unable to fit value"];
        return A && s.push(i.red(A)), s.push(`into a 64-bit signed integer for field \`${i.bold(r)}\``), s.join(" ");
      });
    }
    function QU(t, e) {
      let r = t.argumentPath[t.argumentPath.length - 1], n = e.arguments.getDeepSubSelectionValue(t.selectionPath)?.asObject();
      if (n) {
        let A = n.getDeepFieldValue(t.argumentPath)?.asObject();
        A && QI(A, t.inputType);
      }
      e.addErrorMessage((A) => {
        let i = [`Argument \`${A.bold(r)}\` of type ${A.bold(t.inputType.name)} needs`];
        return t.constraints.minFieldCount === 1 ? t.constraints.requiredFields ? i.push(`${A.green("at least one of")} ${oa("or", t.constraints.requiredFields.map((s) => `\`${A.bold(s)}\``))} arguments.`) : i.push(`${A.green("at least one")} argument.`) : i.push(`${A.green(`at least ${t.constraints.minFieldCount}`)} arguments.`), i.push(Li(A)), i.join(" ");
      });
    }
    function CU(t, e) {
      let r = t.argumentPath[t.argumentPath.length - 1], n = e.arguments.getDeepSubSelectionValue(t.selectionPath)?.asObject(), A = [];
      if (n) {
        let i = n.getDeepFieldValue(t.argumentPath)?.asObject();
        i && (i.markAsError(), A = Object.keys(i.getFields()));
      }
      e.addErrorMessage((i) => {
        let s = [`Argument \`${i.bold(r)}\` of type ${i.bold(t.inputType.name)} needs`];
        return t.constraints.minFieldCount === 1 && t.constraints.maxFieldCount == 1 ? s.push(`${i.green("exactly one")} argument,`) : t.constraints.maxFieldCount == 1 ? s.push(`${i.green("at most one")} argument,`) : s.push(`${i.green(`at most ${t.constraints.maxFieldCount}`)} arguments,`), s.push(`but you provided ${oa("and", A.map((o) => i.red(o)))}. Please choose`), t.constraints.maxFieldCount === 1 ? s.push("one.") : s.push(`${t.constraints.maxFieldCount}.`), s.join(" ");
      });
    }
    function hI(t, e) {
      for (let r of e.fields) t.hasField(r.name) || t.addSuggestion(new et(r.name, "true"));
    }
    function IU(t, e) {
      for (let r of e.fields) r.isRelation && !t.hasField(r.name) && t.addSuggestion(new et(r.name, "true"));
    }
    function BU(t, e) {
      for (let r of e.fields) !t.hasField(r.name) && !r.isRelation && t.addSuggestion(new et(r.name, "true"));
    }
    function pU(t, e) {
      for (let r of e) t.hasField(r.name) || t.addSuggestion(new et(r.name, r.typeNames.join(" | ")));
    }
    function fI(t, e) {
      let [r, n] = Mi(t), A = e.arguments.getDeepSubSelectionValue(r)?.asObject();
      if (!A) return { parentKind: "unknown", fieldName: n };
      let i = A.getFieldValue("select")?.asObject(), s = A.getFieldValue("include")?.asObject(), o = A.getFieldValue("omit")?.asObject(), a = i?.getField(n);
      return i && a ? { parentKind: "select", parent: i, field: a, fieldName: n } : (a = s?.getField(n), s && a ? { parentKind: "include", field: a, parent: s, fieldName: n } : (a = o?.getField(n), o && a ? { parentKind: "omit", field: a, parent: o, fieldName: n } : { parentKind: "unknown", fieldName: n }));
    }
    function QI(t, e) {
      if (e.kind === "object") for (let r of e.fields) t.hasField(r.name) || t.addSuggestion(new et(r.name, r.typeNames.join(" | ")));
    }
    function Mi(t) {
      let e = [...t], r = e.pop();
      if (!r) throw new Error("unexpected empty path");
      return [e, r];
    }
    function Li({ green: t, enabled: e }) {
      return "Available options are " + (e ? `listed in ${t("green")}` : "marked with ?") + ".";
    }
    function oa(t, e) {
      if (e.length === 1) return e[0];
      let r = [...e], n = r.pop();
      return `${r.join(", ")} ${t} ${n}`;
    }
    var mU = 3;
    function yU(t, e) {
      let r = 1 / 0, n;
      for (let A of e) {
        let i = (0, gI.default)(t, A);
        i > mU || i < r && (r = i, n = A);
      }
      return n;
    }
    var vi = class {
      modelName;
      name;
      typeName;
      isList;
      isEnum;
      constructor(e, r, n, A, i) {
        this.modelName = e, this.name = r, this.typeName = n, this.isList = A, this.isEnum = i;
      }
      _toGraphQLInputType() {
        let e = this.isList ? "List" : "", r = this.isEnum ? "Enum" : "";
        return `${e}${r}${this.typeName}FieldRefInput<${this.modelName}>`;
      }
    };
    function dA(t) {
      return t instanceof vi;
    }
    var aa = Symbol();
    var Gu = /* @__PURE__ */ new WeakMap();
    var cr = class {
      constructor(e) {
        e === aa ? Gu.set(this, `Prisma.${this._getName()}`) : Gu.set(this, `new Prisma.${this._getNamespace()}.${this._getName()}()`);
      }
      _getName() {
        return this.constructor.name;
      }
      toString() {
        return Gu.get(this);
      }
    };
    var Pi = class extends cr {
      _getNamespace() {
        return "NullTypes";
      }
    };
    var Yi = class extends Pi {
      #e;
    };
    Ou(Yi, "DbNull");
    var Gi = class extends Pi {
      #e;
    };
    Ou(Gi, "JsonNull");
    var Oi = class extends Pi {
      #e;
    };
    Ou(Oi, "AnyNull");
    var ca = { classes: { DbNull: Yi, JsonNull: Gi, AnyNull: Oi }, instances: { DbNull: new Yi(aa), JsonNull: new Gi(aa), AnyNull: new Oi(aa) } };
    function Ou(t, e) {
      Object.defineProperty(t, "name", { value: e, configurable: true });
    }
    var CI = ": ";
    var la = class {
      constructor(e, r) {
        this.name = e;
        this.value = r;
      }
      hasError = false;
      markAsError() {
        this.hasError = true;
      }
      getPrintWidth() {
        return this.name.length + this.value.getPrintWidth() + CI.length;
      }
      write(e) {
        let r = new Pt(this.name);
        this.hasError && r.underline().setColor(e.context.colors.red), e.write(r).write(CI).write(this.value);
      }
    };
    var Vu = class {
      arguments;
      errorMessages = [];
      constructor(e) {
        this.arguments = e;
      }
      write(e) {
        e.write(this.arguments);
      }
      addErrorMessage(e) {
        this.errorMessages.push(e);
      }
      renderAllMessages(e) {
        return this.errorMessages.map((r) => r(e)).join(`
`);
      }
    };
    function hA(t) {
      return new Vu(II(t));
    }
    function II(t) {
      let e = new EA();
      for (let [r, n] of Object.entries(t)) {
        let A = new la(r, BI(n));
        e.addField(A);
      }
      return e;
    }
    function BI(t) {
      if (typeof t == "string") return new De(JSON.stringify(t));
      if (typeof t == "number" || typeof t == "boolean") return new De(String(t));
      if (typeof t == "bigint") return new De(`${t}n`);
      if (t === null) return new De("null");
      if (t === void 0) return new De("undefined");
      if (aA(t)) return new De(`new Prisma.Decimal("${t.toFixed()}")`);
      if (t instanceof Uint8Array) return Buffer.isBuffer(t) ? new De(`Buffer.alloc(${t.byteLength})`) : new De(`new Uint8Array(${t.byteLength})`);
      if (t instanceof Date) {
        let e = zo(t) ? t.toISOString() : "Invalid Date";
        return new De(`new Date("${e}")`);
      }
      return t instanceof cr ? new De(`Prisma.${t._getName()}`) : dA(t) ? new De(`prisma.${vr(t.modelName)}.$fields.${t.name}`) : Array.isArray(t) ? wU(t) : typeof t == "object" ? II(t) : new De(Object.prototype.toString.call(t));
    }
    function wU(t) {
      let e = new gA();
      for (let r of t) e.addItem(BI(r));
      return e;
    }
    function ua(t, e) {
      let r = e === "pretty" ? uI : sa, n = t.renderAllMessages(r), A = new lA(0, { colors: r }).write(t).toString();
      return { message: n, args: A };
    }
    function ga({ args: t, errors: e, errorFormat: r, callsite: n, originalMethod: A, clientVersion: i, globalOmit: s }) {
      let o = hA(t);
      for (let u of e) na(u, o, s);
      let { message: a, args: c } = ua(o, r), l = ra({ message: a, callsite: n, originalMethod: A, showColors: r === "pretty", callArguments: c });
      throw new Ue(l, { clientVersion: i });
    }
    function Yt(t) {
      return t.replace(/^./, (e) => e.toLowerCase());
    }
    function mI(t, e, r) {
      let n = Yt(r);
      return !e.result || !(e.result.$allModels || e.result[n]) ? t : DU({ ...t, ...pI(e.name, t, e.result.$allModels), ...pI(e.name, t, e.result[n]) });
    }
    function DU(t) {
      let e = new vt(), r = (n, A) => e.getOrCreate(n, () => A.has(n) ? [n] : (A.add(n), t[n] ? t[n].needs.flatMap((i) => r(i, A)) : [n]));
      return nA(t, (n) => ({ ...n, needs: r(n.name, /* @__PURE__ */ new Set()) }));
    }
    function pI(t, e, r) {
      return r ? nA(r, ({ needs: n, compute: A }, i) => ({ name: i, needs: n ? Object.keys(n).filter((s) => n[s]) : [], compute: RU(e, i, A) })) : {};
    }
    function RU(t, e, r) {
      let n = t?.[e]?.compute;
      return n ? (A) => r({ ...A, [e]: n(A) }) : r;
    }
    function yI(t, e) {
      if (!e) return t;
      let r = { ...t };
      for (let n of Object.values(e)) if (t[n.name]) for (let A of n.needs) r[A] = true;
      return r;
    }
    function wI(t, e) {
      if (!e) return t;
      let r = { ...t };
      for (let n of Object.values(e)) if (!t[n.name]) for (let A of n.needs) delete r[A];
      return r;
    }
    var Ea = class {
      constructor(e, r) {
        this.extension = e;
        this.previous = r;
      }
      computedFieldsCache = new vt();
      modelExtensionsCache = new vt();
      queryCallbacksCache = new vt();
      clientExtensions = xi(() => this.extension.client ? { ...this.previous?.getAllClientExtensions(), ...this.extension.client } : this.previous?.getAllClientExtensions());
      batchCallbacks = xi(() => {
        let e = this.previous?.getAllBatchQueryCallbacks() ?? [], r = this.extension.query?.$__internalBatch;
        return r ? e.concat(r) : e;
      });
      getAllComputedFields(e) {
        return this.computedFieldsCache.getOrCreate(e, () => mI(this.previous?.getAllComputedFields(e), this.extension, e));
      }
      getAllClientExtensions() {
        return this.clientExtensions.get();
      }
      getAllModelExtensions(e) {
        return this.modelExtensionsCache.getOrCreate(e, () => {
          let r = Yt(e);
          return !this.extension.model || !(this.extension.model[r] || this.extension.model.$allModels) ? this.previous?.getAllModelExtensions(e) : { ...this.previous?.getAllModelExtensions(e), ...this.extension.model.$allModels, ...this.extension.model[r] };
        });
      }
      getAllQueryCallbacks(e, r) {
        return this.queryCallbacksCache.getOrCreate(`${e}:${r}`, () => {
          let n = this.previous?.getAllQueryCallbacks(e, r) ?? [], A = [], i = this.extension.query;
          return !i || !(i[e] || i.$allModels || i[r] || i.$allOperations) ? n : (i[e] !== void 0 && (i[e][r] !== void 0 && A.push(i[e][r]), i[e].$allOperations !== void 0 && A.push(i[e].$allOperations)), e !== "$none" && i.$allModels !== void 0 && (i.$allModels[r] !== void 0 && A.push(i.$allModels[r]), i.$allModels.$allOperations !== void 0 && A.push(i.$allModels.$allOperations)), i[r] !== void 0 && A.push(i[r]), i.$allOperations !== void 0 && A.push(i.$allOperations), n.concat(A));
        });
      }
      getAllBatchQueryCallbacks() {
        return this.batchCallbacks.get();
      }
    };
    var fA = class t {
      constructor(e) {
        this.head = e;
      }
      static empty() {
        return new t();
      }
      static single(e) {
        return new t(new Ea(e));
      }
      isEmpty() {
        return this.head === void 0;
      }
      append(e) {
        return new t(new Ea(e, this.head));
      }
      getAllComputedFields(e) {
        return this.head?.getAllComputedFields(e);
      }
      getAllClientExtensions() {
        return this.head?.getAllClientExtensions();
      }
      getAllModelExtensions(e) {
        return this.head?.getAllModelExtensions(e);
      }
      getAllQueryCallbacks(e, r) {
        return this.head?.getAllQueryCallbacks(e, r) ?? [];
      }
      getAllBatchQueryCallbacks() {
        return this.head?.getAllBatchQueryCallbacks() ?? [];
      }
    };
    var da = class {
      constructor(e) {
        this.name = e;
      }
    };
    function DI(t) {
      return t instanceof da;
    }
    function RI(t) {
      return new da(t);
    }
    var SI = Symbol();
    var Vi = class {
      constructor(e) {
        if (e !== SI) throw new Error("Skip instance can not be constructed directly");
      }
      ifUndefined(e) {
        return e === void 0 ? ha : e;
      }
    };
    var ha = new Vi(SI);
    function Gt(t) {
      return t instanceof Vi;
    }
    var SU = { findUnique: "findUnique", findUniqueOrThrow: "findUniqueOrThrow", findFirst: "findFirst", findFirstOrThrow: "findFirstOrThrow", findMany: "findMany", count: "aggregate", create: "createOne", createMany: "createMany", createManyAndReturn: "createManyAndReturn", update: "updateOne", updateMany: "updateMany", updateManyAndReturn: "updateManyAndReturn", upsert: "upsertOne", delete: "deleteOne", deleteMany: "deleteMany", executeRaw: "executeRaw", queryRaw: "queryRaw", aggregate: "aggregate", groupBy: "groupBy", runCommandRaw: "runCommandRaw", findRaw: "findRaw", aggregateRaw: "aggregateRaw" };
    var bI = "explicitly `undefined` values are not allowed";
    function fa({ modelName: t, action: e, args: r, runtimeDataModel: n, extensions: A = fA.empty(), callsite: i, clientMethod: s, errorFormat: o, clientVersion: a, previewFeatures: c, globalOmit: l }) {
      let u = new Hu({ runtimeDataModel: n, modelName: t, action: e, rootArgs: r, callsite: i, extensions: A, selectionPath: [], argumentPath: [], originalMethod: s, errorFormat: o, clientVersion: a, previewFeatures: c, globalOmit: l });
      return { modelName: t, action: SU[e], query: Hi(r, u) };
    }
    function Hi({ select: t, include: e, ...r } = {}, n) {
      let A = r.omit;
      return delete r.omit, { arguments: FI(r, n), selection: bU(t, e, A, n) };
    }
    function bU(t, e, r, n) {
      return t ? (e ? n.throwValidationError({ kind: "MutuallyExclusiveFields", firstField: "include", secondField: "select", selectionPath: n.getSelectionPath() }) : r && n.throwValidationError({ kind: "MutuallyExclusiveFields", firstField: "omit", secondField: "select", selectionPath: n.getSelectionPath() }), xU(t, n)) : NU(n, e, r);
    }
    function NU(t, e, r) {
      let n = {};
      return t.modelOrType && !t.isRawAction() && (n.$composites = true, n.$scalars = true), e && FU(n, e, t), TU(n, r, t), n;
    }
    function FU(t, e, r) {
      for (let [n, A] of Object.entries(e)) {
        if (Gt(A)) continue;
        let i = r.nestSelection(n);
        if (qu(A, i), A === false || A === void 0) {
          t[n] = false;
          continue;
        }
        let s = r.findField(n);
        if (s && s.kind !== "object" && r.throwValidationError({ kind: "IncludeOnScalar", selectionPath: r.getSelectionPath().concat(n), outputType: r.getOutputTypeDescription() }), s) {
          t[n] = Hi(A === true ? {} : A, i);
          continue;
        }
        if (A === true) {
          t[n] = true;
          continue;
        }
        t[n] = Hi(A, i);
      }
    }
    function TU(t, e, r) {
      let n = r.getComputedFields(), A = { ...r.getGlobalOmit(), ...e }, i = wI(A, n);
      for (let [s, o] of Object.entries(i)) {
        if (Gt(o)) continue;
        qu(o, r.nestSelection(s));
        let a = r.findField(s);
        n?.[s] && !a || (t[s] = !o);
      }
    }
    function xU(t, e) {
      let r = {}, n = e.getComputedFields(), A = yI(t, n);
      for (let [i, s] of Object.entries(A)) {
        if (Gt(s)) continue;
        let o = e.nestSelection(i);
        qu(s, o);
        let a = e.findField(i);
        if (!(n?.[i] && !a)) {
          if (s === false || s === void 0 || Gt(s)) {
            r[i] = false;
            continue;
          }
          if (s === true) {
            a?.kind === "object" ? r[i] = Hi({}, o) : r[i] = true;
            continue;
          }
          r[i] = Hi(s, o);
        }
      }
      return r;
    }
    function NI(t, e) {
      if (t === null) return null;
      if (typeof t == "string" || typeof t == "number" || typeof t == "boolean") return t;
      if (typeof t == "bigint") return { $type: "BigInt", value: String(t) };
      if (oA(t)) {
        if (zo(t)) return { $type: "DateTime", value: t.toISOString() };
        e.throwValidationError({ kind: "InvalidArgumentValue", selectionPath: e.getSelectionPath(), argumentPath: e.getArgumentPath(), argument: { name: e.getArgumentName(), typeNames: ["Date"] }, underlyingError: "Provided Date object is invalid" });
      }
      if (DI(t)) return { $type: "Param", value: t.name };
      if (dA(t)) return { $type: "FieldRef", value: { _ref: t.name, _container: t.modelName } };
      if (Array.isArray(t)) return UU(t, e);
      if (ArrayBuffer.isView(t)) {
        let { buffer: r, byteOffset: n, byteLength: A } = t;
        return { $type: "Bytes", value: Buffer.from(r, n, A).toString("base64") };
      }
      if (kU(t)) return t.values;
      if (aA(t)) return { $type: "Decimal", value: t.toFixed() };
      if (t instanceof cr) {
        if (t !== ca.instances[t._getName()]) throw new Error("Invalid ObjectEnumValue");
        return { $type: "Enum", value: t._getName() };
      }
      if (MU(t)) return t.toJSON();
      if (typeof t == "object") return FI(t, e);
      e.throwValidationError({ kind: "InvalidArgumentValue", selectionPath: e.getSelectionPath(), argumentPath: e.getArgumentPath(), argument: { name: e.getArgumentName(), typeNames: [] }, underlyingError: `We could not serialize ${Object.prototype.toString.call(t)} value. Serialize the object to JSON or implement a ".toJSON()" method on it` });
    }
    function FI(t, e) {
      if (t.$type) return { $type: "Raw", value: t };
      let r = {};
      for (let n in t) {
        let A = t[n], i = e.nestArgument(n);
        Gt(A) || (A !== void 0 ? r[n] = NI(A, i) : e.isPreviewFeatureOn("strictUndefinedChecks") && e.throwValidationError({ kind: "InvalidArgumentValue", argumentPath: i.getArgumentPath(), selectionPath: e.getSelectionPath(), argument: { name: e.getArgumentName(), typeNames: [] }, underlyingError: bI }));
      }
      return r;
    }
    function UU(t, e) {
      let r = [];
      for (let n = 0; n < t.length; n++) {
        let A = e.nestArgument(String(n)), i = t[n];
        if (i === void 0 || Gt(i)) {
          let s = i === void 0 ? "undefined" : "Prisma.skip";
          e.throwValidationError({ kind: "InvalidArgumentValue", selectionPath: A.getSelectionPath(), argumentPath: A.getArgumentPath(), argument: { name: `${e.getArgumentName()}[${n}]`, typeNames: [] }, underlyingError: `Can not use \`${s}\` value within array. Use \`null\` or filter out \`${s}\` values` });
        }
        r.push(NI(i, A));
      }
      return r;
    }
    function kU(t) {
      return typeof t == "object" && t !== null && t.__prismaRawParameters__ === true;
    }
    function MU(t) {
      return typeof t == "object" && t !== null && typeof t.toJSON == "function";
    }
    function qu(t, e) {
      t === void 0 && e.isPreviewFeatureOn("strictUndefinedChecks") && e.throwValidationError({ kind: "InvalidSelectionValue", selectionPath: e.getSelectionPath(), underlyingError: bI });
    }
    var Hu = class t {
      constructor(e) {
        this.params = e;
        this.params.modelName && (this.modelOrType = this.params.runtimeDataModel.models[this.params.modelName] ?? this.params.runtimeDataModel.types[this.params.modelName]);
      }
      modelOrType;
      throwValidationError(e) {
        ga({ errors: [e], originalMethod: this.params.originalMethod, args: this.params.rootArgs ?? {}, callsite: this.params.callsite, errorFormat: this.params.errorFormat, clientVersion: this.params.clientVersion, globalOmit: this.params.globalOmit });
      }
      getSelectionPath() {
        return this.params.selectionPath;
      }
      getArgumentPath() {
        return this.params.argumentPath;
      }
      getArgumentName() {
        return this.params.argumentPath[this.params.argumentPath.length - 1];
      }
      getOutputTypeDescription() {
        if (!(!this.params.modelName || !this.modelOrType)) return { name: this.params.modelName, fields: this.modelOrType.fields.map((e) => ({ name: e.name, typeName: "boolean", isRelation: e.kind === "object" })) };
      }
      isRawAction() {
        return ["executeRaw", "queryRaw", "runCommandRaw", "findRaw", "aggregateRaw"].includes(this.params.action);
      }
      isPreviewFeatureOn(e) {
        return this.params.previewFeatures.includes(e);
      }
      getComputedFields() {
        if (this.params.modelName) return this.params.extensions.getAllComputedFields(this.params.modelName);
      }
      findField(e) {
        return this.modelOrType?.fields.find((r) => r.name === e);
      }
      nestSelection(e) {
        let r = this.findField(e), n = r?.kind === "object" ? r.type : void 0;
        return new t({ ...this.params, modelName: n, selectionPath: this.params.selectionPath.concat(e) });
      }
      getGlobalOmit() {
        return this.params.modelName && this.shouldApplyGlobalOmit() ? this.params.globalOmit?.[vr(this.params.modelName)] ?? {} : {};
      }
      shouldApplyGlobalOmit() {
        switch (this.params.action) {
          case "findFirst":
          case "findFirstOrThrow":
          case "findUniqueOrThrow":
          case "findMany":
          case "upsert":
          case "findUnique":
          case "createManyAndReturn":
          case "create":
          case "update":
          case "updateManyAndReturn":
          case "delete":
            return true;
          case "executeRaw":
          case "aggregateRaw":
          case "runCommandRaw":
          case "findRaw":
          case "createMany":
          case "deleteMany":
          case "groupBy":
          case "updateMany":
          case "count":
          case "aggregate":
          case "queryRaw":
            return false;
          default:
            sr(this.params.action, "Unknown action");
        }
      }
      nestArgument(e) {
        return new t({ ...this.params, argumentPath: this.params.argumentPath.concat(e) });
      }
    };
    function TI(t) {
      if (!t._hasPreviewFlag("metrics")) throw new Ue("`metrics` preview feature must be enabled in order to access metrics API", { clientVersion: t._clientVersion });
    }
    var QA = class {
      _client;
      constructor(e) {
        this._client = e;
      }
      prometheus(e) {
        return TI(this._client), this._client._engine.metrics({ format: "prometheus", ...e });
      }
      json(e) {
        return TI(this._client), this._client._engine.metrics({ format: "json", ...e });
      }
    };
    function xI(t, e) {
      let r = xi(() => LU(e));
      Object.defineProperty(t, "dmmf", { get: () => r.get() });
    }
    function LU(t) {
      return { datamodel: { models: Ju(t.models), enums: Ju(t.enums), types: Ju(t.types) } };
    }
    function Ju(t) {
      return Object.entries(t).map(([e, r]) => ({ name: e, ...r }));
    }
    var Wu = /* @__PURE__ */ new WeakMap();
    var Qa = "$$PrismaTypedSql";
    var qi = class {
      constructor(e, r) {
        Wu.set(this, { sql: e, values: r }), Object.defineProperty(this, Qa, { value: Qa });
      }
      get sql() {
        return Wu.get(this).sql;
      }
      get values() {
        return Wu.get(this).values;
      }
    };
    function UI(t) {
      return (...e) => new qi(t, e);
    }
    function Ca(t) {
      return t != null && t[Qa] === Qa;
    }
    var hb = G(hu());
    var fb = __require("node:async_hooks");
    var Qb = __require("node:events");
    var Cb = G(__require("node:fs"));
    var Ml = G(__require("node:path"));
    var _e = class t {
      constructor(e, r) {
        if (e.length - 1 !== r.length) throw e.length === 0 ? new TypeError("Expected at least 1 string") : new TypeError(`Expected ${e.length} strings to have ${e.length - 1} values`);
        let n = r.reduce((s, o) => s + (o instanceof t ? o.values.length : 1), 0);
        this.values = new Array(n), this.strings = new Array(n + 1), this.strings[0] = e[0];
        let A = 0, i = 0;
        for (; A < r.length; ) {
          let s = r[A++], o = e[A];
          if (s instanceof t) {
            this.strings[i] += s.strings[0];
            let a = 0;
            for (; a < s.values.length; ) this.values[i++] = s.values[a++], this.strings[i] = s.strings[a];
            this.strings[i] += o;
          } else this.values[i++] = s, this.strings[i] = o;
        }
      }
      get sql() {
        let e = this.strings.length, r = 1, n = this.strings[0];
        for (; r < e; ) n += `?${this.strings[r++]}`;
        return n;
      }
      get statement() {
        let e = this.strings.length, r = 1, n = this.strings[0];
        for (; r < e; ) n += `:${r}${this.strings[r++]}`;
        return n;
      }
      get text() {
        let e = this.strings.length, r = 1, n = this.strings[0];
        for (; r < e; ) n += `$${r}${this.strings[r++]}`;
        return n;
      }
      inspect() {
        return { sql: this.sql, statement: this.statement, text: this.text, values: this.values };
      }
    };
    function kI(t, e = ",", r = "", n = "") {
      if (t.length === 0) throw new TypeError("Expected `join([])` to be called with an array of multiple elements, but got an empty array");
      return new _e([r, ...Array(t.length - 1).fill(e), n], t);
    }
    function _u(t) {
      return new _e([t], []);
    }
    var MI = _u("");
    function ju(t, ...e) {
      return new _e(t, e);
    }
    function Ji(t) {
      return { getKeys() {
        return Object.keys(t);
      }, getPropertyValue(e) {
        return t[e];
      } };
    }
    function Oe(t, e) {
      return { getKeys() {
        return [t];
      }, getPropertyValue() {
        return e();
      } };
    }
    function gn(t) {
      let e = new vt();
      return { getKeys() {
        return t.getKeys();
      }, getPropertyValue(r) {
        return e.getOrCreate(r, () => t.getPropertyValue(r));
      }, getPropertyDescriptor(r) {
        return t.getPropertyDescriptor?.(r);
      } };
    }
    var Ia = { enumerable: true, configurable: true, writable: true };
    function Ba(t) {
      let e = new Set(t);
      return { getPrototypeOf: () => Object.prototype, getOwnPropertyDescriptor: () => Ia, has: (r, n) => e.has(n), set: (r, n, A) => e.add(n) && Reflect.set(r, n, A), ownKeys: () => [...e] };
    }
    var LI = Symbol.for("nodejs.util.inspect.custom");
    function mt(t, e) {
      let r = vU(e), n = /* @__PURE__ */ new Set(), A = new Proxy(t, { get(i, s) {
        if (n.has(s)) return i[s];
        let o = r.get(s);
        return o ? o.getPropertyValue(s) : i[s];
      }, has(i, s) {
        if (n.has(s)) return true;
        let o = r.get(s);
        return o ? o.has?.(s) ?? true : Reflect.has(i, s);
      }, ownKeys(i) {
        let s = vI(Reflect.ownKeys(i), r), o = vI(Array.from(r.keys()), r);
        return [.../* @__PURE__ */ new Set([...s, ...o, ...n])];
      }, set(i, s, o) {
        return r.get(s)?.getPropertyDescriptor?.(s)?.writable === false ? false : (n.add(s), Reflect.set(i, s, o));
      }, getOwnPropertyDescriptor(i, s) {
        let o = Reflect.getOwnPropertyDescriptor(i, s);
        if (o && !o.configurable) return o;
        let a = r.get(s);
        return a ? a.getPropertyDescriptor ? { ...Ia, ...a?.getPropertyDescriptor(s) } : Ia : o;
      }, defineProperty(i, s, o) {
        return n.add(s), Reflect.defineProperty(i, s, o);
      }, getPrototypeOf: () => Object.prototype });
      return A[LI] = function() {
        let i = { ...this };
        return delete i[LI], i;
      }, A;
    }
    function vU(t) {
      let e = /* @__PURE__ */ new Map();
      for (let r of t) {
        let n = r.getKeys();
        for (let A of n) e.set(A, r);
      }
      return e;
    }
    function vI(t, e) {
      return t.filter((r) => e.get(r)?.has?.(r) ?? true);
    }
    function CA(t) {
      return { getKeys() {
        return t;
      }, has() {
        return false;
      }, getPropertyValue() {
      } };
    }
    function IA(t, e) {
      return { batch: t, transaction: e?.kind === "batch" ? { isolationLevel: e.options.isolationLevel } : void 0 };
    }
    function PI(t) {
      if (t === void 0) return "";
      let e = hA(t);
      return new lA(0, { colors: sa }).write(e).toString();
    }
    var PU = "P2037";
    function Yr({ error: t, user_facing_error: e }, r, n) {
      return e.error_code ? new Ne(YU(e, n), { code: e.error_code, clientVersion: r, meta: e.meta, batchRequestIdx: e.batch_request_idx }) : new pe(t, { clientVersion: r, batchRequestIdx: e.batch_request_idx });
    }
    function YU(t, e) {
      let r = t.message;
      return (e === "postgresql" || e === "postgres" || e === "mysql") && t.error_code === PU && (r += `
Prisma Accelerate has built-in connection pooling to prevent such errors: https://pris.ly/client/error-accelerate`), r;
    }
    var Wi = "<unknown>";
    function YI(t) {
      var e = t.split(`
`);
      return e.reduce(function(r, n) {
        var A = VU(n) || qU(n) || _U(n) || $U(n) || ZU(n);
        return A && r.push(A), r;
      }, []);
    }
    var GU = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|rsc|<anonymous>|\/|[a-z]:\\|\\\\).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
    var OU = /\((\S*)(?::(\d+))(?::(\d+))\)/;
    function VU(t) {
      var e = GU.exec(t);
      if (!e) return null;
      var r = e[2] && e[2].indexOf("native") === 0, n = e[2] && e[2].indexOf("eval") === 0, A = OU.exec(e[2]);
      return n && A != null && (e[2] = A[1], e[3] = A[2], e[4] = A[3]), { file: r ? null : e[2], methodName: e[1] || Wi, arguments: r ? [e[2]] : [], lineNumber: e[3] ? +e[3] : null, column: e[4] ? +e[4] : null };
    }
    var HU = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|rsc|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i;
    function qU(t) {
      var e = HU.exec(t);
      return e ? { file: e[2], methodName: e[1] || Wi, arguments: [], lineNumber: +e[3], column: e[4] ? +e[4] : null } : null;
    }
    var JU = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|rsc|resource|\[native).*?|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i;
    var WU = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
    function _U(t) {
      var e = JU.exec(t);
      if (!e) return null;
      var r = e[3] && e[3].indexOf(" > eval") > -1, n = WU.exec(e[3]);
      return r && n != null && (e[3] = n[1], e[4] = n[2], e[5] = null), { file: e[3], methodName: e[1] || Wi, arguments: e[2] ? e[2].split(",") : [], lineNumber: e[4] ? +e[4] : null, column: e[5] ? +e[5] : null };
    }
    var jU = /^\s*(?:([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i;
    function ZU(t) {
      var e = jU.exec(t);
      return e ? { file: e[3], methodName: e[1] || Wi, arguments: [], lineNumber: +e[4], column: e[5] ? +e[5] : null } : null;
    }
    var XU = /^\s*at (?:((?:\[object object\])?[^\\/]+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i;
    function $U(t) {
      var e = XU.exec(t);
      return e ? { file: e[2], methodName: e[1] || Wi, arguments: [], lineNumber: +e[3], column: e[4] ? +e[4] : null } : null;
    }
    var Zu = class {
      getLocation() {
        return null;
      }
    };
    var Xu = class {
      _error;
      constructor() {
        this._error = new Error();
      }
      getLocation() {
        let e = this._error.stack;
        if (!e) return null;
        let n = YI(e).find((A) => {
          if (!A.file) return false;
          let i = Du(A.file);
          return i !== "<anonymous>" && !i.includes("@prisma") && !i.includes("/packages/client/src/runtime/") && !i.endsWith("/runtime/binary.js") && !i.endsWith("/runtime/library.js") && !i.endsWith("/runtime/edge.js") && !i.endsWith("/runtime/edge-esm.js") && !i.startsWith("internal/") && !A.methodName.includes("new ") && !A.methodName.includes("getCallSite") && !A.methodName.includes("Proxy.") && A.methodName.split(".").length < 4;
        });
        return !n || !n.file ? null : { fileName: n.file, lineNumber: n.lineNumber, columnNumber: n.column };
      }
    };
    function Gr(t) {
      return t === "minimal" ? typeof $EnabledCallSite == "function" && t !== "minimal" ? new $EnabledCallSite() : new Zu() : new Xu();
    }
    var GI = { _avg: true, _count: true, _sum: true, _min: true, _max: true };
    function BA(t = {}) {
      let e = zU(t);
      return Object.entries(e).reduce((n, [A, i]) => (GI[A] !== void 0 ? n.select[A] = { select: i } : n[A] = i, n), { select: {} });
    }
    function zU(t = {}) {
      return typeof t._count == "boolean" ? { ...t, _count: { _all: t._count } } : t;
    }
    function pa(t = {}) {
      return (e) => (typeof t._count == "boolean" && (e._count = e._count._all), e);
    }
    function OI(t, e) {
      let r = pa(t);
      return e({ action: "aggregate", unpacker: r, argsMapper: BA })(t);
    }
    function ek(t = {}) {
      let { select: e, ...r } = t;
      return typeof e == "object" ? BA({ ...r, _count: e }) : BA({ ...r, _count: { _all: true } });
    }
    function tk(t = {}) {
      return typeof t.select == "object" ? (e) => pa(t)(e)._count : (e) => pa(t)(e)._count._all;
    }
    function VI(t, e) {
      return e({ action: "count", unpacker: tk(t), argsMapper: ek })(t);
    }
    function rk(t = {}) {
      let e = BA(t);
      if (Array.isArray(e.by)) for (let r of e.by) typeof r == "string" && (e.select[r] = true);
      else typeof e.by == "string" && (e.select[e.by] = true);
      return e;
    }
    function nk(t = {}) {
      return (e) => (typeof t?._count == "boolean" && e.forEach((r) => {
        r._count = r._count._all;
      }), e);
    }
    function HI(t, e) {
      return e({ action: "groupBy", unpacker: nk(t), argsMapper: rk })(t);
    }
    function qI(t, e, r) {
      if (e === "aggregate") return (n) => OI(n, r);
      if (e === "count") return (n) => VI(n, r);
      if (e === "groupBy") return (n) => HI(n, r);
    }
    function JI(t, e) {
      let r = e.fields.filter((A) => !A.relationName), n = $C(r, "name");
      return new Proxy({}, { get(A, i) {
        if (i in A || typeof i == "symbol") return A[i];
        let s = n[i];
        if (s) return new vi(t, i, s.type, s.isList, s.kind === "enum");
      }, ...Ba(Object.keys(n)) });
    }
    var WI = (t) => Array.isArray(t) ? t : t.split(".");
    var $u = (t, e) => WI(e).reduce((r, n) => r && r[n], t);
    var _I = (t, e, r) => WI(e).reduceRight((n, A, i, s) => Object.assign({}, $u(t, s.slice(0, i)), { [A]: n }), r);
    function Ak(t, e) {
      return t === void 0 || e === void 0 ? [] : [...e, "select", t];
    }
    function ik(t, e, r) {
      return e === void 0 ? t ?? {} : _I(e, r, t || true);
    }
    function Ku(t, e, r, n, A, i) {
      let o = t._runtimeDataModel.models[e].fields.reduce((a, c) => ({ ...a, [c.name]: c }), {});
      return (a) => {
        let c = Gr(t._errorFormat), l = Ak(n, A), u = ik(a, i, l), g = r({ dataPath: l, callsite: c })(u), E = sk(t, e);
        return new Proxy(g, { get(h, f) {
          if (!E.includes(f)) return h[f];
          let Q = [o[f].type, r, f], I = [l, u];
          return Ku(t, ...Q, ...I);
        }, ...Ba([...E, ...Object.getOwnPropertyNames(g)]) });
      };
    }
    function sk(t, e) {
      return t._runtimeDataModel.models[e].fields.filter((r) => r.kind === "object").map((r) => r.name);
    }
    var ok = ["findUnique", "findUniqueOrThrow", "findFirst", "findFirstOrThrow", "create", "update", "upsert", "delete"];
    var ak = ["aggregate", "count", "groupBy"];
    function zu(t, e) {
      let r = t._extensions.getAllModelExtensions(e) ?? {}, n = [ck(t, e), uk(t, e), Ji(r), Oe("name", () => e), Oe("$name", () => e), Oe("$parent", () => t._appliedParent)];
      return mt({}, n);
    }
    function ck(t, e) {
      let r = Yt(e), n = Object.keys(cA).concat("count");
      return { getKeys() {
        return n;
      }, getPropertyValue(A) {
        let i = A, s = (o) => (a) => {
          let c = Gr(t._errorFormat);
          return t._createPrismaPromise((l) => {
            let u = { args: a, dataPath: [], action: i, model: e, clientMethod: `${r}.${A}`, jsModelName: r, transaction: l, callsite: c };
            return t._request({ ...u, ...o });
          }, { action: i, args: a, model: e });
        };
        return ok.includes(i) ? Ku(t, e, s) : lk(A) ? qI(t, A, s) : s({});
      } };
    }
    function lk(t) {
      return ak.includes(t);
    }
    function uk(t, e) {
      return gn(Oe("fields", () => {
        let r = t._runtimeDataModel.models[e];
        return JI(e, r);
      }));
    }
    function jI(t) {
      return t.replace(/^./, (e) => e.toUpperCase());
    }
    var eg = Symbol();
    function _i(t) {
      let e = [gk(t), Ek(t), Oe(eg, () => t), Oe("$parent", () => t._appliedParent)], r = t._extensions.getAllClientExtensions();
      return r && e.push(Ji(r)), mt(t, e);
    }
    function gk(t) {
      let e = Object.getPrototypeOf(t._originalClient), r = [...new Set(Object.getOwnPropertyNames(e))];
      return { getKeys() {
        return r;
      }, getPropertyValue(n) {
        return t[n];
      } };
    }
    function Ek(t) {
      let e = Object.keys(t._runtimeDataModel.models), r = e.map(Yt), n = [...new Set(e.concat(r))];
      return gn({ getKeys() {
        return n;
      }, getPropertyValue(A) {
        let i = jI(A);
        if (t._runtimeDataModel.models[i] !== void 0) return zu(t, i);
        if (t._runtimeDataModel.models[A] !== void 0) return zu(t, A);
      }, getPropertyDescriptor(A) {
        if (!r.includes(A)) return { enumerable: false };
      } });
    }
    function ZI(t) {
      return t[eg] ? t[eg] : t;
    }
    function XI(t) {
      if (typeof t == "function") return t(this);
      if (t.client?.__AccelerateEngine) {
        let r = t.client.__AccelerateEngine;
        this._originalClient._engine = new r(this._originalClient._accelerateEngineConfig);
      }
      let e = Object.create(this._originalClient, { _extensions: { value: this._extensions.append(t) }, _appliedParent: { value: this, configurable: true }, $use: { value: void 0 }, $on: { value: void 0 } });
      return _i(e);
    }
    function $I({ result: t, modelName: e, select: r, omit: n, extensions: A }) {
      let i = A.getAllComputedFields(e);
      if (!i) return t;
      let s = [], o = [];
      for (let a of Object.values(i)) {
        if (n) {
          if (n[a.name]) continue;
          let c = a.needs.filter((l) => n[l]);
          c.length > 0 && o.push(CA(c));
        } else if (r) {
          if (!r[a.name]) continue;
          let c = a.needs.filter((l) => !r[l]);
          c.length > 0 && o.push(CA(c));
        }
        dk(t, a.needs) && s.push(hk(a, mt(t, s)));
      }
      return s.length > 0 || o.length > 0 ? mt(t, [...s, ...o]) : t;
    }
    function dk(t, e) {
      return e.every((r) => Fu(t, r));
    }
    function hk(t, e) {
      return gn(Oe(t.name, () => t.compute(e)));
    }
    function ma({ visitor: t, result: e, args: r, runtimeDataModel: n, modelName: A }) {
      if (Array.isArray(e)) {
        for (let s = 0; s < e.length; s++) e[s] = ma({ result: e[s], args: r, modelName: A, runtimeDataModel: n, visitor: t });
        return e;
      }
      let i = t(e, A, r) ?? e;
      return r.include && KI({ includeOrSelect: r.include, result: i, parentModelName: A, runtimeDataModel: n, visitor: t }), r.select && KI({ includeOrSelect: r.select, result: i, parentModelName: A, runtimeDataModel: n, visitor: t }), i;
    }
    function KI({ includeOrSelect: t, result: e, parentModelName: r, runtimeDataModel: n, visitor: A }) {
      for (let [i, s] of Object.entries(t)) {
        if (!s || e[i] == null || Gt(s)) continue;
        let a = n.models[r].fields.find((l) => l.name === i);
        if (!a || a.kind !== "object" || !a.relationName) continue;
        let c = typeof s == "object" ? s : {};
        e[i] = ma({ visitor: A, result: e[i], args: c, modelName: a.type, runtimeDataModel: n });
      }
    }
    function zI({ result: t, modelName: e, args: r, extensions: n, runtimeDataModel: A, globalOmit: i }) {
      return n.isEmpty() || t == null || typeof t != "object" || !A.models[e] ? t : ma({ result: t, args: r ?? {}, modelName: e, runtimeDataModel: A, visitor: (o, a, c) => {
        let l = Yt(a);
        return $I({ result: o, modelName: l, select: c.select, omit: c.select ? void 0 : { ...i?.[l], ...c.omit }, extensions: n });
      } });
    }
    var fk = ["$connect", "$disconnect", "$on", "$transaction", "$use", "$extends"];
    var eB = fk;
    function tB(t) {
      if (t instanceof _e) return Qk(t);
      if (Ca(t)) return Ck(t);
      if (Array.isArray(t)) {
        let r = [t[0]];
        for (let n = 1; n < t.length; n++) r[n] = ji(t[n]);
        return r;
      }
      let e = {};
      for (let r in t) e[r] = ji(t[r]);
      return e;
    }
    function Qk(t) {
      return new _e(t.strings, t.values);
    }
    function Ck(t) {
      return new qi(t.sql, t.values);
    }
    function ji(t) {
      if (typeof t != "object" || t == null || t instanceof cr || dA(t)) return t;
      if (aA(t)) return new Lt(t.toFixed());
      if (oA(t)) return /* @__PURE__ */ new Date(+t);
      if (ArrayBuffer.isView(t)) return t.slice(0);
      if (Array.isArray(t)) {
        let e = t.length, r;
        for (r = Array(e); e--; ) r[e] = ji(t[e]);
        return r;
      }
      if (typeof t == "object") {
        let e = {};
        for (let r in t) r === "__proto__" ? Object.defineProperty(e, r, { value: ji(t[r]), configurable: true, enumerable: true, writable: true }) : e[r] = ji(t[r]);
        return e;
      }
      sr(t, "Unknown value");
    }
    function nB(t, e, r, n = 0) {
      return t._createPrismaPromise((A) => {
        let i = e.customDataProxyFetch;
        return "transaction" in e && A !== void 0 && (e.transaction?.kind === "batch" && e.transaction.lock.then(), e.transaction = A), n === r.length ? t._executeRequest(e) : r[n]({ model: e.model, operation: e.model ? e.action : e.clientMethod, args: tB(e.args ?? {}), __internalParams: e, query: (s, o = e) => {
          let a = o.customDataProxyFetch;
          return o.customDataProxyFetch = oB(i, a), o.args = s, nB(t, o, r, n + 1);
        } });
      });
    }
    function AB(t, e) {
      let { jsModelName: r, action: n, clientMethod: A } = e, i = r ? n : A;
      if (t._extensions.isEmpty()) return t._executeRequest(e);
      let s = t._extensions.getAllQueryCallbacks(r ?? "$none", i);
      return nB(t, e, s);
    }
    function iB(t) {
      return (e) => {
        let r = { requests: e }, n = e[0].extensions.getAllBatchQueryCallbacks();
        return n.length ? sB(r, n, 0, t) : t(r);
      };
    }
    function sB(t, e, r, n) {
      if (r === e.length) return n(t);
      let A = t.customDataProxyFetch, i = t.requests[0].transaction;
      return e[r]({ args: { queries: t.requests.map((s) => ({ model: s.modelName, operation: s.action, args: s.args })), transaction: i ? { isolationLevel: i.kind === "batch" ? i.isolationLevel : void 0 } : void 0 }, __internalParams: t, query(s, o = t) {
        let a = o.customDataProxyFetch;
        return o.customDataProxyFetch = oB(A, a), sB(o, e, r + 1, n);
      } });
    }
    var rB = (t) => t;
    function oB(t = rB, e = rB) {
      return (r) => t(e(r));
    }
    var aB = ce("prisma:client");
    var cB = { Vercel: "vercel", "Netlify CI": "netlify" };
    function lB({ postinstall: t, ciName: e, clientVersion: r }) {
      if (aB("checkPlatformCaching:postinstall", t), aB("checkPlatformCaching:ciName", e), t === true && e && e in cB) {
        let n = `Prisma has detected that this project was built on ${e}, which caches dependencies. This leads to an outdated Prisma Client because Prisma's auto-generation isn't triggered. To fix this, make sure to run the \`prisma generate\` command during the build process.

Learn how: https://pris.ly/d/${cB[e]}-build`;
        throw console.error(n), new Z(n, r);
      }
    }
    function uB(t, e) {
      return t ? t.datasources ? t.datasources : t.datasourceUrl ? { [e[0]]: { url: t.datasourceUrl } } : {} : {};
    }
    var Ik = () => globalThis.process?.release?.name === "node";
    var Bk = () => !!globalThis.Bun || !!globalThis.process?.versions?.bun;
    var pk = () => !!globalThis.Deno;
    var mk = () => typeof globalThis.Netlify == "object";
    var yk = () => typeof globalThis.EdgeRuntime == "object";
    var wk = () => globalThis.navigator?.userAgent === "Cloudflare-Workers";
    function Dk() {
      return [[mk, "netlify"], [yk, "edge-light"], [wk, "workerd"], [pk, "deno"], [Bk, "bun"], [Ik, "node"]].flatMap((r) => r[0]() ? [r[1]] : []).at(0) ?? "";
    }
    var Rk = { node: "Node.js", workerd: "Cloudflare Workers", deno: "Deno and Deno Deploy", netlify: "Netlify Edge Functions", "edge-light": "Edge Runtime (Vercel Edge Functions, Vercel Edge Middleware, Next.js (Pages Router) Edge API Routes, Next.js (App Router) Edge Route Handlers or Next.js Middleware)" };
    function gB() {
      let t = Dk();
      return { id: t, prettyName: Rk[t] || t, isEdge: ["workerd", "deno", "netlify", "edge-light"].includes(t) };
    }
    var bS = __require("node:child_process");
    var NS = G(nC());
    var Zs = G(__require("node:fs"));
    var FS = G(gC());
    var CB = G(__require("node:fs"), 1);
    var rg = G(__require("node:path"), 1);
    var IB = G(__require("node:stream"), 1);
    var BB = __require("node:util");
    var EB = __require("node:util");
    var ya = G(__require("node:crypto"), 1);
    var dB = (0, EB.promisify)(ya.default.randomBytes);
    var Sk = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~".split("");
    var bk = "0123456789".split("");
    var Nk = "CDEHKMPRTUWXY012458".split("");
    var Fk = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~".split("");
    var Tk = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split("");
    var xk = (t, e) => {
      let r = e.length, n = Math.floor(65536 / r) * r - 1, A = 2 * Math.ceil(1.1 * t), i = "", s = 0;
      for (; s < t; ) {
        let o = ya.default.randomBytes(A), a = 0;
        for (; a < A && s < t; ) {
          let c = o.readUInt16LE(a);
          a += 2, !(c > n) && (i += e[c % r], s++);
        }
      }
      return i;
    };
    var Uk = async (t, e) => {
      let r = e.length, n = Math.floor(65536 / r) * r - 1, A = 2 * Math.ceil(1.1 * t), i = "", s = 0;
      for (; s < t; ) {
        let o = await dB(A), a = 0;
        for (; a < A && s < t; ) {
          let c = o.readUInt16LE(a);
          a += 2, !(c > n) && (i += e[c % r], s++);
        }
      }
      return i;
    };
    var kk = (t, e, r) => ya.default.randomBytes(t).toString(e).slice(0, r);
    var Mk = async (t, e, r) => (await dB(t)).toString(e).slice(0, r);
    var Lk = /* @__PURE__ */ new Set([void 0, "hex", "base64", "url-safe", "numeric", "distinguishable", "ascii-printable", "alphanumeric"]);
    var hB = (t, e) => ({ length: r, type: n, characters: A }) => {
      if (!(r >= 0 && Number.isFinite(r))) throw new TypeError("Expected a `length` to be a non-negative finite number");
      if (n !== void 0 && A !== void 0) throw new TypeError("Expected either `type` or `characters`");
      if (A !== void 0 && typeof A != "string") throw new TypeError("Expected `characters` to be string");
      if (!Lk.has(n)) throw new TypeError(`Unknown type: ${n}`);
      if (n === void 0 && A === void 0 && (n = "hex"), n === "hex" || n === void 0 && A === void 0) return e(Math.ceil(r * 0.5), "hex", r);
      if (n === "base64") return e(Math.ceil(r * 0.75), "base64", r);
      if (n === "url-safe") return t(r, Sk);
      if (n === "numeric") return t(r, bk);
      if (n === "distinguishable") return t(r, Nk);
      if (n === "ascii-printable") return t(r, Fk);
      if (n === "alphanumeric") return t(r, Tk);
      if (A.length === 0) throw new TypeError("Expected `characters` string length to be greater than or equal to 1");
      if (A.length > 65536) throw new TypeError("Expected `characters` string length to be less or equal to 65536");
      return t(r, A.split(""));
    };
    var fB = hB(xk, kk);
    fB.async = hB(Uk, Mk);
    var QB = fB;
    function tg() {
      return QB({ length: 32 });
    }
    var pB = G(du(), 1);
    var Pk = G(du(), 1);
    var RX = (0, BB.promisify)(IB.default.pipeline);
    var mB = (t = "") => rg.default.join(pB.default, t + tg());
    function yB({ name: t, extension: e } = {}) {
      if (t) {
        if (e != null) throw new Error("The `name` and `extension` options are mutually exclusive");
        return rg.default.join(vk(), t);
      }
      return mB() + (e == null ? "" : "." + e.replace(/^\./, ""));
    }
    function vk({ prefix: t = "" } = {}) {
      let e = mB(t);
      return CB.default.mkdirSync(e), e;
    }
    function pA(t) {
      return typeof t == "string" ? t : t.message;
    }
    function wB(t) {
      if (t.fields?.message) {
        let e = t.fields?.message;
        return t.fields?.file && (e += ` in ${t.fields.file}`, t.fields?.line && (e += `:${t.fields.line}`), t.fields?.column && (e += `:${t.fields.column}`)), t.fields?.reason && (e += `
${t.fields?.reason}`), e;
      }
      return "Unknown error";
    }
    function DB(t) {
      return t.fields?.message === "PANIC";
    }
    function Yk(t) {
      return t.timestamp && typeof t.level == "string" && typeof t.target == "string";
    }
    function ng(t) {
      return Yk(t) && (t.level === "error" || t.fields?.message?.includes("fatal error"));
    }
    function RB(t) {
      let r = Gk(t.fields) ? "query" : t.level.toLowerCase();
      return { ...t, level: r, timestamp: new Date(t.timestamp) };
    }
    function Gk(t) {
      return !!t.query;
    }
    var Zi = class extends Error {
      clientVersion;
      _isPanic;
      constructor({ clientVersion: e, error: r }) {
        let n = wB(r);
        super(n ?? "Unknown error"), this._isPanic = DB(r), this.clientVersion = e;
      }
      get [Symbol.toStringTag]() {
        return "PrismaClientRustError";
      }
      isPanic() {
        return this._isPanic;
      }
    };
    M(Zi, "PrismaClientRustError");
    var TB = G(__require("node:fs"));
    var Xi = G(__require("node:path"));
    function wa(t) {
      let { runtimeBinaryTarget: e } = t;
      return `Add "${e}" to \`binaryTargets\` in the "schema.prisma" file and run \`prisma generate\` after saving it:

${Ok(t)}`;
    }
    function Ok(t) {
      let { generator: e, generatorBinaryTargets: r, runtimeBinaryTarget: n } = t, A = { fromEnvVar: null, value: n }, i = [...r, A];
      return mu({ ...e, binaryTargets: i });
    }
    function Or(t) {
      let { runtimeBinaryTarget: e } = t;
      return `Prisma Client could not locate the Query Engine for runtime "${e}".`;
    }
    function Vr(t) {
      let { searchedLocations: e } = t;
      return `The following locations have been searched:
${[...new Set(e)].map((A) => `  ${A}`).join(`
`)}`;
    }
    function SB(t) {
      let { runtimeBinaryTarget: e } = t;
      return `${Or(t)}

This happened because \`binaryTargets\` have been pinned, but the actual deployment also required "${e}".
${wa(t)}

${Vr(t)}`;
    }
    function Da(t) {
      return `We would appreciate if you could take the time to share some information with us.
Please help us by answering a few questions: https://pris.ly/${t}`;
    }
    function Ra(t) {
      let { errorStack: e } = t;
      return e?.match(/\/\.next|\/next@|\/next\//) ? `

We detected that you are using Next.js, learn how to fix this: https://pris.ly/d/engine-not-found-nextjs.` : "";
    }
    function bB(t) {
      let { queryEngineName: e } = t;
      return `${Or(t)}${Ra(t)}

This is likely caused by a bundler that has not copied "${e}" next to the resulting bundle.
Ensure that "${e}" has been copied next to the bundle or in "${t.expectedLocation}".

${Da("engine-not-found-bundler-investigation")}

${Vr(t)}`;
    }
    function NB(t) {
      let { runtimeBinaryTarget: e, generatorBinaryTargets: r } = t, n = r.find((A) => A.native);
      return `${Or(t)}

This happened because Prisma Client was generated for "${n?.value ?? "unknown"}", but the actual deployment required "${e}".
${wa(t)}

${Vr(t)}`;
    }
    function FB(t) {
      let { queryEngineName: e } = t;
      return `${Or(t)}${Ra(t)}

This is likely caused by tooling that has not copied "${e}" to the deployment folder.
Ensure that you ran \`prisma generate\` and that "${e}" has been copied to "${t.expectedLocation}".

${Da("engine-not-found-tooling-investigation")}

${Vr(t)}`;
    }
    var Vk = ce("prisma:client:engines:resolveEnginePath");
    var Hk = () => new RegExp("runtime[\\\\/]binary\\.m?js$");
    async function Ag(t, e) {
      let r = { binary: process.env.PRISMA_QUERY_ENGINE_BINARY, library: process.env.PRISMA_QUERY_ENGINE_LIBRARY }[t] ?? e.prismaPath;
      if (r !== void 0) return r;
      let { enginePath: n, searchedLocations: A } = await qk(t, e);
      if (Vk("enginePath", n), n !== void 0 && t === "binary" && Qu(n), n !== void 0) return e.prismaPath = n;
      let i = await sn(), s = e.generator?.binaryTargets ?? [], o = s.some((g) => g.native), a = !s.some((g) => g.value === i), c = __filename.match(Hk()) === null, l = { searchedLocations: A, generatorBinaryTargets: s, generator: e.generator, runtimeBinaryTarget: i, queryEngineName: xB(t, i), expectedLocation: Xi.default.relative(process.cwd(), e.dirname), errorStack: new Error().stack }, u;
      throw o && a ? u = NB(l) : a ? u = SB(l) : c ? u = bB(l) : u = FB(l), new Z(u, e.clientVersion);
    }
    async function qk(t, e) {
      let r = await sn(), n = [], A = [e.dirname, Xi.default.resolve(__dirname, ".."), e.generator?.output?.value ?? __dirname, Xi.default.resolve(__dirname, "../../../.prisma/client"), "/tmp/prisma-engines", e.cwd];
      __filename.includes("resolveEnginePath") && A.push(EC());
      for (let i of A) {
        let s = xB(t, r), o = Xi.default.join(i, s);
        if (n.push(i), TB.default.existsSync(o)) return { enginePath: o, searchedLocations: n };
      }
      return { enginePath: void 0, searchedLocations: n };
    }
    function xB(t, e) {
      return t === "library" ? Eo(e, "fs") : `query-engine-${e}${e === "windows" ? ".exe" : ""}`;
    }
    var ig = G(wu());
    function UB(t) {
      return t ? t.replace(/".*"/g, '"X"').replace(/[\s:\[]([+-]?([0-9]*[.])?[0-9]+)/g, (e) => `${e[0]}5`) : "";
    }
    function kB(t) {
      return t.split(`
`).map((e) => e.replace(/^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)\s*/, "").replace(/\+\d+\s*ms$/, "")).join(`
`);
    }
    var MB = G(MC());
    function LB({ title: t, user: e = "prisma", repo: r = "prisma", template: n = "bug_report.yml", body: A }) {
      return (0, MB.default)({ user: e, repo: r, template: n, title: t, body: A });
    }
    function vB({ version: t, binaryTarget: e, title: r, description: n, engineVersion: A, database: i, query: s }) {
      let o = gf(6e3 - (s?.length ?? 0)), a = kB((0, ig.default)(o)), c = n ? `# Description
\`\`\`
${n}
\`\`\`` : "", l = (0, ig.default)(`Hi Prisma Team! My Prisma Client just crashed. This is the report:
## Versions

| Name            | Version            |
|-----------------|--------------------|
| Node            | ${process.version?.padEnd(19)}| 
| OS              | ${e?.padEnd(19)}|
| Prisma Client   | ${t?.padEnd(19)}|
| Query Engine    | ${A?.padEnd(19)}|
| Database        | ${i?.padEnd(19)}|

${c}

## Logs
\`\`\`
${a}
\`\`\`

## Client Snippet
\`\`\`ts
// PLEASE FILL YOUR CODE SNIPPET HERE
\`\`\`

## Schema
\`\`\`prisma
// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE
\`\`\`

## Prisma Engine Query
\`\`\`
${s ? UB(s) : ""}
\`\`\`
`), u = LB({ title: r, body: l });
      return `${r}

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.

${Je(u)}

If you want the Prisma team to look into it, please open the link above 🙏
To increase the chance of success, please post your schema and a snippet of
how you used Prisma Client in the issue. 
`;
    }
    var yS = G(au());
    var zW = () => mS();
    function e_(t) {
      if (t === void 0) throw new Error("Connection has not been opened");
    }
    var rr = class {
      _pool;
      constructor() {
      }
      static async onHttpError(e, r) {
        let n = await e;
        return n.statusCode >= 400 ? r(n) : n;
      }
      open(e, r) {
        this._pool || (this._pool = new (zW()).Pool(e, { connections: 1e3, keepAliveMaxTimeout: 6e5, headersTimeout: 0, bodyTimeout: 0, ...r }));
      }
      async raw(e, r, n, A, i = true) {
        e_(this._pool);
        let s = await this._pool.request({ path: r, method: e, headers: { "Content-Type": "application/json", ...n }, body: A }), o = await (0, yS.default)(s.body);
        return { statusCode: s.statusCode, headers: s.headers, data: i ? JSON.parse(o) : o };
      }
      post(e, r, n, A) {
        return this.raw("POST", e, n, r, A);
      }
      get(e, r) {
        return this.raw("GET", e, r);
      }
      close() {
        this._pool && this._pool.close(() => {
        }), this._pool = void 0;
      }
    };
    var Ye = ce("prisma:engine");
    var _s = (...t) => {
    };
    var wS = [...Gl, "native"];
    var Rl = [];
    var DS = process.env.PRISMA_CLIENT_NO_RETRY ? 1 : 2;
    var RS = process.env.PRISMA_CLIENT_NO_RETRY ? 1 : 2;
    var ai = class {
      name = "BinaryEngine";
      config;
      logEmitter;
      showColors;
      logQueries;
      env;
      flags;
      enableDebugLogs;
      allowTriggerPanic;
      child;
      clientVersion;
      globalKillSignalReceived;
      startCount = 0;
      engineEndpoint;
      lastError;
      stopPromise;
      beforeExitListener;
      cwd;
      datamodelPath;
      stderrLogs = "";
      currentRequestPromise;
      binaryTargetPromise;
      binaryTarget;
      datasourceOverrides;
      startPromise;
      versionPromise;
      engineStartDeferred;
      engineStopDeferred;
      connection;
      lastQuery;
      lastVersion;
      lastActiveProvider;
      activeProvider;
      tracingHelper;
      constructor(e) {
        this.config = e, this.env = e.env, this.cwd = this.resolveCwd(e.cwd), this.enableDebugLogs = e.enableDebugLogs ?? false, this.allowTriggerPanic = e.allowTriggerPanic ?? false, this.tracingHelper = e.tracingHelper, this.logEmitter = e.logEmitter, this.showColors = e.showColors ?? false, this.logQueries = e.logQueries ?? false, this.clientVersion = e.clientVersion, this.flags = e.flags ?? [], this.activeProvider = e.activeProvider, this.connection = new rr(), this.datamodelPath = yB({ extension: "prisma" }), Zs.default.writeFileSync(this.datamodelPath, e.inlineSchema);
        let r = Object.keys(e.overrideDatasources)[0], n = e.overrideDatasources[r]?.url;
        if (r !== void 0 && n !== void 0 && (this.datasourceOverrides = [{ name: r, url: n }]), t_(), this.engineEndpoint = e.engineEndpoint, this.binaryTarget) {
          if (!wS.includes(this.binaryTarget) && !Zs.default.existsSync(this.binaryTarget)) throw new Z(`Unknown ${at("PRISMA_QUERY_ENGINE_BINARY")} ${at(be(this.binaryTarget))}. Possible binaryTargets: ${Sr(wS.join(", "))} or a path to the query engine binary.
You may have to run ${Sr("prisma generate")} for your changes to take effect.`, this.clientVersion);
        } else this.getCurrentBinaryTarget();
        this.enableDebugLogs && ce.enable("*"), Rl.push(this);
      }
      setError(e) {
        ng(e) && (this.lastError = new Zi({ clientVersion: this.clientVersion, error: e }), this.lastError.isPanic() && (this.child && (this.stopPromise = r_(this.child)), this.currentRequestPromise?.cancel && this.currentRequestPromise.cancel()));
      }
      resolveCwd(e) {
        return Zs.default.existsSync(e) && Zs.default.lstatSync(e).isDirectory() ? e : process.cwd();
      }
      onBeforeExit(e) {
        this.beforeExitListener = e;
      }
      async emitExit() {
        if (this.beforeExitListener) try {
          await this.beforeExitListener();
        } catch (e) {
          console.error(e);
        }
      }
      async getCurrentBinaryTarget() {
        return this.binaryTargetPromise ? this.binaryTargetPromise : (this.binaryTargetPromise = this.tracingHelper.runInChildSpan("detect_platform", () => sn()), this.binaryTargetPromise);
      }
      printDatasources() {
        return this.datasourceOverrides ? JSON.stringify(this.datasourceOverrides) : "[]";
      }
      async start() {
        this.stopPromise && await this.stopPromise;
        let e = { times: 10 }, r = async () => {
          try {
            await this.tracingHelper.runInChildSpan("start_engine", () => this.startAndFetchBootSpans());
          } catch (A) {
            throw A.retryable === true && e.times > 0 && (e.times--, await r()), A;
          }
        }, n = async () => {
          if (this.startPromise || (this.startCount++, this.startPromise = r()), await this.startPromise, !this.child && !this.engineEndpoint) throw new pe("Can't perform request, as the Engine has already been stopped", { clientVersion: this.clientVersion });
        };
        return this.startPromise ? n() : this.tracingHelper.runInChildSpan("connect", n);
      }
      getEngineEnvVars() {
        let e = { PRISMA_DML_PATH: this.datamodelPath };
        return this.logQueries && (e.LOG_QUERIES = "true"), this.datasourceOverrides && (e.OVERWRITE_DATASOURCES = this.printDatasources()), !process.env.NO_COLOR && this.showColors && (e.CLICOLOR_FORCE = "1"), { ...this.env, ...process.env, ...e, RUST_BACKTRACE: process.env.RUST_BACKTRACE ?? "1", RUST_LOG: process.env.RUST_LOG ?? "info" };
      }
      async startAndFetchBootSpans() {
        await this.internalStart();
        let e = await rr.onHttpError(this.connection.get("/boot_trace"), (r) => this.httpErrorHandler(r));
        this.tracingHelper.dispatchEngineSpans(e.data.spans);
      }
      internalStart() {
        return new Promise(async (e, r) => {
          if (await new Promise((n) => process.nextTick(n)), this.stopPromise && await this.stopPromise, this.engineEndpoint) {
            try {
              this.connection.open(this.engineEndpoint), await (0, FS.default)(() => this.connection.get("/status"), { retries: 10 });
            } catch (n) {
              return r(n);
            }
            return e();
          }
          try {
            (this.child?.connected || this.child && !this.child?.killed) && Ye("There is a child that still runs and we want to start again"), this.lastError = void 0, _s("startin & resettin"), this.globalKillSignalReceived = void 0, Ye("cwd:", this.cwd);
            let n = await Ag("binary", this.config), A = this.allowTriggerPanic ? ["--debug"] : [], i = ["--enable-raw-queries", "--enable-metrics", "--enable-open-telemetry", ...this.flags, ...A];
            i.push("--port", "0"), i.push("--engine-protocol", "json"), Ye({ flags: i });
            let s = this.getEngineEnvVars();
            if (this.child = (0, bS.spawn)(n, i, { env: s, cwd: this.cwd, windowsHide: true, stdio: ["ignore", "pipe", "pipe"] }), Ri(this.child.stderr).on("data", (o) => {
              let a = String(o);
              Ye("stderr", a);
              try {
                let c = JSON.parse(a);
                if (typeof c.is_panic < "u" && (Ye(c), this.setError(c), this.engineStartDeferred)) {
                  let l = new Z(c.message, this.clientVersion, c.error_code);
                  this.engineStartDeferred.reject(l);
                }
              } catch {
                !a.includes("Printing to stderr") && !a.includes("Listening on ") && (this.stderrLogs += `
` + a);
              }
            }), Ri(this.child.stdout).on("data", (o) => {
              let a = String(o);
              try {
                let c = JSON.parse(a);
                if (Ye("stdout", pA(c)), this.engineStartDeferred && c.level === "INFO" && c.target === "query_engine::server" && c.fields?.message?.startsWith("Started query engine http server")) {
                  let l = c.fields.ip, u = c.fields.port;
                  if (l === void 0 || u === void 0) {
                    this.engineStartDeferred.reject(new Z('This version of Query Engine is not compatible with Prisma Client: "ip" and "port" fields are missing in the startup log entry', this.clientVersion));
                    return;
                  }
                  this.connection.open(`http://${l}:${u}`), this.engineStartDeferred.resolve(), this.engineStartDeferred = void 0;
                }
                if (typeof c.is_panic > "u") {
                  let l = RB(c);
                  ng(l) ? this.setError(l) : l.level === "query" ? this.logEmitter.emit(l.level, { timestamp: l.timestamp, query: l.fields.query, params: l.fields.params, duration: l.fields.duration_ms, target: l.target }) : this.logEmitter.emit(l.level, { timestamp: l.timestamp, message: l.fields.message, target: l.target });
                } else this.setError(c);
              } catch (c) {
                Ye(c, a);
              }
            }), this.child.on("exit", (o) => {
              if (_s("removing startPromise"), this.startPromise = void 0, this.engineStopDeferred) {
                this.engineStopDeferred.resolve(o);
                return;
              }
              if (this.connection.close(), o !== 0 && this.engineStartDeferred && this.startCount === 1) {
                let a, c = this.stderrLogs;
                this.lastError && (c = pA(this.lastError)), o !== null ? (a = new Z(`Query engine exited with code ${o}
` + c, this.clientVersion), a.retryable = true) : this.child?.signalCode ? (a = new Z(`Query engine process killed with signal ${this.child.signalCode} for unknown reason.
Make sure that the engine binary at ${n} is not corrupt.
` + c, this.clientVersion), a.retryable = true) : a = new Z(c, this.clientVersion), this.engineStartDeferred.reject(a);
              }
              this.child && (this.lastError || o === 126 && this.setError({ timestamp: /* @__PURE__ */ new Date(), target: "binary engine process exit", level: "error", fields: { message: `Couldn't start query engine as it's not executable on this operating system.
You very likely have the wrong "binaryTarget" defined in the schema.prisma file.` } }));
            }), this.child.on("error", (o) => {
              this.setError({ timestamp: /* @__PURE__ */ new Date(), target: "binary engine process error", level: "error", fields: { message: `Couldn't start query engine: ${o}` } }), r(o);
            }), this.child.on("close", (o, a) => {
              this.connection.close();
              let c;
              o === null && a === "SIGABRT" && this.child ? c = new ut(this.getErrorMessageWithLink("Panic in Query Engine with SIGABRT signal"), this.clientVersion) : o === 101 && a === null && this.lastError && (c = this.lastError), c && this.logEmitter.emit("error", { message: c.message, timestamp: /* @__PURE__ */ new Date(), target: "binary engine process close" });
            }), this.lastError) return r(new Z(pA(this.lastError), this.clientVersion));
            try {
              await new Promise((o, a) => {
                this.engineStartDeferred = { resolve: o, reject: a };
              });
            } catch (o) {
              throw this.child?.kill(), o;
            }
            (async () => {
              try {
                let o = await this.version(true);
                Ye(`Client Version: ${this.clientVersion}`), Ye(`Engine Version: ${o}`), Ye(`Active provider: ${this.activeProvider}`);
              } catch (o) {
                Ye(o);
              }
            })(), this.stopPromise = void 0, e();
          } catch (n) {
            r(n);
          }
        });
      }
      async stop() {
        let e = async () => (this.stopPromise || (this.stopPromise = this._stop()), this.stopPromise);
        return this.tracingHelper.runInChildSpan("disconnect", e);
      }
      async _stop() {
        if (this.startPromise && await this.startPromise, await new Promise((r) => process.nextTick(r)), this.currentRequestPromise) try {
          await this.currentRequestPromise;
        } catch {
        }
        let e;
        this.child && (Ye("Stopping Prisma engine"), this.startPromise && (Ye("Waiting for start promise"), await this.startPromise), Ye("Done waiting for start promise"), this.child.exitCode === null ? e = new Promise((r, n) => {
          this.engineStopDeferred = { resolve: r, reject: n };
        }) : Ye("Child already exited with code", this.child.exitCode), this.connection.close(), this.child.kill(), this.child = void 0), e && await e, await new Promise((r) => process.nextTick(r)), this.startPromise = void 0, this.engineStopDeferred = void 0;
      }
      kill(e) {
        this.globalKillSignalReceived = e, this.child?.kill(), this.connection.close();
      }
      async version(e = false) {
        return this.versionPromise && !e ? this.versionPromise : (this.versionPromise = this.internalVersion(), this.versionPromise);
      }
      async internalVersion() {
        let e = await Ag("binary", this.config), r = await (0, NS.default)(e, ["--version"]);
        return this.lastVersion = r.stdout, this.lastVersion;
      }
      async request(e, { traceparent: r, numTry: n = 1, isWrite: A, interactiveTransaction: i }) {
        await this.start();
        let s = {};
        r && (s.traceparent = r), i && (s["X-transaction-id"] = i.id);
        let o = JSON.stringify(e);
        this.currentRequestPromise = rr.onHttpError(this.connection.post("/", o, s), (a) => this.httpErrorHandler(a)), this.lastQuery = o;
        try {
          let { data: a } = await this.currentRequestPromise;
          if (a.extensions?.traces && this.tracingHelper.dispatchEngineSpans(a.extensions.traces), a.errors) throw a.errors.length === 1 ? Yr(a.errors[0], this.clientVersion, this.config.activeProvider) : new pe(JSON.stringify(a.errors), { clientVersion: this.clientVersion });
          return this.startCount > 0 && (this.startCount = 0), this.currentRequestPromise = void 0, { data: a };
        } catch (a) {
          _s("req - e", a);
          let { error: c, shouldRetry: l } = await this.handleRequestError(a);
          if (n <= RS && l && !A) return _s("trying a retry now"), this.request(e, { traceparent: r, numTry: n + 1, isWrite: A, interactiveTransaction: i });
          throw c;
        }
      }
      async requestBatch(e, { traceparent: r, transaction: n, numTry: A = 1, containsWrite: i }) {
        await this.start();
        let s = {};
        r && (s.traceparent = r);
        let o = n?.kind === "itx" ? n.options : void 0;
        o && (s["X-transaction-id"] = o.id);
        let a = IA(e, n);
        return this.lastQuery = JSON.stringify(a), this.currentRequestPromise = rr.onHttpError(this.connection.post("/", this.lastQuery, s), (c) => this.httpErrorHandler(c)), this.currentRequestPromise.then(({ data: c }) => {
          c.extensions?.traces && this.tracingHelper.dispatchEngineSpans(c.extensions.traces);
          let { batchResult: l } = c;
          if (Array.isArray(l)) return l.map((u) => (u.extensions?.traces && this.tracingHelper.dispatchEngineSpans(u.extensions.traces), u.errors && u.errors.length > 0 ? Yr(u.errors[0], this.clientVersion, this.config.activeProvider) : { data: u }));
          throw Yr(c.errors[0], this.clientVersion, this.config.activeProvider);
        }).catch(async (c) => {
          let { error: l, shouldRetry: u } = await this.handleRequestError(c);
          if (u && !i && A <= RS) return this.requestBatch(e, { traceparent: r, transaction: n, numTry: A + 1, containsWrite: i });
          throw l;
        });
      }
      async transaction(e, r, n) {
        if (await this.start(), e === "start") {
          let A = JSON.stringify({ max_wait: n.maxWait, timeout: n.timeout, isolation_level: n.isolationLevel }), i = await rr.onHttpError(this.connection.post("/transaction/start", A, r), (s) => this.httpErrorHandler(s));
          return i.data.extensions?.traces && this.tracingHelper.dispatchEngineSpans(i.data.extensions.traces), i.data;
        } else if (e === "commit") {
          let A = await rr.onHttpError(this.connection.post(`/transaction/${n.id}/commit`, void 0, r), (i) => this.httpErrorHandler(i));
          A.data.extensions?.traces && this.tracingHelper.dispatchEngineSpans(A.data.extensions.traces);
        } else if (e === "rollback") {
          let A = await rr.onHttpError(this.connection.post(`/transaction/${n.id}/rollback`, void 0, r), (i) => this.httpErrorHandler(i));
          A.data.extensions?.traces && this.tracingHelper.dispatchEngineSpans(A.data.extensions.traces);
        }
      }
      get hasMaxRestarts() {
        return this.startCount >= DS;
      }
      throwAsyncErrorIfExists(e = false) {
        if (_s("throwAsyncErrorIfExists", this.startCount, this.hasMaxRestarts), this.lastError && (this.hasMaxRestarts || e)) {
          let r = this.lastError;
          throw this.lastError = void 0, r.isPanic() ? new ut(this.getErrorMessageWithLink(pA(r)), this.clientVersion) : new pe(this.getErrorMessageWithLink(pA(r)), { clientVersion: this.clientVersion });
        }
      }
      getErrorMessageWithLink(e) {
        return vB({ binaryTarget: this.binaryTarget, title: e, version: this.clientVersion, engineVersion: this.lastVersion, database: this.lastActiveProvider, query: this.lastQuery });
      }
      handleRequestError = async (e) => {
        Ye({ error: e }), this.startPromise && await this.startPromise;
        let r = ["ECONNRESET", "ECONNREFUSED", "UND_ERR_CLOSED", "UND_ERR_SOCKET", "UND_ERR_DESTROYED", "UND_ERR_ABORTED"].includes(e.code);
        if (e instanceof Ne) return { error: e, shouldRetry: false };
        try {
          if (this.throwAsyncErrorIfExists(), this.currentRequestPromise?.isCanceled) this.throwAsyncErrorIfExists();
          else if (r) {
            if (this.globalKillSignalReceived && !this.child?.connected) throw new pe(`The Node.js process already received a ${this.globalKillSignalReceived} signal, therefore the Prisma query engine exited
  and your request can't be processed.
  You probably have some open handle that prevents your process from exiting.
  It could be an open http server or stream that didn't close yet.
  We recommend using the \`wtfnode\` package to debug open handles.`, { clientVersion: this.clientVersion });
            if (this.throwAsyncErrorIfExists(), this.startCount > DS) {
              for (let n = 0; n < 5; n++) await new Promise((A) => setTimeout(A, 50)), this.throwAsyncErrorIfExists(true);
              throw new Error(`Query engine is trying to restart, but can't.
  Please look into the logs or turn on the env var DEBUG=* to debug the constantly restarting query engine.`);
            }
          }
          throw this.throwAsyncErrorIfExists(true), e;
        } catch (n) {
          return { error: n, shouldRetry: r };
        }
      };
      async metrics({ format: e, globalLabels: r }) {
        await this.start();
        let n = e === "json";
        return (await this.connection.post(`/metrics?format=${encodeURIComponent(e)}`, JSON.stringify(r), null, n)).data;
      }
      httpErrorHandler(e) {
        let r = e.data, n = r.extensions?.traces;
        throw n && this.tracingHelper.dispatchEngineSpans(n), new Ne(r.message, { code: r.error_code, clientVersion: this.clientVersion, meta: r.meta });
      }
      applyPendingMigrations() {
        throw new Error("Method not implemented.");
      }
    };
    function js(t, e = false) {
      process.once(t, async () => {
        for (let r of Rl) await r.emitExit(), r.kill(t);
        Rl.splice(0, Rl.length), e && process.listenerCount(t) === 0 && process.exit();
      });
    }
    var SS = false;
    function t_() {
      SS || (js("beforeExit"), js("exit"), js("SIGINT", true), js("SIGUSR2", true), js("SIGTERM", true), SS = true);
    }
    function r_(t) {
      return new Promise((e) => {
        t.once("exit", e), t.kill();
      });
    }
    var TS = "6.12.0";
    function ci({ inlineDatasources: t, overrideDatasources: e, env: r, clientVersion: n }) {
      let A, i = Object.keys(t)[0], s = t[i]?.url, o = e[i]?.url;
      if (i === void 0 ? A = void 0 : o ? A = o : s?.value ? A = s.value : s?.fromEnvVar && (A = r[s.fromEnvVar]), s?.fromEnvVar !== void 0 && A === void 0) throw new Z(`error: Environment variable not found: ${s.fromEnvVar}.`, n);
      if (A === void 0) throw new Z("error: Missing URL environment variable, value, or override.", n);
      return A;
    }
    var Sl = class extends Error {
      clientVersion;
      cause;
      constructor(e, r) {
        super(e), this.clientVersion = r.clientVersion, this.cause = r.cause;
      }
      get [Symbol.toStringTag]() {
        return this.name;
      }
    };
    var ze = class extends Sl {
      isRetryable;
      constructor(e, r) {
        super(e, r), this.isRetryable = r.isRetryable ?? true;
      }
    };
    function _(t, e) {
      return { ...t, isRetryable: e };
    }
    var Gn = class extends ze {
      name = "InvalidDatasourceError";
      code = "P6001";
      constructor(e, r) {
        super(e, _(r, false));
      }
    };
    M(Gn, "InvalidDatasourceError");
    function xS(t) {
      let e = { clientVersion: t.clientVersion }, r = Object.keys(t.inlineDatasources)[0], n = ci({ inlineDatasources: t.inlineDatasources, overrideDatasources: t.overrideDatasources, clientVersion: t.clientVersion, env: { ...t.env, ...typeof process < "u" ? process.env : {} } }), A;
      try {
        A = new URL(n);
      } catch {
        throw new Gn(`Error validating datasource \`${r}\`: the URL must start with the protocol \`prisma://\``, e);
      }
      let { protocol: i, searchParams: s } = A;
      if (i !== "prisma:" && i !== Yo) throw new Gn(`Error validating datasource \`${r}\`: the URL must start with the protocol \`prisma://\` or \`prisma+postgres://\``, e);
      let o = s.get("api_key");
      if (o === null || o.length < 1) throw new Gn(`Error validating datasource \`${r}\`: the URL must contain a valid API key`, e);
      let a = Iu(A) ? "http:" : "https:", c = new URL(A.href.replace(i, a));
      return { apiKey: o, url: c };
    }
    var US = G(Po());
    var bl = class {
      apiKey;
      tracingHelper;
      logLevel;
      logQueries;
      engineHash;
      constructor({ apiKey: e, tracingHelper: r, logLevel: n, logQueries: A, engineHash: i }) {
        this.apiKey = e, this.tracingHelper = r, this.logLevel = n, this.logQueries = A, this.engineHash = i;
      }
      build({ traceparent: e, transactionId: r } = {}) {
        let n = { Accept: "application/json", Authorization: `Bearer ${this.apiKey}`, "Content-Type": "application/json", "Prisma-Engine-Hash": this.engineHash, "Prisma-Engine-Version": US.enginesVersion };
        this.tracingHelper.isEnabled() && (n.traceparent = e ?? this.tracingHelper.getTraceParent()), r && (n["X-Transaction-Id"] = r);
        let A = this.#e();
        return A.length > 0 && (n["X-Capture-Telemetry"] = A.join(", ")), n;
      }
      #e() {
        let e = [];
        return this.tracingHelper.isEnabled() && e.push("tracing"), this.logLevel && e.push(this.logLevel), this.logQueries && e.push("query"), e;
      }
    };
    function A_(t) {
      return t[0] * 1e3 + t[1] / 1e6;
    }
    function Gh(t) {
      return new Date(A_(t));
    }
    var li = class extends ze {
      name = "ForcedRetryError";
      code = "P5001";
      constructor(e) {
        super("This request must be retried", _(e, true));
      }
    };
    M(li, "ForcedRetryError");
    var On = class extends ze {
      name = "NotImplementedYetError";
      code = "P5004";
      constructor(e, r) {
        super(e, _(r, false));
      }
    };
    M(On, "NotImplementedYetError");
    var oe = class extends ze {
      response;
      constructor(e, r) {
        super(e, r), this.response = r.response;
        let n = this.response.headers.get("prisma-request-id");
        if (n) {
          let A = `(The request id was: ${n})`;
          this.message = this.message + " " + A;
        }
      }
    };
    var Vn = class extends oe {
      name = "SchemaMissingError";
      code = "P5005";
      constructor(e) {
        super("Schema needs to be uploaded", _(e, true));
      }
    };
    M(Vn, "SchemaMissingError");
    var Oh = "This request could not be understood by the server";
    var Xs = class extends oe {
      name = "BadRequestError";
      code = "P5000";
      constructor(e, r, n) {
        super(r || Oh, _(e, false)), n && (this.code = n);
      }
    };
    M(Xs, "BadRequestError");
    var $s = class extends oe {
      name = "HealthcheckTimeoutError";
      code = "P5013";
      logs;
      constructor(e, r) {
        super("Engine not started: healthcheck timeout", _(e, true)), this.logs = r;
      }
    };
    M($s, "HealthcheckTimeoutError");
    var Ks = class extends oe {
      name = "EngineStartupError";
      code = "P5014";
      logs;
      constructor(e, r, n) {
        super(r, _(e, true)), this.logs = n;
      }
    };
    M(Ks, "EngineStartupError");
    var zs = class extends oe {
      name = "EngineVersionNotSupportedError";
      code = "P5012";
      constructor(e) {
        super("Engine version is not supported", _(e, false));
      }
    };
    M(zs, "EngineVersionNotSupportedError");
    var Vh = "Request timed out";
    var eo = class extends oe {
      name = "GatewayTimeoutError";
      code = "P5009";
      constructor(e, r = Vh) {
        super(r, _(e, false));
      }
    };
    M(eo, "GatewayTimeoutError");
    var i_ = "Interactive transaction error";
    var to = class extends oe {
      name = "InteractiveTransactionError";
      code = "P5015";
      constructor(e, r = i_) {
        super(r, _(e, false));
      }
    };
    M(to, "InteractiveTransactionError");
    var s_ = "Request parameters are invalid";
    var ro = class extends oe {
      name = "InvalidRequestError";
      code = "P5011";
      constructor(e, r = s_) {
        super(r, _(e, false));
      }
    };
    M(ro, "InvalidRequestError");
    var Hh = "Requested resource does not exist";
    var no = class extends oe {
      name = "NotFoundError";
      code = "P5003";
      constructor(e, r = Hh) {
        super(r, _(e, false));
      }
    };
    M(no, "NotFoundError");
    var qh = "Unknown server error";
    var ui = class extends oe {
      name = "ServerError";
      code = "P5006";
      logs;
      constructor(e, r, n) {
        super(r || qh, _(e, true)), this.logs = n;
      }
    };
    M(ui, "ServerError");
    var Jh = "Unauthorized, check your connection string";
    var Ao = class extends oe {
      name = "UnauthorizedError";
      code = "P5007";
      constructor(e, r = Jh) {
        super(r, _(e, false));
      }
    };
    M(Ao, "UnauthorizedError");
    var Wh = "Usage exceeded, retry again later";
    var io = class extends oe {
      name = "UsageExceededError";
      code = "P5008";
      constructor(e, r = Wh) {
        super(r, _(e, true));
      }
    };
    M(io, "UsageExceededError");
    async function o_(t) {
      let e;
      try {
        e = await t.text();
      } catch {
        return { type: "EmptyError" };
      }
      try {
        let r = JSON.parse(e);
        if (typeof r == "string") switch (r) {
          case "InternalDataProxyError":
            return { type: "DataProxyError", body: r };
          default:
            return { type: "UnknownTextError", body: r };
        }
        if (typeof r == "object" && r !== null) {
          if ("is_panic" in r && "message" in r && "error_code" in r) return { type: "QueryEngineError", body: r };
          if ("EngineNotStarted" in r || "InteractiveTransactionMisrouted" in r || "InvalidRequestError" in r) {
            let n = Object.values(r)[0].reason;
            return typeof n == "string" && !["SchemaMissing", "EngineVersionNotSupported"].includes(n) ? { type: "UnknownJsonError", body: r } : { type: "DataProxyError", body: r };
          }
        }
        return { type: "UnknownJsonError", body: r };
      } catch {
        return e === "" ? { type: "EmptyError" } : { type: "UnknownTextError", body: e };
      }
    }
    async function so(t, e) {
      if (t.ok) return;
      let r = { clientVersion: e, response: t }, n = await o_(t);
      if (n.type === "QueryEngineError") throw new Ne(n.body.message, { code: n.body.error_code, clientVersion: e });
      if (n.type === "DataProxyError") {
        if (n.body === "InternalDataProxyError") throw new ui(r, "Internal Data Proxy error");
        if ("EngineNotStarted" in n.body) {
          if (n.body.EngineNotStarted.reason === "SchemaMissing") return new Vn(r);
          if (n.body.EngineNotStarted.reason === "EngineVersionNotSupported") throw new zs(r);
          if ("EngineStartupError" in n.body.EngineNotStarted.reason) {
            let { msg: A, logs: i } = n.body.EngineNotStarted.reason.EngineStartupError;
            throw new Ks(r, A, i);
          }
          if ("KnownEngineStartupError" in n.body.EngineNotStarted.reason) {
            let { msg: A, error_code: i } = n.body.EngineNotStarted.reason.KnownEngineStartupError;
            throw new Z(A, e, i);
          }
          if ("HealthcheckTimeout" in n.body.EngineNotStarted.reason) {
            let { logs: A } = n.body.EngineNotStarted.reason.HealthcheckTimeout;
            throw new $s(r, A);
          }
        }
        if ("InteractiveTransactionMisrouted" in n.body) {
          let A = { IDParseError: "Could not parse interactive transaction ID", NoQueryEngineFoundError: "Could not find Query Engine for the specified host and transaction ID", TransactionStartError: "Could not start interactive transaction" };
          throw new to(r, A[n.body.InteractiveTransactionMisrouted.reason]);
        }
        if ("InvalidRequestError" in n.body) throw new ro(r, n.body.InvalidRequestError.reason);
      }
      if (t.status === 401 || t.status === 403) throw new Ao(r, gi(Jh, n));
      if (t.status === 404) return new no(r, gi(Hh, n));
      if (t.status === 429) throw new io(r, gi(Wh, n));
      if (t.status === 504) throw new eo(r, gi(Vh, n));
      if (t.status >= 500) throw new ui(r, gi(qh, n));
      if (t.status >= 400) throw new Xs(r, gi(Oh, n));
    }
    function gi(t, e) {
      return e.type === "EmptyError" ? t : `${t}: ${JSON.stringify(e)}`;
    }
    function kS(t) {
      let e = Math.pow(2, t) * 50, r = Math.ceil(Math.random() * e) - Math.ceil(e / 2), n = e + r;
      return new Promise((A) => setTimeout(() => A(n), n));
    }
    var Dr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    function MS(t) {
      let e = new TextEncoder().encode(t), r = "", n = e.byteLength, A = n % 3, i = n - A, s, o, a, c, l;
      for (let u = 0; u < i; u = u + 3) l = e[u] << 16 | e[u + 1] << 8 | e[u + 2], s = (l & 16515072) >> 18, o = (l & 258048) >> 12, a = (l & 4032) >> 6, c = l & 63, r += Dr[s] + Dr[o] + Dr[a] + Dr[c];
      return A == 1 ? (l = e[i], s = (l & 252) >> 2, o = (l & 3) << 4, r += Dr[s] + Dr[o] + "==") : A == 2 && (l = e[i] << 8 | e[i + 1], s = (l & 64512) >> 10, o = (l & 1008) >> 4, a = (l & 15) << 2, r += Dr[s] + Dr[o] + Dr[a] + "="), r;
    }
    function LS(t) {
      if (!!t.generator?.previewFeatures.some((r) => r.toLowerCase().includes("metrics"))) throw new Z("The `metrics` preview feature is not yet available with Accelerate.\nPlease remove `metrics` from the `previewFeatures` in your schema.\n\nMore information about Accelerate: https://pris.ly/d/accelerate", t.clientVersion);
    }
    var vS = { "@prisma/debug": "workspace:*", "@prisma/engines-version": "6.12.0-15.8047c96bbd92db98a2abc7c9323ce77c02c89dbc", "@prisma/fetch-engine": "workspace:*", "@prisma/get-platform": "workspace:*" };
    var oo = class extends ze {
      name = "RequestError";
      code = "P5010";
      constructor(e, r) {
        super(`Cannot fetch data from service:
${e}`, _(r, true));
      }
    };
    M(oo, "RequestError");
    async function Hn(t, e, r = (n) => n) {
      let { clientVersion: n, ...A } = e, i = r(fetch);
      try {
        return await i(t, A);
      } catch (s) {
        let o = s.message ?? "Unknown error";
        throw new oo(o, { clientVersion: n, cause: s });
      }
    }
    var c_ = /^[1-9][0-9]*\.[0-9]+\.[0-9]+$/;
    var PS = ce("prisma:client:dataproxyEngine");
    async function l_(t, e) {
      let r = vS["@prisma/engines-version"], n = e.clientVersion ?? "unknown";
      if (process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION || globalThis.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION) return process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION || globalThis.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION;
      if (t.includes("accelerate") && n !== "0.0.0" && n !== "in-memory") return n;
      let [A, i] = n?.split("-") ?? [];
      if (i === void 0 && c_.test(A)) return A;
      if (i !== void 0 || n === "0.0.0" || n === "in-memory") {
        let [s] = r.split("-") ?? [], [o, a, c] = s.split("."), l = u_(`<=${o}.${a}.${c}`), u = await Hn(l, { clientVersion: n });
        if (!u.ok) throw new Error(`Failed to fetch stable Prisma version, unpkg.com status ${u.status} ${u.statusText}, response body: ${await u.text() || "<empty body>"}`);
        let g = await u.text();
        PS("length of body fetched from unpkg.com", g.length);
        let E;
        try {
          E = JSON.parse(g);
        } catch (h) {
          throw console.error("JSON.parse error: body fetched from unpkg.com: ", g), h;
        }
        return E.version;
      }
      throw new On("Only `major.minor.patch` versions are supported by Accelerate.", { clientVersion: n });
    }
    async function YS(t, e) {
      let r = await l_(t, e);
      return PS("version", r), r;
    }
    function u_(t) {
      return encodeURI(`https://unpkg.com/prisma@${t}/package.json`);
    }
    var GS = 3;
    var ao = ce("prisma:client:dataproxyEngine");
    var co = class {
      name = "DataProxyEngine";
      inlineSchema;
      inlineSchemaHash;
      inlineDatasources;
      config;
      logEmitter;
      env;
      clientVersion;
      engineHash;
      tracingHelper;
      remoteClientVersion;
      host;
      headerBuilder;
      startPromise;
      protocol;
      constructor(e) {
        LS(e), this.config = e, this.env = e.env, this.inlineSchema = MS(e.inlineSchema), this.inlineDatasources = e.inlineDatasources, this.inlineSchemaHash = e.inlineSchemaHash, this.clientVersion = e.clientVersion, this.engineHash = e.engineVersion, this.logEmitter = e.logEmitter, this.tracingHelper = e.tracingHelper;
      }
      apiKey() {
        return this.headerBuilder.apiKey;
      }
      version() {
        return this.engineHash;
      }
      async start() {
        this.startPromise !== void 0 && await this.startPromise, this.startPromise = (async () => {
          let { apiKey: e, url: r } = this.getURLAndAPIKey();
          this.host = r.host, this.protocol = r.protocol, this.headerBuilder = new bl({ apiKey: e, tracingHelper: this.tracingHelper, logLevel: this.config.logLevel ?? "error", logQueries: this.config.logQueries, engineHash: this.engineHash }), this.remoteClientVersion = await YS(this.host, this.config), ao("host", this.host), ao("protocol", this.protocol);
        })(), await this.startPromise;
      }
      async stop() {
      }
      propagateResponseExtensions(e) {
        e?.logs?.length && e.logs.forEach((r) => {
          switch (r.level) {
            case "debug":
            case "trace":
              ao(r);
              break;
            case "error":
            case "warn":
            case "info": {
              this.logEmitter.emit(r.level, { timestamp: Gh(r.timestamp), message: r.attributes.message ?? "", target: r.target });
              break;
            }
            case "query": {
              this.logEmitter.emit("query", { query: r.attributes.query ?? "", timestamp: Gh(r.timestamp), duration: r.attributes.duration_ms ?? 0, params: r.attributes.params ?? "", target: r.target });
              break;
            }
            default:
              r.level;
          }
        }), e?.traces?.length && this.tracingHelper.dispatchEngineSpans(e.traces);
      }
      onBeforeExit() {
        throw new Error('"beforeExit" hook is not applicable to the remote query engine');
      }
      async url(e) {
        return await this.start(), `${this.protocol}//${this.host}/${this.remoteClientVersion}/${this.inlineSchemaHash}/${e}`;
      }
      async uploadSchema() {
        let e = { name: "schemaUpload", internal: true };
        return this.tracingHelper.runInChildSpan(e, async () => {
          let r = await Hn(await this.url("schema"), { method: "PUT", headers: this.headerBuilder.build(), body: this.inlineSchema, clientVersion: this.clientVersion });
          r.ok || ao("schema response status", r.status);
          let n = await so(r, this.clientVersion);
          if (n) throw this.logEmitter.emit("warn", { message: `Error while uploading schema: ${n.message}`, timestamp: /* @__PURE__ */ new Date(), target: "" }), n;
          this.logEmitter.emit("info", { message: `Schema (re)uploaded (hash: ${this.inlineSchemaHash})`, timestamp: /* @__PURE__ */ new Date(), target: "" });
        });
      }
      request(e, { traceparent: r, interactiveTransaction: n, customDataProxyFetch: A }) {
        return this.requestInternal({ body: e, traceparent: r, interactiveTransaction: n, customDataProxyFetch: A });
      }
      async requestBatch(e, { traceparent: r, transaction: n, customDataProxyFetch: A }) {
        let i = n?.kind === "itx" ? n.options : void 0, s = IA(e, n);
        return (await this.requestInternal({ body: s, customDataProxyFetch: A, interactiveTransaction: i, traceparent: r })).map((a) => (a.extensions && this.propagateResponseExtensions(a.extensions), "errors" in a ? this.convertProtocolErrorsToClientError(a.errors) : a));
      }
      requestInternal({ body: e, traceparent: r, customDataProxyFetch: n, interactiveTransaction: A }) {
        return this.withRetry({ actionGerund: "querying", callback: async ({ logHttpCall: i }) => {
          let s = A ? `${A.payload.endpoint}/graphql` : await this.url("graphql");
          i(s);
          let o = await Hn(s, { method: "POST", headers: this.headerBuilder.build({ traceparent: r, transactionId: A?.id }), body: JSON.stringify(e), clientVersion: this.clientVersion }, n);
          o.ok || ao("graphql response status", o.status), await this.handleError(await so(o, this.clientVersion));
          let a = await o.json();
          if (a.extensions && this.propagateResponseExtensions(a.extensions), "errors" in a) throw this.convertProtocolErrorsToClientError(a.errors);
          return "batchResult" in a ? a.batchResult : a;
        } });
      }
      async transaction(e, r, n) {
        let A = { start: "starting", commit: "committing", rollback: "rolling back" };
        return this.withRetry({ actionGerund: `${A[e]} transaction`, callback: async ({ logHttpCall: i }) => {
          if (e === "start") {
            let s = JSON.stringify({ max_wait: n.maxWait, timeout: n.timeout, isolation_level: n.isolationLevel }), o = await this.url("transaction/start");
            i(o);
            let a = await Hn(o, { method: "POST", headers: this.headerBuilder.build({ traceparent: r.traceparent }), body: s, clientVersion: this.clientVersion });
            await this.handleError(await so(a, this.clientVersion));
            let c = await a.json(), { extensions: l } = c;
            l && this.propagateResponseExtensions(l);
            let u = c.id, g = c["data-proxy"].endpoint;
            return { id: u, payload: { endpoint: g } };
          } else {
            let s = `${n.payload.endpoint}/${e}`;
            i(s);
            let o = await Hn(s, { method: "POST", headers: this.headerBuilder.build({ traceparent: r.traceparent }), clientVersion: this.clientVersion });
            await this.handleError(await so(o, this.clientVersion));
            let a = await o.json(), { extensions: c } = a;
            c && this.propagateResponseExtensions(c);
            return;
          }
        } });
      }
      getURLAndAPIKey() {
        return xS({ clientVersion: this.clientVersion, env: this.env, inlineDatasources: this.inlineDatasources, overrideDatasources: this.config.overrideDatasources });
      }
      metrics() {
        throw new On("Metrics are not yet supported for Accelerate", { clientVersion: this.clientVersion });
      }
      async withRetry(e) {
        for (let r = 0; ; r++) {
          let n = (A) => {
            this.logEmitter.emit("info", { message: `Calling ${A} (n=${r})`, timestamp: /* @__PURE__ */ new Date(), target: "" });
          };
          try {
            return await e.callback({ logHttpCall: n });
          } catch (A) {
            if (!(A instanceof ze) || !A.isRetryable) throw A;
            if (r >= GS) throw A instanceof li ? A.cause : A;
            this.logEmitter.emit("warn", { message: `Attempt ${r + 1}/${GS} failed for ${e.actionGerund}: ${A.message ?? "(unknown)"}`, timestamp: /* @__PURE__ */ new Date(), target: "" });
            let i = await kS(r);
            this.logEmitter.emit("warn", { message: `Retrying after ${i}ms`, timestamp: /* @__PURE__ */ new Date(), target: "" });
          }
        }
      }
      async handleError(e) {
        if (e instanceof Vn) throw await this.uploadSchema(), new li({ clientVersion: this.clientVersion, cause: e });
        if (e) throw e;
      }
      convertProtocolErrorsToClientError(e) {
        return e.length === 1 ? Yr(e[0], this.config.clientVersion, this.config.activeProvider) : new pe(JSON.stringify(e), { clientVersion: this.config.clientVersion });
      }
      applyPendingMigrations() {
        throw new Error("Method not implemented.");
      }
    };
    function OS({ url: t, adapter: e, copyEngine: r, targetBuildType: n }) {
      let A = [], i = [], s = (f) => {
        A.push({ _tag: "warning", value: f });
      }, o = (f) => {
        let B = f.join(`
`);
        i.push({ _tag: "error", value: B });
      }, a = !!t?.startsWith("prisma://"), c = Go(t), l = !!e, u = a || c;
      !l && r && u && s(["recommend--no-engine", "In production, we recommend using `prisma generate --no-engine` (See: `prisma generate --help`)"]);
      let g = u || !r;
      l && (g || n === "edge") && (n === "edge" ? o(["Prisma Client was configured to use the `adapter` option but it was imported via its `/edge` endpoint.", "Please either remove the `/edge` endpoint or remove the `adapter` from the Prisma Client constructor."]) : r ? a && o(["Prisma Client was configured to use the `adapter` option but the URL was a `prisma://` URL.", "Please either use the `prisma://` URL or remove the `adapter` from the Prisma Client constructor."]) : o(["Prisma Client was configured to use the `adapter` option but `prisma generate` was run with `--no-engine`.", "Please run `prisma generate` without `--no-engine` to be able to use Prisma Client with the adapter."]));
      let E = { accelerate: g, ppg: c, driverAdapters: l };
      function h(f) {
        return f.length > 0;
      }
      return h(i) ? { ok: false, diagnostics: { warnings: A, errors: i }, isUsing: E } : { ok: true, diagnostics: { warnings: A }, isUsing: E };
    }
    function VS({ copyEngine: t = true }, e) {
      let r;
      try {
        r = ci({ inlineDatasources: e.inlineDatasources, overrideDatasources: e.overrideDatasources, env: { ...e.env, ...process.env }, clientVersion: e.clientVersion });
      } catch {
      }
      let { ok: n, isUsing: A, diagnostics: i } = OS({ url: r, adapter: e.adapter, copyEngine: t, targetBuildType: "binary" });
      for (let u of i.warnings) Fi(...u.value);
      if (!n) {
        let u = i.errors[0];
        throw new Ue(u.value, { clientVersion: e.clientVersion });
      }
      let s = tA(e.generator), o = s === "library", a = s === "binary", c = s === "client", l = (A.accelerate || A.ppg) && !A.driverAdapters;
      return A.accelerate ? new co(e) : (A.driverAdapters, a ? new ai(e) : (A.accelerate, new ai(e)));
    }
    function Nl({ generator: t }) {
      return t?.previewFeatures ?? [];
    }
    var HS = (t) => ({ command: t });
    var qS = (t) => t.strings.reduce((e, r, n) => `${e}@P${n}${r}`);
    function Ei(t) {
      try {
        return JS(t, "fast");
      } catch {
        return JS(t, "slow");
      }
    }
    function JS(t, e) {
      return JSON.stringify(t.map((r) => _S(r, e)));
    }
    function _S(t, e) {
      if (Array.isArray(t)) return t.map((r) => _S(r, e));
      if (typeof t == "bigint") return { prisma__type: "bigint", prisma__value: t.toString() };
      if (oA(t)) return { prisma__type: "date", prisma__value: t.toJSON() };
      if (Lt.isDecimal(t)) return { prisma__type: "decimal", prisma__value: t.toJSON() };
      if (Buffer.isBuffer(t)) return { prisma__type: "bytes", prisma__value: t.toString("base64") };
      if (g_(t)) return { prisma__type: "bytes", prisma__value: Buffer.from(t).toString("base64") };
      if (ArrayBuffer.isView(t)) {
        let { buffer: r, byteOffset: n, byteLength: A } = t;
        return { prisma__type: "bytes", prisma__value: Buffer.from(r, n, A).toString("base64") };
      }
      return typeof t == "object" && e === "slow" ? jS(t) : t;
    }
    function g_(t) {
      return t instanceof ArrayBuffer || t instanceof SharedArrayBuffer ? true : typeof t == "object" && t !== null ? t[Symbol.toStringTag] === "ArrayBuffer" || t[Symbol.toStringTag] === "SharedArrayBuffer" : false;
    }
    function jS(t) {
      if (typeof t != "object" || t === null) return t;
      if (typeof t.toJSON == "function") return t.toJSON();
      if (Array.isArray(t)) return t.map(WS);
      let e = {};
      for (let r of Object.keys(t)) e[r] = WS(t[r]);
      return e;
    }
    function WS(t) {
      return typeof t == "bigint" ? t.toString() : jS(t);
    }
    var E_ = /^(\s*alter\s)/i;
    var ZS = ce("prisma:client");
    function _h(t, e, r, n) {
      if (!(t !== "postgresql" && t !== "cockroachdb") && r.length > 0 && E_.exec(e)) throw new Error(`Running ALTER using ${n} is not supported
Using the example below you can still execute your query with Prisma, but please note that it is vulnerable to SQL injection attacks and requires you to take care of input sanitization.

Example:
  await prisma.$executeRawUnsafe(\`ALTER USER prisma WITH PASSWORD '\${password}'\`)

More Information: https://pris.ly/d/execute-raw
`);
    }
    var jh = ({ clientMethod: t, activeProvider: e }) => (r) => {
      let n = "", A;
      if (Ca(r)) n = r.sql, A = { values: Ei(r.values), __prismaRawParameters__: true };
      else if (Array.isArray(r)) {
        let [i, ...s] = r;
        n = i, A = { values: Ei(s || []), __prismaRawParameters__: true };
      } else switch (e) {
        case "sqlite":
        case "mysql": {
          n = r.sql, A = { values: Ei(r.values), __prismaRawParameters__: true };
          break;
        }
        case "cockroachdb":
        case "postgresql":
        case "postgres": {
          n = r.text, A = { values: Ei(r.values), __prismaRawParameters__: true };
          break;
        }
        case "sqlserver": {
          n = qS(r), A = { values: Ei(r.values), __prismaRawParameters__: true };
          break;
        }
        default:
          throw new Error(`The ${e} provider does not support ${t}`);
      }
      return A?.values ? ZS(`prisma.${t}(${n}, ${A.values})`) : ZS(`prisma.${t}(${n})`), { query: n, parameters: A };
    };
    var XS = { requestArgsToMiddlewareArgs(t) {
      return [t.strings, ...t.values];
    }, middlewareArgsToRequestArgs(t) {
      let [e, ...r] = t;
      return new _e(e, r);
    } };
    var $S = { requestArgsToMiddlewareArgs(t) {
      return [t];
    }, middlewareArgsToRequestArgs(t) {
      return t[0];
    } };
    function Zh(t) {
      return function(r, n) {
        let A, i = (s = t) => {
          try {
            return s === void 0 || s?.kind === "itx" ? A ??= KS(r(s)) : KS(r(s));
          } catch (o) {
            return Promise.reject(o);
          }
        };
        return { get spec() {
          return n;
        }, then(s, o) {
          return i().then(s, o);
        }, catch(s) {
          return i().catch(s);
        }, finally(s) {
          return i().finally(s);
        }, requestTransaction(s) {
          let o = i(s);
          return o.requestTransaction ? o.requestTransaction(s) : o;
        }, [Symbol.toStringTag]: "PrismaPromise" };
      };
    }
    function KS(t) {
      return typeof t.then == "function" ? t : Promise.resolve(t);
    }
    var d_ = gu.split(".")[0];
    var h_ = { isEnabled() {
      return false;
    }, getTraceParent() {
      return "00-10-10-00";
    }, dispatchEngineSpans() {
    }, getActiveContext() {
    }, runInChildSpan(t, e) {
      return e();
    } };
    var Xh = class {
      isEnabled() {
        return this.getGlobalTracingHelper().isEnabled();
      }
      getTraceParent(e) {
        return this.getGlobalTracingHelper().getTraceParent(e);
      }
      dispatchEngineSpans(e) {
        return this.getGlobalTracingHelper().dispatchEngineSpans(e);
      }
      getActiveContext() {
        return this.getGlobalTracingHelper().getActiveContext();
      }
      runInChildSpan(e, r) {
        return this.getGlobalTracingHelper().runInChildSpan(e, r);
      }
      getGlobalTracingHelper() {
        let e = globalThis[`V${d_}_PRISMA_INSTRUMENTATION`], r = globalThis.PRISMA_INSTRUMENTATION;
        return e?.helper ?? r?.helper ?? h_;
      }
    };
    function zS() {
      return new Xh();
    }
    function eb(t, e = () => {
    }) {
      let r, n = new Promise((A) => r = A);
      return { then(A) {
        return --t === 0 && r(e()), A?.(n);
      } };
    }
    function tb(t) {
      return typeof t == "string" ? t : t.reduce((e, r) => {
        let n = typeof r == "string" ? r : r.level;
        return n === "query" ? e : e && (r === "info" || e === "info") ? "info" : n;
      }, void 0);
    }
    var Fl = class {
      _middlewares = [];
      use(e) {
        this._middlewares.push(e);
      }
      get(e) {
        return this._middlewares[e];
      }
      has(e) {
        return !!this._middlewares[e];
      }
      length() {
        return this._middlewares.length;
      }
    };
    var nb = G(wu());
    function Tl(t) {
      return typeof t.batchRequestIdx == "number";
    }
    function rb(t) {
      if (t.action !== "findUnique" && t.action !== "findUniqueOrThrow") return;
      let e = [];
      return t.modelName && e.push(t.modelName), t.query.arguments && e.push($h(t.query.arguments)), e.push($h(t.query.selection)), e.join("");
    }
    function $h(t) {
      return `(${Object.keys(t).sort().map((r) => {
        let n = t[r];
        return typeof n == "object" && n !== null ? `(${r} ${$h(n)})` : r;
      }).join(" ")})`;
    }
    var f_ = { aggregate: false, aggregateRaw: false, createMany: true, createManyAndReturn: true, createOne: true, deleteMany: true, deleteOne: true, executeRaw: true, findFirst: false, findFirstOrThrow: false, findMany: false, findRaw: false, findUnique: false, findUniqueOrThrow: false, groupBy: false, queryRaw: false, runCommandRaw: true, updateMany: true, updateManyAndReturn: true, updateOne: true, upsertOne: true };
    function Kh(t) {
      return f_[t];
    }
    var xl = class {
      constructor(e) {
        this.options = e;
        this.batches = {};
      }
      batches;
      tickActive = false;
      request(e) {
        let r = this.options.batchBy(e);
        return r ? (this.batches[r] || (this.batches[r] = [], this.tickActive || (this.tickActive = true, process.nextTick(() => {
          this.dispatchBatches(), this.tickActive = false;
        }))), new Promise((n, A) => {
          this.batches[r].push({ request: e, resolve: n, reject: A });
        })) : this.options.singleLoader(e);
      }
      dispatchBatches() {
        for (let e in this.batches) {
          let r = this.batches[e];
          delete this.batches[e], r.length === 1 ? this.options.singleLoader(r[0].request).then((n) => {
            n instanceof Error ? r[0].reject(n) : r[0].resolve(n);
          }).catch((n) => {
            r[0].reject(n);
          }) : (r.sort((n, A) => this.options.batchOrder(n.request, A.request)), this.options.batchLoader(r.map((n) => n.request)).then((n) => {
            if (n instanceof Error) for (let A = 0; A < r.length; A++) r[A].reject(n);
            else for (let A = 0; A < r.length; A++) {
              let i = n[A];
              i instanceof Error ? r[A].reject(i) : r[A].resolve(i);
            }
          }).catch((n) => {
            for (let A = 0; A < r.length; A++) r[A].reject(n);
          }));
        }
      }
      get [Symbol.toStringTag]() {
        return "DataLoader";
      }
    };
    function qn(t, e) {
      if (e === null) return e;
      switch (t) {
        case "bigint":
          return BigInt(e);
        case "bytes": {
          let { buffer: r, byteOffset: n, byteLength: A } = Buffer.from(e, "base64");
          return new Uint8Array(r, n, A);
        }
        case "decimal":
          return new Lt(e);
        case "datetime":
        case "date":
          return new Date(e);
        case "time":
          return /* @__PURE__ */ new Date(`1970-01-01T${e}Z`);
        case "bigint-array":
          return e.map((r) => qn("bigint", r));
        case "bytes-array":
          return e.map((r) => qn("bytes", r));
        case "decimal-array":
          return e.map((r) => qn("decimal", r));
        case "datetime-array":
          return e.map((r) => qn("datetime", r));
        case "date-array":
          return e.map((r) => qn("date", r));
        case "time-array":
          return e.map((r) => qn("time", r));
        default:
          return e;
      }
    }
    function Ul(t) {
      let e = [], r = Q_(t);
      for (let n = 0; n < t.rows.length; n++) {
        let A = t.rows[n], i = { ...r };
        for (let s = 0; s < A.length; s++) i[t.columns[s]] = qn(t.types[s], A[s]);
        e.push(i);
      }
      return e;
    }
    function Q_(t) {
      let e = {};
      for (let r = 0; r < t.columns.length; r++) e[t.columns[r]] = null;
      return e;
    }
    var C_ = ce("prisma:client:request_handler");
    var kl = class {
      client;
      dataloader;
      logEmitter;
      constructor(e, r) {
        this.logEmitter = r, this.client = e, this.dataloader = new xl({ batchLoader: iB(async ({ requests: n, customDataProxyFetch: A }) => {
          let { transaction: i, otelParentCtx: s } = n[0], o = n.map((u) => u.protocolQuery), a = this.client._tracingHelper.getTraceParent(s), c = n.some((u) => Kh(u.protocolQuery.action));
          return (await this.client._engine.requestBatch(o, { traceparent: a, transaction: I_(i), containsWrite: c, customDataProxyFetch: A })).map((u, g) => {
            if (u instanceof Error) return u;
            try {
              return this.mapQueryEngineResult(n[g], u);
            } catch (E) {
              return E;
            }
          });
        }), singleLoader: async (n) => {
          let A = n.transaction?.kind === "itx" ? Ab(n.transaction) : void 0, i = await this.client._engine.request(n.protocolQuery, { traceparent: this.client._tracingHelper.getTraceParent(), interactiveTransaction: A, isWrite: Kh(n.protocolQuery.action), customDataProxyFetch: n.customDataProxyFetch });
          return this.mapQueryEngineResult(n, i);
        }, batchBy: (n) => n.transaction?.id ? `transaction-${n.transaction.id}` : rb(n.protocolQuery), batchOrder(n, A) {
          return n.transaction?.kind === "batch" && A.transaction?.kind === "batch" ? n.transaction.index - A.transaction.index : 0;
        } });
      }
      async request(e) {
        try {
          return await this.dataloader.request(e);
        } catch (r) {
          let { clientMethod: n, callsite: A, transaction: i, args: s, modelName: o } = e;
          this.handleAndLogRequestError({ error: r, clientMethod: n, callsite: A, transaction: i, args: s, modelName: o, globalOmit: e.globalOmit });
        }
      }
      mapQueryEngineResult({ dataPath: e, unpacker: r }, n) {
        let A = n?.data, i = this.unpack(A, e, r);
        return process.env.PRISMA_CLIENT_GET_TIME ? { data: i } : i;
      }
      handleAndLogRequestError(e) {
        try {
          this.handleRequestError(e);
        } catch (r) {
          throw this.logEmitter && this.logEmitter.emit("error", { message: r.message, target: e.clientMethod, timestamp: /* @__PURE__ */ new Date() }), r;
        }
      }
      handleRequestError({ error: e, clientMethod: r, callsite: n, transaction: A, args: i, modelName: s, globalOmit: o }) {
        if (C_(e), B_(e, A)) throw e;
        if (e instanceof Ne && p_(e)) {
          let c = ib(e.meta);
          ga({ args: i, errors: [c], callsite: n, errorFormat: this.client._errorFormat, originalMethod: r, clientVersion: this.client._clientVersion, globalOmit: o });
        }
        let a = e.message;
        if (n && (a = ra({ callsite: n, originalMethod: r, isPanic: e.isPanic, showColors: this.client._errorFormat === "pretty", message: a })), a = this.sanitizeMessage(a), e.code) {
          let c = s ? { modelName: s, ...e.meta } : e.meta;
          throw new Ne(a, { code: e.code, clientVersion: this.client._clientVersion, meta: c, batchRequestIdx: e.batchRequestIdx });
        } else {
          if (e.isPanic) throw new ut(a, this.client._clientVersion);
          if (e instanceof pe) throw new pe(a, { clientVersion: this.client._clientVersion, batchRequestIdx: e.batchRequestIdx });
          if (e instanceof Z) throw new Z(a, this.client._clientVersion);
          if (e instanceof ut) throw new ut(a, this.client._clientVersion);
        }
        throw e.clientVersion = this.client._clientVersion, e;
      }
      sanitizeMessage(e) {
        return this.client._errorFormat && this.client._errorFormat !== "pretty" ? (0, nb.default)(e) : e;
      }
      unpack(e, r, n) {
        if (!e || (e.data && (e = e.data), !e)) return e;
        let A = Object.keys(e)[0], i = Object.values(e)[0], s = r.filter((c) => c !== "select" && c !== "include"), o = $u(i, s), a = A === "queryRaw" ? Ul(o) : sA(o);
        return n ? n(a) : a;
      }
      get [Symbol.toStringTag]() {
        return "RequestHandler";
      }
    };
    function I_(t) {
      if (t) {
        if (t.kind === "batch") return { kind: "batch", options: { isolationLevel: t.isolationLevel } };
        if (t.kind === "itx") return { kind: "itx", options: Ab(t) };
        sr(t, "Unknown transaction kind");
      }
    }
    function Ab(t) {
      return { id: t.id, payload: t.payload };
    }
    function B_(t, e) {
      return Tl(t) && e?.kind === "batch" && t.batchRequestIdx !== e.index;
    }
    function p_(t) {
      return t.code === "P2009" || t.code === "P2012";
    }
    function ib(t) {
      if (t.kind === "Union") return { kind: "Union", errors: t.errors.map(ib) };
      if (Array.isArray(t.selectionPath)) {
        let [, ...e] = t.selectionPath;
        return { ...t, selectionPath: e };
      }
      return t;
    }
    var sb = TS;
    var ub = G(Pu());
    var z2 = class extends Error {
      constructor(e) {
        super(e + `
Read more at https://pris.ly/d/client-constructor`), this.name = "PrismaClientConstructorValidationError";
      }
      get [Symbol.toStringTag]() {
        return "PrismaClientConstructorValidationError";
      }
    };
    M(z2, "PrismaClientConstructorValidationError");
    var ob = ["datasources", "datasourceUrl", "errorFormat", "adapter", "log", "transactionOptions", "omit", "__internal"];
    var ab = ["pretty", "colorless", "minimal"];
    var cb = ["info", "query", "warn", "error"];
    var m_ = { datasources: (t, { datasourceNames: e }) => {
      if (t) {
        if (typeof t != "object" || Array.isArray(t)) throw new z2(`Invalid value ${JSON.stringify(t)} for "datasources" provided to PrismaClient constructor`);
        for (let [r, n] of Object.entries(t)) {
          if (!e.includes(r)) {
            let A = di(r, e) || ` Available datasources: ${e.join(", ")}`;
            throw new z2(`Unknown datasource ${r} provided to PrismaClient constructor.${A}`);
          }
          if (typeof n != "object" || Array.isArray(n)) throw new z2(`Invalid value ${JSON.stringify(t)} for datasource "${r}" provided to PrismaClient constructor.
It should have this form: { url: "CONNECTION_STRING" }`);
          if (n && typeof n == "object") for (let [A, i] of Object.entries(n)) {
            if (A !== "url") throw new z2(`Invalid value ${JSON.stringify(t)} for datasource "${r}" provided to PrismaClient constructor.
It should have this form: { url: "CONNECTION_STRING" }`);
            if (typeof i != "string") throw new z2(`Invalid value ${JSON.stringify(i)} for datasource "${r}" provided to PrismaClient constructor.
It should have this form: { url: "CONNECTION_STRING" }`);
          }
        }
      }
    }, adapter: (t, e) => {
      if (!t && tA(e.generator) === "client") throw new z2('Using engine type "client" requires a driver adapter to be provided to PrismaClient constructor.');
      if (t === null) return;
      if (t === void 0) throw new z2('"adapter" property must not be undefined, use null to conditionally disable driver adapters.');
      if (!Nl(e).includes("driverAdapters")) throw new z2('"adapter" property can only be provided to PrismaClient constructor when "driverAdapters" preview feature is enabled.');
      if (tA(e.generator) === "binary") throw new z2('Cannot use a driver adapter with the "binary" Query Engine. Please use the "library" Query Engine.');
    }, datasourceUrl: (t) => {
      if (typeof t < "u" && typeof t != "string") throw new z2(`Invalid value ${JSON.stringify(t)} for "datasourceUrl" provided to PrismaClient constructor.
Expected string or undefined.`);
    }, errorFormat: (t) => {
      if (t) {
        if (typeof t != "string") throw new z2(`Invalid value ${JSON.stringify(t)} for "errorFormat" provided to PrismaClient constructor.`);
        if (!ab.includes(t)) {
          let e = di(t, ab);
          throw new z2(`Invalid errorFormat ${t} provided to PrismaClient constructor.${e}`);
        }
      }
    }, log: (t) => {
      if (!t) return;
      if (!Array.isArray(t)) throw new z2(`Invalid value ${JSON.stringify(t)} for "log" provided to PrismaClient constructor.`);
      function e(r) {
        if (typeof r == "string" && !cb.includes(r)) {
          let n = di(r, cb);
          throw new z2(`Invalid log level "${r}" provided to PrismaClient constructor.${n}`);
        }
      }
      for (let r of t) {
        e(r);
        let n = { level: e, emit: (A) => {
          let i = ["stdout", "event"];
          if (!i.includes(A)) {
            let s = di(A, i);
            throw new z2(`Invalid value ${JSON.stringify(A)} for "emit" in logLevel provided to PrismaClient constructor.${s}`);
          }
        } };
        if (r && typeof r == "object") for (let [A, i] of Object.entries(r)) if (n[A]) n[A](i);
        else throw new z2(`Invalid property ${A} for "log" provided to PrismaClient constructor`);
      }
    }, transactionOptions: (t) => {
      if (!t) return;
      let e = t.maxWait;
      if (e != null && e <= 0) throw new z2(`Invalid value ${e} for maxWait in "transactionOptions" provided to PrismaClient constructor. maxWait needs to be greater than 0`);
      let r = t.timeout;
      if (r != null && r <= 0) throw new z2(`Invalid value ${r} for timeout in "transactionOptions" provided to PrismaClient constructor. timeout needs to be greater than 0`);
    }, omit: (t, e) => {
      if (typeof t != "object") throw new z2('"omit" option is expected to be an object.');
      if (t === null) throw new z2('"omit" option can not be `null`');
      let r = [];
      for (let [n, A] of Object.entries(t)) {
        let i = w_(n, e.runtimeDataModel);
        if (!i) {
          r.push({ kind: "UnknownModel", modelKey: n });
          continue;
        }
        for (let [s, o] of Object.entries(A)) {
          let a = i.fields.find((c) => c.name === s);
          if (!a) {
            r.push({ kind: "UnknownField", modelKey: n, fieldName: s });
            continue;
          }
          if (a.relationName) {
            r.push({ kind: "RelationInOmit", modelKey: n, fieldName: s });
            continue;
          }
          typeof o != "boolean" && r.push({ kind: "InvalidFieldValue", modelKey: n, fieldName: s });
        }
      }
      if (r.length > 0) throw new z2(D_(t, r));
    }, __internal: (t) => {
      if (!t) return;
      let e = ["debug", "engine", "configOverride"];
      if (typeof t != "object") throw new z2(`Invalid value ${JSON.stringify(t)} for "__internal" to PrismaClient constructor`);
      for (let [r] of Object.entries(t)) if (!e.includes(r)) {
        let n = di(r, e);
        throw new z2(`Invalid property ${JSON.stringify(r)} for "__internal" provided to PrismaClient constructor.${n}`);
      }
    } };
    function gb(t, e) {
      for (let [r, n] of Object.entries(t)) {
        if (!ob.includes(r)) {
          let A = di(r, ob);
          throw new z2(`Unknown property ${r} provided to PrismaClient constructor.${A}`);
        }
        m_[r](n, e);
      }
      if (t.datasourceUrl && t.datasources) throw new z2('Can not use "datasourceUrl" and "datasources" options at the same time. Pick one of them');
    }
    function di(t, e) {
      if (e.length === 0 || typeof t != "string") return "";
      let r = y_(t, e);
      return r ? ` Did you mean "${r}"?` : "";
    }
    function y_(t, e) {
      if (e.length === 0) return null;
      let r = e.map((A) => ({ value: A, distance: (0, ub.default)(t, A) }));
      r.sort((A, i) => A.distance < i.distance ? -1 : 1);
      let n = r[0];
      return n.distance < 3 ? n.value : null;
    }
    function w_(t, e) {
      return lb(e.models, t) ?? lb(e.types, t);
    }
    function lb(t, e) {
      let r = Object.keys(t).find((n) => vr(n) === e);
      if (r) return t[r];
    }
    function D_(t, e) {
      let r = hA(t);
      for (let i of e) switch (i.kind) {
        case "UnknownModel":
          r.arguments.getField(i.modelKey)?.markAsError(), r.addErrorMessage(() => `Unknown model name: ${i.modelKey}.`);
          break;
        case "UnknownField":
          r.arguments.getDeepField([i.modelKey, i.fieldName])?.markAsError(), r.addErrorMessage(() => `Model "${i.modelKey}" does not have a field named "${i.fieldName}".`);
          break;
        case "RelationInOmit":
          r.arguments.getDeepField([i.modelKey, i.fieldName])?.markAsError(), r.addErrorMessage(() => 'Relations are already excluded by default and can not be specified in "omit".');
          break;
        case "InvalidFieldValue":
          r.arguments.getDeepFieldValue([i.modelKey, i.fieldName])?.markAsError(), r.addErrorMessage(() => "Omit field option value must be a boolean.");
          break;
      }
      let { message: n, args: A } = ua(r, "colorless");
      return `Error validating "omit" option:

${A}

${n}`;
    }
    function Eb(t) {
      return t.length === 0 ? Promise.resolve([]) : new Promise((e, r) => {
        let n = new Array(t.length), A = null, i = false, s = 0, o = () => {
          i || (s++, s === t.length && (i = true, A ? r(A) : e(n)));
        }, a = (c) => {
          i || (i = true, r(c));
        };
        for (let c = 0; c < t.length; c++) t[c].then((l) => {
          n[c] = l, o();
        }, (l) => {
          if (!Tl(l)) {
            a(l);
            return;
          }
          l.batchRequestIdx === c ? a(l) : (A || (A = l), o());
        });
      });
    }
    var tn = ce("prisma:client");
    typeof globalThis == "object" && (globalThis.NODE_CLIENT = true);
    var R_ = { requestArgsToMiddlewareArgs: (t) => t, middlewareArgsToRequestArgs: (t) => t };
    var S_ = Symbol.for("prisma.client.transaction.id");
    var b_ = { id: 0, nextId() {
      return ++this.id;
    } };
    function Ib(t) {
      class e {
        _originalClient = this;
        _runtimeDataModel;
        _requestHandler;
        _connectionPromise;
        _disconnectionPromise;
        _engineConfig;
        _accelerateEngineConfig;
        _clientVersion;
        _errorFormat;
        _tracingHelper;
        _middlewares = new Fl();
        _previewFeatures;
        _activeProvider;
        _globalOmit;
        _extensions;
        _engine;
        _appliedParent;
        _createPrismaPromise = Zh();
        constructor(n) {
          t = n?.__internal?.configOverride?.(t) ?? t, lB(t), n && gb(n, t);
          let A = new Qb.EventEmitter().on("error", () => {
          });
          this._extensions = fA.empty(), this._previewFeatures = Nl(t), this._clientVersion = t.clientVersion ?? sb, this._activeProvider = t.activeProvider, this._globalOmit = n?.omit, this._tracingHelper = zS();
          let i = t.relativeEnvPaths && { rootEnvPath: t.relativeEnvPaths.rootEnvPath && Ml.default.resolve(t.dirname, t.relativeEnvPaths.rootEnvPath), schemaEnvPath: t.relativeEnvPaths.schemaEnvPath && Ml.default.resolve(t.dirname, t.relativeEnvPaths.schemaEnvPath) }, s;
          if (n?.adapter) {
            s = n.adapter;
            let a = t.activeProvider === "postgresql" || t.activeProvider === "cockroachdb" ? "postgres" : t.activeProvider;
            if (s.provider !== a) throw new Z(`The Driver Adapter \`${s.adapterName}\`, based on \`${s.provider}\`, is not compatible with the provider \`${a}\` specified in the Prisma schema.`, this._clientVersion);
            if (n.datasources || n.datasourceUrl !== void 0) throw new Z("Custom datasource configuration is not compatible with Prisma Driver Adapters. Please define the database connection string directly in the Driver Adapter configuration.", this._clientVersion);
          }
          let o = !s && i && Ni(i, { conflictCheck: "none" }) || t.injectableEdgeEnv?.();
          try {
            let a = n ?? {}, c = a.__internal ?? {}, l = c.debug === true;
            l && ce.enable("prisma:client");
            let u = Ml.default.resolve(t.dirname, t.relativePath);
            Cb.default.existsSync(u) || (u = t.dirname), tn("dirname", t.dirname), tn("relativePath", t.relativePath), tn("cwd", u);
            let g = c.engine || {};
            if (a.errorFormat ? this._errorFormat = a.errorFormat : process.env.NODE_ENV === "production" ? this._errorFormat = "minimal" : process.env.NO_COLOR ? this._errorFormat = "colorless" : this._errorFormat = "colorless", this._runtimeDataModel = t.runtimeDataModel, this._engineConfig = { cwd: u, dirname: t.dirname, enableDebugLogs: l, allowTriggerPanic: g.allowTriggerPanic, prismaPath: g.binaryPath ?? void 0, engineEndpoint: g.endpoint, generator: t.generator, showColors: this._errorFormat === "pretty", logLevel: a.log && tb(a.log), logQueries: a.log && !!(typeof a.log == "string" ? a.log === "query" : a.log.find((E) => typeof E == "string" ? E === "query" : E.level === "query")), env: o?.parsed ?? {}, flags: [], engineWasm: t.engineWasm, compilerWasm: t.compilerWasm, clientVersion: t.clientVersion, engineVersion: t.engineVersion, previewFeatures: this._previewFeatures, activeProvider: t.activeProvider, inlineSchema: t.inlineSchema, overrideDatasources: uB(a, t.datasourceNames), inlineDatasources: t.inlineDatasources, inlineSchemaHash: t.inlineSchemaHash, tracingHelper: this._tracingHelper, transactionOptions: { maxWait: a.transactionOptions?.maxWait ?? 2e3, timeout: a.transactionOptions?.timeout ?? 5e3, isolationLevel: a.transactionOptions?.isolationLevel }, logEmitter: A, isBundled: t.isBundled, adapter: s }, this._accelerateEngineConfig = { ...this._engineConfig, accelerateUtils: { resolveDatasourceUrl: ci, getBatchRequestPayload: IA, prismaGraphQLToJSError: Yr, PrismaClientUnknownRequestError: pe, PrismaClientInitializationError: Z, PrismaClientKnownRequestError: Ne, debug: ce("prisma:client:accelerateEngine"), engineVersion: hb.version, clientVersion: t.clientVersion } }, tn("clientVersion", t.clientVersion), this._engine = VS(t, this._engineConfig), this._requestHandler = new kl(this, A), a.log) for (let E of a.log) {
              let h = typeof E == "string" ? E : E.emit === "stdout" ? E.level : null;
              h && this.$on(h, (f) => {
                Di.log(`${Di.tags[h] ?? ""}`, f.message || f.query);
              });
            }
          } catch (a) {
            throw a.clientVersion = this._clientVersion, a;
          }
          return this._appliedParent = _i(this);
        }
        get [Symbol.toStringTag]() {
          return "PrismaClient";
        }
        $use(n) {
          this._middlewares.use(n);
        }
        $on(n, A) {
          return n === "beforeExit" ? this._engine.onBeforeExit(A) : n && this._engineConfig.logEmitter.on(n, A), this;
        }
        $connect() {
          try {
            return this._engine.start();
          } catch (n) {
            throw n.clientVersion = this._clientVersion, n;
          }
        }
        async $disconnect() {
          try {
            await this._engine.stop();
          } catch (n) {
            throw n.clientVersion = this._clientVersion, n;
          } finally {
            Ef();
          }
        }
        $executeRawInternal(n, A, i, s) {
          let o = this._activeProvider;
          return this._request({ action: "executeRaw", args: i, transaction: n, clientMethod: A, argsMapper: jh({ clientMethod: A, activeProvider: o }), callsite: Gr(this._errorFormat), dataPath: [], middlewareArgsMapper: s });
        }
        $executeRaw(n, ...A) {
          return this._createPrismaPromise((i) => {
            if (n.raw !== void 0 || n.sql !== void 0) {
              let [s, o] = db(n, A);
              return _h(this._activeProvider, s.text, s.values, Array.isArray(n) ? "prisma.$executeRaw`<SQL>`" : "prisma.$executeRaw(sql`<SQL>`)"), this.$executeRawInternal(i, "$executeRaw", s, o);
            }
            throw new Ue("`$executeRaw` is a tag function, please use it like the following:\n```\nconst result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`\n```\n\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#executeraw\n", { clientVersion: this._clientVersion });
          });
        }
        $executeRawUnsafe(n, ...A) {
          return this._createPrismaPromise((i) => (_h(this._activeProvider, n, A, "prisma.$executeRawUnsafe(<SQL>, [...values])"), this.$executeRawInternal(i, "$executeRawUnsafe", [n, ...A])));
        }
        $runCommandRaw(n) {
          if (t.activeProvider !== "mongodb") throw new Ue(`The ${t.activeProvider} provider does not support $runCommandRaw. Use the mongodb provider.`, { clientVersion: this._clientVersion });
          return this._createPrismaPromise((A) => this._request({ args: n, clientMethod: "$runCommandRaw", dataPath: [], action: "runCommandRaw", argsMapper: HS, callsite: Gr(this._errorFormat), transaction: A }));
        }
        async $queryRawInternal(n, A, i, s) {
          let o = this._activeProvider;
          return this._request({ action: "queryRaw", args: i, transaction: n, clientMethod: A, argsMapper: jh({ clientMethod: A, activeProvider: o }), callsite: Gr(this._errorFormat), dataPath: [], middlewareArgsMapper: s });
        }
        $queryRaw(n, ...A) {
          return this._createPrismaPromise((i) => {
            if (n.raw !== void 0 || n.sql !== void 0) return this.$queryRawInternal(i, "$queryRaw", ...db(n, A));
            throw new Ue("`$queryRaw` is a tag function, please use it like the following:\n```\nconst result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`\n```\n\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw\n", { clientVersion: this._clientVersion });
          });
        }
        $queryRawTyped(n) {
          return this._createPrismaPromise((A) => {
            if (!this._hasPreviewFlag("typedSql")) throw new Ue("`typedSql` preview feature must be enabled in order to access $queryRawTyped API", { clientVersion: this._clientVersion });
            return this.$queryRawInternal(A, "$queryRawTyped", n);
          });
        }
        $queryRawUnsafe(n, ...A) {
          return this._createPrismaPromise((i) => this.$queryRawInternal(i, "$queryRawUnsafe", [n, ...A]));
        }
        _transactionWithArray({ promises: n, options: A }) {
          let i = b_.nextId(), s = eb(n.length), o = n.map((a, c) => {
            if (a?.[Symbol.toStringTag] !== "PrismaPromise") throw new Error("All elements of the array need to be Prisma Client promises. Hint: Please make sure you are not awaiting the Prisma client calls you intended to pass in the $transaction function.");
            let l = A?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel, u = { kind: "batch", id: i, index: c, isolationLevel: l, lock: s };
            return a.requestTransaction?.(u) ?? a;
          });
          return Eb(o);
        }
        async _transactionWithCallback({ callback: n, options: A }) {
          let i = { traceparent: this._tracingHelper.getTraceParent() }, s = { maxWait: A?.maxWait ?? this._engineConfig.transactionOptions.maxWait, timeout: A?.timeout ?? this._engineConfig.transactionOptions.timeout, isolationLevel: A?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel }, o = await this._engine.transaction("start", i, s), a;
          try {
            let c = { kind: "itx", ...o };
            a = await n(this._createItxClient(c)), await this._engine.transaction("commit", i, o);
          } catch (c) {
            throw await this._engine.transaction("rollback", i, o).catch(() => {
            }), c;
          }
          return a;
        }
        _createItxClient(n) {
          return mt(_i(mt(ZI(this), [Oe("_appliedParent", () => this._appliedParent._createItxClient(n)), Oe("_createPrismaPromise", () => Zh(n)), Oe(S_, () => n.id)])), [CA(eB)]);
        }
        $transaction(n, A) {
          let i;
          typeof n == "function" ? this._engineConfig.adapter?.adapterName === "@prisma/adapter-d1" ? i = () => {
            throw new Error("Cloudflare D1 does not support interactive transactions. We recommend you to refactor your queries with that limitation in mind, and use batch transactions with `prisma.$transactions([])` where applicable.");
          } : i = () => this._transactionWithCallback({ callback: n, options: A }) : i = () => this._transactionWithArray({ promises: n, options: A });
          let s = { name: "transaction", attributes: { method: "$transaction" } };
          return this._tracingHelper.runInChildSpan(s, i);
        }
        _request(n) {
          n.otelParentCtx = this._tracingHelper.getActiveContext();
          let A = n.middlewareArgsMapper ?? R_, i = { args: A.requestArgsToMiddlewareArgs(n.args), dataPath: n.dataPath, runInTransaction: !!n.transaction, action: n.action, model: n.model }, s = { middleware: { name: "middleware", middleware: true, attributes: { method: "$use" }, active: false }, operation: { name: "operation", attributes: { method: i.action, model: i.model, name: i.model ? `${i.model}.${i.action}` : i.action } } }, o = -1, a = async (c) => {
            let l = this._middlewares.get(++o);
            if (l) return this._tracingHelper.runInChildSpan(s.middleware, (B) => l(c, (Q) => (B?.end(), a(Q))));
            let { runInTransaction: u, args: g, ...E } = c, h = { ...n, ...E };
            g && (h.args = A.middlewareArgsToRequestArgs(g)), n.transaction !== void 0 && u === false && delete h.transaction;
            let f = await AB(this, h);
            return h.model ? zI({ result: f, modelName: h.model, args: h.args, extensions: this._extensions, runtimeDataModel: this._runtimeDataModel, globalOmit: this._globalOmit }) : f;
          };
          return this._tracingHelper.runInChildSpan(s.operation, () => new fb.AsyncResource("prisma-client-request").runInAsyncScope(() => a(i)));
        }
        async _executeRequest({ args: n, clientMethod: A, dataPath: i, callsite: s, action: o, model: a, argsMapper: c, transaction: l, unpacker: u, otelParentCtx: g, customDataProxyFetch: E }) {
          try {
            n = c ? c(n) : n;
            let h = { name: "serialize" }, f = this._tracingHelper.runInChildSpan(h, () => fa({ modelName: a, runtimeDataModel: this._runtimeDataModel, action: o, args: n, clientMethod: A, callsite: s, extensions: this._extensions, errorFormat: this._errorFormat, clientVersion: this._clientVersion, previewFeatures: this._previewFeatures, globalOmit: this._globalOmit }));
            return ce.enabled("prisma:client") && (tn("Prisma Client call:"), tn(`prisma.${A}(${PI(n)})`), tn("Generated request:"), tn(JSON.stringify(f, null, 2) + `
`)), l?.kind === "batch" && await l.lock, this._requestHandler.request({ protocolQuery: f, modelName: a, action: o, clientMethod: A, dataPath: i, callsite: s, args: n, extensions: this._extensions, transaction: l, unpacker: u, otelParentCtx: g, otelChildCtx: this._tracingHelper.getActiveContext(), globalOmit: this._globalOmit, customDataProxyFetch: E });
          } catch (h) {
            throw h.clientVersion = this._clientVersion, h;
          }
        }
        $metrics = new QA(this);
        _hasPreviewFlag(n) {
          return !!this._engineConfig.previewFeatures?.includes(n);
        }
        $applyPendingMigrations() {
          return this._engine.applyPendingMigrations();
        }
        $extends = XI;
      }
      return e;
    }
    function db(t, e) {
      return N_(t) ? [new _e(t, e), XS] : [t, $S];
    }
    function N_(t) {
      return Array.isArray(t) && Array.isArray(t.raw);
    }
    var F_ = /* @__PURE__ */ new Set(["toJSON", "$$typeof", "asymmetricMatch", Symbol.iterator, Symbol.toStringTag, Symbol.isConcatSpreadable, Symbol.toPrimitive]);
    function Bb(t) {
      return new Proxy(t, { get(e, r) {
        if (r in e) return e[r];
        if (!F_.has(r)) throw new TypeError(`Invalid enum value: ${String(r)}`);
      } });
    }
    function pb(t) {
      Ni(t, { conflictCheck: "warn" });
    }
  }
});

// ../prisma/generated/prisma/index.js
var require_prisma = __commonJS({
  "../prisma/generated/prisma/index.js"(exports) {
    init_esm();
    Object.defineProperty(exports, "__esModule", { value: true });
    var {
      PrismaClientKnownRequestError: PrismaClientKnownRequestError2,
      PrismaClientUnknownRequestError: PrismaClientUnknownRequestError2,
      PrismaClientRustPanicError: PrismaClientRustPanicError2,
      PrismaClientInitializationError: PrismaClientInitializationError2,
      PrismaClientValidationError: PrismaClientValidationError2,
      getPrismaClient: getPrismaClient2,
      sqltag: sqltag2,
      empty: empty2,
      join: join2,
      raw: raw2,
      skip: skip2,
      Decimal: Decimal2,
      Debug: Debug2,
      objectEnumValues: objectEnumValues2,
      makeStrictEnum: makeStrictEnum2,
      Extensions: Extensions2,
      warnOnce: warnOnce2,
      defineDmmfProperty: defineDmmfProperty2,
      Public: Public2,
      getRuntime: getRuntime2,
      createParam: createParam2
    } = require_binary();
    var Prisma = {};
    exports.Prisma = Prisma;
    exports.$Enums = {};
    Prisma.prismaVersion = {
      client: "6.12.0",
      engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
    };
    Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError2;
    Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError2;
    Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError2;
    Prisma.PrismaClientInitializationError = PrismaClientInitializationError2;
    Prisma.PrismaClientValidationError = PrismaClientValidationError2;
    Prisma.Decimal = Decimal2;
    Prisma.sql = sqltag2;
    Prisma.empty = empty2;
    Prisma.join = join2;
    Prisma.raw = raw2;
    Prisma.validator = Public2.validator;
    Prisma.getExtensionContext = Extensions2.getExtensionContext;
    Prisma.defineExtension = Extensions2.defineExtension;
    Prisma.DbNull = objectEnumValues2.instances.DbNull;
    Prisma.JsonNull = objectEnumValues2.instances.JsonNull;
    Prisma.AnyNull = objectEnumValues2.instances.AnyNull;
    Prisma.NullTypes = {
      DbNull: objectEnumValues2.classes.DbNull,
      JsonNull: objectEnumValues2.classes.JsonNull,
      AnyNull: objectEnumValues2.classes.AnyNull
    };
    var path = __require("path");
    exports.Prisma.TransactionIsolationLevel = makeStrictEnum2({
      ReadUncommitted: "ReadUncommitted",
      ReadCommitted: "ReadCommitted",
      RepeatableRead: "RepeatableRead",
      Serializable: "Serializable"
    });
    exports.Prisma.UserScalarFieldEnum = {
      id: "id",
      slug: "slug",
      name: "name",
      email: "email",
      emailVerified: "emailVerified",
      image: "image",
      createdAt: "createdAt",
      updatedAt: "updatedAt"
    };
    exports.Prisma.SessionScalarFieldEnum = {
      id: "id",
      expiresAt: "expiresAt",
      token: "token",
      createdAt: "createdAt",
      updatedAt: "updatedAt",
      ipAddress: "ipAddress",
      userAgent: "userAgent",
      userId: "userId"
    };
    exports.Prisma.AccountScalarFieldEnum = {
      id: "id",
      accountId: "accountId",
      providerId: "providerId",
      userId: "userId",
      accessToken: "accessToken",
      refreshToken: "refreshToken",
      idToken: "idToken",
      accessTokenExpiresAt: "accessTokenExpiresAt",
      refreshTokenExpiresAt: "refreshTokenExpiresAt",
      scope: "scope",
      password: "password",
      createdAt: "createdAt",
      updatedAt: "updatedAt"
    };
    exports.Prisma.VerificationScalarFieldEnum = {
      id: "id",
      identifier: "identifier",
      value: "value",
      expiresAt: "expiresAt",
      createdAt: "createdAt",
      updatedAt: "updatedAt"
    };
    exports.Prisma.PlaylistJobScalarFieldEnum = {
      id: "id",
      userId: "userId",
      prompt: "prompt",
      status: "status",
      createdAt: "createdAt",
      completedAt: "completedAt",
      resultPlaylistId: "resultPlaylistId"
    };
    exports.Prisma.PlaylistJobResultScalarFieldEnum = {
      id: "id",
      jobId: "jobId",
      playlistId: "playlistId",
      name: "name",
      description: "description",
      totalTracks: "totalTracks"
    };
    exports.Prisma.PlaylistJobInputScalarFieldEnum = {
      id: "id",
      jobId: "jobId",
      playlistId: "playlistId",
      name: "name",
      image: "image",
      type: "type",
      totalTracks: "totalTracks"
    };
    exports.Prisma.SortOrder = {
      asc: "asc",
      desc: "desc"
    };
    exports.Prisma.QueryMode = {
      default: "default",
      insensitive: "insensitive"
    };
    exports.Prisma.NullsOrder = {
      first: "first",
      last: "last"
    };
    exports.PlaylistType = exports.$Enums.PlaylistType = {
      PLAYLIST: "PLAYLIST",
      LIKED: "LIKED"
    };
    exports.PlaylistJobStatus = exports.$Enums.PlaylistJobStatus = {
      DRAFT: "DRAFT",
      PENDING: "PENDING",
      PROCESSING: "PROCESSING",
      COMPLETED: "COMPLETED",
      FAILED: "FAILED"
    };
    exports.Prisma.ModelName = {
      User: "User",
      Session: "Session",
      Account: "Account",
      Verification: "Verification",
      PlaylistJob: "PlaylistJob",
      PlaylistJobResult: "PlaylistJobResult",
      PlaylistJobInput: "PlaylistJobInput"
    };
    var config = {
      "generator": {
        "name": "client",
        "provider": {
          "fromEnvVar": null,
          "value": "prisma-client-js"
        },
        "output": {
          "value": "/home/lippe/desktop/projetos/Track-Tidy/packages/prisma/generated/prisma",
          "fromEnvVar": null
        },
        "config": {
          "engineType": "binary"
        },
        "binaryTargets": [
          {
            "fromEnvVar": null,
            "value": "debian-openssl-3.0.x",
            "native": true
          }
        ],
        "previewFeatures": [],
        "sourceFilePath": "/home/lippe/desktop/projetos/Track-Tidy/packages/prisma/prisma/schema.prisma",
        "isCustomOutput": true
      },
      "relativeEnvPaths": {
        "rootEnvPath": null
      },
      "relativePath": "../../prisma",
      "clientVersion": "6.12.0",
      "engineVersion": "8047c96bbd92db98a2abc7c9323ce77c02c89dbc",
      "datasourceNames": [
        "db"
      ],
      "activeProvider": "postgresql",
      "inlineDatasources": {
        "db": {
          "url": {
            "fromEnvVar": "DATABASE_URL",
            "value": null
          }
        }
      },
      "inlineSchema": 'generator client {\n  provider = "prisma-client-js"\n  output   = "../generated/prisma"\n\n  engineType = "binary"\n}\n\ndatasource db {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}\n\nenum PlaylistType {\n  PLAYLIST\n  LIKED\n}\n\nenum PlaylistJobStatus {\n  DRAFT\n  PENDING\n  PROCESSING\n  COMPLETED\n  FAILED\n}\n\nmodel User {\n  id            String        @id @default(uuid())\n  slug          String        @unique\n  name          String\n  email         String\n  emailVerified Boolean\n  image         String?\n  createdAt     DateTime\n  updatedAt     DateTime\n  sessions      Session[]\n  accounts      Account[]\n  playlistJob   PlaylistJob[]\n\n  @@unique([email])\n  @@map("user")\n}\n\nmodel Session {\n  id        String   @id\n  expiresAt DateTime\n  token     String\n  createdAt DateTime\n  updatedAt DateTime\n  ipAddress String?\n  userAgent String?\n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([token])\n  @@map("session")\n}\n\nmodel Account {\n  id                    String    @id\n  accountId             String\n  providerId            String\n  userId                String\n  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  accessToken           String?\n  refreshToken          String?\n  idToken               String?\n  accessTokenExpiresAt  DateTime?\n  refreshTokenExpiresAt DateTime?\n  scope                 String?\n  password              String?\n  createdAt             DateTime\n  updatedAt             DateTime\n\n  @@map("account")\n}\n\nmodel Verification {\n  id         String    @id\n  identifier String\n  value      String\n  expiresAt  DateTime\n  createdAt  DateTime?\n  updatedAt  DateTime?\n\n  @@map("verification")\n}\n\nmodel PlaylistJob {\n  id          String            @id @default(cuid())\n  userId      String\n  prompt      String?\n  status      PlaylistJobStatus @default(DRAFT)\n  createdAt   DateTime          @default(now())\n  completedAt DateTime?\n\n  inputs PlaylistJobInput[]\n  user   User               @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  resultPlaylistId   String?\n  playlistJobResults PlaylistJobResult[]\n\n  @@index([userId, status])\n  @@map("playlist_job")\n}\n\nmodel PlaylistJobResult {\n  id          String      @id @default(cuid())\n  jobId       String\n  playlistId  String\n  name        String\n  description String?\n  totalTracks Int?\n  job         PlaylistJob @relation(fields: [jobId], references: [id])\n\n  @@index([playlistId, name, jobId])\n  @@map("playlist_job_result")\n}\n\nmodel PlaylistJobInput {\n  id          String       @id @default(cuid())\n  jobId       String\n  playlistId  String\n  name        String\n  image       String?\n  type        PlaylistType @default(PLAYLIST)\n  totalTracks Int?\n  job         PlaylistJob  @relation(fields: [jobId], references: [id])\n\n  @@index([playlistId, name, jobId])\n  @@map("playlist_job_input")\n}\n',
      "inlineSchemaHash": "f30a0a36cda658dce3c0dcfbc7788019134724b1b4a78a70bf0e537d264f6585",
      "copyEngine": true
    };
    var fs = __require("fs");
    config.dirname = __dirname;
    if (!fs.existsSync(path.join(__dirname, "schema.prisma"))) {
      const alternativePaths = [
        "generated/prisma",
        "prisma"
      ];
      const alternativePath = alternativePaths.find((altPath) => {
        return fs.existsSync(path.join(process.cwd(), altPath, "schema.prisma"));
      }) ?? alternativePaths[0];
      config.dirname = path.join(process.cwd(), alternativePath);
      config.isBundled = true;
    }
    config.runtimeDataModel = JSON.parse('{"models":{"User":{"dbName":"user","schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"slug","kind":"scalar","isList":false,"isRequired":true,"isUnique":true,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"name","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"email","kind":"scalar","isList":false,"isRequired":true,"isUnique":true,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"emailVerified","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Boolean","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"image","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"updatedAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"sessions","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Session","nativeType":null,"relationName":"SessionToUser","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"accounts","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Account","nativeType":null,"relationName":"AccountToUser","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"playlistJob","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"PlaylistJob","nativeType":null,"relationName":"PlaylistJobToUser","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[["email"]],"uniqueIndexes":[{"name":null,"fields":["email"]}],"isGenerated":false},"Session":{"dbName":"session","schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"expiresAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"token","kind":"scalar","isList":false,"isRequired":true,"isUnique":true,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"updatedAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"ipAddress","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"userAgent","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"userId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"user","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"User","nativeType":null,"relationName":"SessionToUser","relationFromFields":["userId"],"relationToFields":["id"],"relationOnDelete":"Cascade","isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[["token"]],"uniqueIndexes":[{"name":null,"fields":["token"]}],"isGenerated":false},"Account":{"dbName":"account","schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"accountId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"providerId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"userId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"user","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"User","nativeType":null,"relationName":"AccountToUser","relationFromFields":["userId"],"relationToFields":["id"],"relationOnDelete":"Cascade","isGenerated":false,"isUpdatedAt":false},{"name":"accessToken","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"refreshToken","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"idToken","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"accessTokenExpiresAt","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"refreshTokenExpiresAt","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"scope","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"password","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"updatedAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false},"Verification":{"dbName":"verification","schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"identifier","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"value","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"expiresAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"updatedAt","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false},"PlaylistJob":{"dbName":"playlist_job","schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"cuid","args":[1]},"isGenerated":false,"isUpdatedAt":false},{"name":"userId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"prompt","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"status","kind":"enum","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"PlaylistJobStatus","nativeType":null,"default":"DRAFT","isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":null,"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"completedAt","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"inputs","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"PlaylistJobInput","nativeType":null,"relationName":"PlaylistJobToPlaylistJobInput","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"user","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"User","nativeType":null,"relationName":"PlaylistJobToUser","relationFromFields":["userId"],"relationToFields":["id"],"relationOnDelete":"Cascade","isGenerated":false,"isUpdatedAt":false},{"name":"resultPlaylistId","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"playlistJobResults","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"PlaylistJobResult","nativeType":null,"relationName":"PlaylistJobToPlaylistJobResult","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false},"PlaylistJobResult":{"dbName":"playlist_job_result","schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"cuid","args":[1]},"isGenerated":false,"isUpdatedAt":false},{"name":"jobId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"playlistId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"name","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"description","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"totalTracks","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Int","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"job","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"PlaylistJob","nativeType":null,"relationName":"PlaylistJobToPlaylistJobResult","relationFromFields":["jobId"],"relationToFields":["id"],"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false},"PlaylistJobInput":{"dbName":"playlist_job_input","schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"cuid","args":[1]},"isGenerated":false,"isUpdatedAt":false},{"name":"jobId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"playlistId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"name","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"image","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"type","kind":"enum","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"PlaylistType","nativeType":null,"default":"PLAYLIST","isGenerated":false,"isUpdatedAt":false},{"name":"totalTracks","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Int","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"job","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"PlaylistJob","nativeType":null,"relationName":"PlaylistJobToPlaylistJobInput","relationFromFields":["jobId"],"relationToFields":["id"],"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false}},"enums":{"PlaylistType":{"values":[{"name":"PLAYLIST","dbName":null},{"name":"LIKED","dbName":null}],"dbName":null},"PlaylistJobStatus":{"values":[{"name":"DRAFT","dbName":null},{"name":"PENDING","dbName":null},{"name":"PROCESSING","dbName":null},{"name":"COMPLETED","dbName":null},{"name":"FAILED","dbName":null}],"dbName":null}},"types":{}}');
    defineDmmfProperty2(exports.Prisma, config.runtimeDataModel);
    config.engineWasm = void 0;
    config.compilerWasm = void 0;
    var { warnEnvConflicts: warnEnvConflicts2 } = require_binary();
    warnEnvConflicts2({
      rootEnvPath: config.relativeEnvPaths.rootEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.rootEnvPath),
      schemaEnvPath: config.relativeEnvPaths.schemaEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.schemaEnvPath)
    });
    var PrismaClient3 = getPrismaClient2(config);
    exports.PrismaClient = PrismaClient3;
    Object.assign(exports, Prisma);
    path.join(__dirname, "query-engine-debian-openssl-3.0.x");
    path.join(process.cwd(), "generated/prisma/query-engine-debian-openssl-3.0.x");
    path.join(__dirname, "schema.prisma");
    path.join(process.cwd(), "generated/prisma/schema.prisma");
  }
});

// ../prisma/generated/prisma/client.js
var require_client = __commonJS({
  "../prisma/generated/prisma/client.js"(exports, module) {
    init_esm();
    module.exports = { ...require_prisma() };
  }
});

// ../../node_modules/.pnpm/secure-json-parse@2.7.0/node_modules/secure-json-parse/index.js
var require_secure_json_parse = __commonJS({
  "../../node_modules/.pnpm/secure-json-parse@2.7.0/node_modules/secure-json-parse/index.js"(exports, module) {
    "use strict";
    init_esm();
    var hasBuffer = typeof Buffer !== "undefined";
    var suspectProtoRx = /"(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])"\s*:/;
    var suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
    function _parse(text2, reviver, options) {
      if (options == null) {
        if (reviver !== null && typeof reviver === "object") {
          options = reviver;
          reviver = void 0;
        }
      }
      if (hasBuffer && Buffer.isBuffer(text2)) {
        text2 = text2.toString();
      }
      if (text2 && text2.charCodeAt(0) === 65279) {
        text2 = text2.slice(1);
      }
      const obj = JSON.parse(text2, reviver);
      if (obj === null || typeof obj !== "object") {
        return obj;
      }
      const protoAction = options && options.protoAction || "error";
      const constructorAction = options && options.constructorAction || "error";
      if (protoAction === "ignore" && constructorAction === "ignore") {
        return obj;
      }
      if (protoAction !== "ignore" && constructorAction !== "ignore") {
        if (suspectProtoRx.test(text2) === false && suspectConstructorRx.test(text2) === false) {
          return obj;
        }
      } else if (protoAction !== "ignore" && constructorAction === "ignore") {
        if (suspectProtoRx.test(text2) === false) {
          return obj;
        }
      } else {
        if (suspectConstructorRx.test(text2) === false) {
          return obj;
        }
      }
      return filter(obj, { protoAction, constructorAction, safe: options && options.safe });
    }
    function filter(obj, { protoAction = "error", constructorAction = "error", safe } = {}) {
      let next = [obj];
      while (next.length) {
        const nodes = next;
        next = [];
        for (const node of nodes) {
          if (protoAction !== "ignore" && Object.prototype.hasOwnProperty.call(node, "__proto__")) {
            if (safe === true) {
              return null;
            } else if (protoAction === "error") {
              throw new SyntaxError("Object contains forbidden prototype property");
            }
            delete node.__proto__;
          }
          if (constructorAction !== "ignore" && Object.prototype.hasOwnProperty.call(node, "constructor") && Object.prototype.hasOwnProperty.call(node.constructor, "prototype")) {
            if (safe === true) {
              return null;
            } else if (constructorAction === "error") {
              throw new SyntaxError("Object contains forbidden prototype property");
            }
            delete node.constructor;
          }
          for (const key in node) {
            const value = node[key];
            if (value && typeof value === "object") {
              next.push(value);
            }
          }
        }
      }
      return obj;
    }
    function parse(text2, reviver, options) {
      const stackTraceLimit = Error.stackTraceLimit;
      Error.stackTraceLimit = 0;
      try {
        return _parse(text2, reviver, options);
      } finally {
        Error.stackTraceLimit = stackTraceLimit;
      }
    }
    function safeParse(text2, reviver) {
      const stackTraceLimit = Error.stackTraceLimit;
      Error.stackTraceLimit = 0;
      try {
        return _parse(text2, reviver, { safe: true });
      } catch (_e) {
        return null;
      } finally {
        Error.stackTraceLimit = stackTraceLimit;
      }
    }
    module.exports = parse;
    module.exports.default = parse;
    module.exports.parse = parse;
    module.exports.safeParse = safeParse;
    module.exports.scan = filter;
  }
});

// src/trigger/playlist-organize.ts
init_esm();

// ../prisma/index.ts
var prisma_exports = {};
__export(prisma_exports, {
  prisma: () => prisma
});
init_esm();

// ../prisma/client.ts
init_esm();
var import_prisma = __toESM(require_prisma(), 1);
var globalForPrisma = global;
var prisma = globalForPrisma.prisma || new import_prisma.PrismaClient();
if (process.env.NODE_ENV !== "production") globalForPrisma.prisma = prisma;

// ../prisma/index.ts
__reExport(prisma_exports, __toESM(require_client(), 1));

// ../../node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/index.mjs
init_esm();
var util;
(function(util2) {
  util2.assertEqual = (val) => val;
  function assertIs(_arg) {
  }
  util2.assertIs = assertIs;
  function assertNever(_x) {
    throw new Error();
  }
  util2.assertNever = assertNever;
  util2.arrayToEnum = (items) => {
    const obj = {};
    for (const item of items) {
      obj[item] = item;
    }
    return obj;
  };
  util2.getValidEnumValues = (obj) => {
    const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
    const filtered = {};
    for (const k of validKeys) {
      filtered[k] = obj[k];
    }
    return util2.objectValues(filtered);
  };
  util2.objectValues = (obj) => {
    return util2.objectKeys(obj).map(function(e) {
      return obj[e];
    });
  };
  util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object2) => {
    const keys = [];
    for (const key in object2) {
      if (Object.prototype.hasOwnProperty.call(object2, key)) {
        keys.push(key);
      }
    }
    return keys;
  };
  util2.find = (arr, checker) => {
    for (const item of arr) {
      if (checker(item))
        return item;
    }
    return void 0;
  };
  util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
  function joinValues(array, separator = " | ") {
    return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
  }
  util2.joinValues = joinValues;
  util2.jsonStringifyReplacer = (_, value) => {
    if (typeof value === "bigint") {
      return value.toString();
    }
    return value;
  };
})(util || (util = {}));
var objectUtil;
(function(objectUtil2) {
  objectUtil2.mergeShapes = (first, second) => {
    return {
      ...first,
      ...second
      // second overwrites first
    };
  };
})(objectUtil || (objectUtil = {}));
var ZodParsedType = util.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
var getParsedType = (data) => {
  const t = typeof data;
  switch (t) {
    case "undefined":
      return ZodParsedType.undefined;
    case "string":
      return ZodParsedType.string;
    case "number":
      return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
    case "boolean":
      return ZodParsedType.boolean;
    case "function":
      return ZodParsedType.function;
    case "bigint":
      return ZodParsedType.bigint;
    case "symbol":
      return ZodParsedType.symbol;
    case "object":
      if (Array.isArray(data)) {
        return ZodParsedType.array;
      }
      if (data === null) {
        return ZodParsedType.null;
      }
      if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
        return ZodParsedType.promise;
      }
      if (typeof Map !== "undefined" && data instanceof Map) {
        return ZodParsedType.map;
      }
      if (typeof Set !== "undefined" && data instanceof Set) {
        return ZodParsedType.set;
      }
      if (typeof Date !== "undefined" && data instanceof Date) {
        return ZodParsedType.date;
      }
      return ZodParsedType.object;
    default:
      return ZodParsedType.unknown;
  }
};
var ZodIssueCode = util.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
var quotelessJson = (obj) => {
  const json = JSON.stringify(obj, null, 2);
  return json.replace(/"([^"]+)":/g, "$1:");
};
var ZodError = class _ZodError extends Error {
  get errors() {
    return this.issues;
  }
  constructor(issues) {
    super();
    this.issues = [];
    this.addIssue = (sub) => {
      this.issues = [...this.issues, sub];
    };
    this.addIssues = (subs = []) => {
      this.issues = [...this.issues, ...subs];
    };
    const actualProto = new.target.prototype;
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(this, actualProto);
    } else {
      this.__proto__ = actualProto;
    }
    this.name = "ZodError";
    this.issues = issues;
  }
  format(_mapper) {
    const mapper = _mapper || function(issue) {
      return issue.message;
    };
    const fieldErrors = { _errors: [] };
    const processError = (error) => {
      for (const issue of error.issues) {
        if (issue.code === "invalid_union") {
          issue.unionErrors.map(processError);
        } else if (issue.code === "invalid_return_type") {
          processError(issue.returnTypeError);
        } else if (issue.code === "invalid_arguments") {
          processError(issue.argumentsError);
        } else if (issue.path.length === 0) {
          fieldErrors._errors.push(mapper(issue));
        } else {
          let curr = fieldErrors;
          let i = 0;
          while (i < issue.path.length) {
            const el = issue.path[i];
            const terminal = i === issue.path.length - 1;
            if (!terminal) {
              curr[el] = curr[el] || { _errors: [] };
            } else {
              curr[el] = curr[el] || { _errors: [] };
              curr[el]._errors.push(mapper(issue));
            }
            curr = curr[el];
            i++;
          }
        }
      }
    };
    processError(this);
    return fieldErrors;
  }
  static assert(value) {
    if (!(value instanceof _ZodError)) {
      throw new Error(`Not a ZodError: ${value}`);
    }
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(mapper = (issue) => issue.message) {
    const fieldErrors = {};
    const formErrors = [];
    for (const sub of this.issues) {
      if (sub.path.length > 0) {
        fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
        fieldErrors[sub.path[0]].push(mapper(sub));
      } else {
        formErrors.push(mapper(sub));
      }
    }
    return { formErrors, fieldErrors };
  }
  get formErrors() {
    return this.flatten();
  }
};
ZodError.create = (issues) => {
  const error = new ZodError(issues);
  return error;
};
var errorMap = (issue, _ctx) => {
  let message;
  switch (issue.code) {
    case ZodIssueCode.invalid_type:
      if (issue.received === ZodParsedType.undefined) {
        message = "Required";
      } else {
        message = `Expected ${issue.expected}, received ${issue.received}`;
      }
      break;
    case ZodIssueCode.invalid_literal:
      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
      break;
    case ZodIssueCode.unrecognized_keys:
      message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
      break;
    case ZodIssueCode.invalid_union:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_union_discriminator:
      message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
      break;
    case ZodIssueCode.invalid_enum_value:
      message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
      break;
    case ZodIssueCode.invalid_arguments:
      message = `Invalid function arguments`;
      break;
    case ZodIssueCode.invalid_return_type:
      message = `Invalid function return type`;
      break;
    case ZodIssueCode.invalid_date:
      message = `Invalid date`;
      break;
    case ZodIssueCode.invalid_string:
      if (typeof issue.validation === "object") {
        if ("includes" in issue.validation) {
          message = `Invalid input: must include "${issue.validation.includes}"`;
          if (typeof issue.validation.position === "number") {
            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
          }
        } else if ("startsWith" in issue.validation) {
          message = `Invalid input: must start with "${issue.validation.startsWith}"`;
        } else if ("endsWith" in issue.validation) {
          message = `Invalid input: must end with "${issue.validation.endsWith}"`;
        } else {
          util.assertNever(issue.validation);
        }
      } else if (issue.validation !== "regex") {
        message = `Invalid ${issue.validation}`;
      } else {
        message = "Invalid";
      }
      break;
    case ZodIssueCode.too_small:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.too_big:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "bigint")
        message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.custom:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_intersection_types:
      message = `Intersection results could not be merged`;
      break;
    case ZodIssueCode.not_multiple_of:
      message = `Number must be a multiple of ${issue.multipleOf}`;
      break;
    case ZodIssueCode.not_finite:
      message = "Number must be finite";
      break;
    default:
      message = _ctx.defaultError;
      util.assertNever(issue);
  }
  return { message };
};
var overrideErrorMap = errorMap;
function setErrorMap(map) {
  overrideErrorMap = map;
}
function getErrorMap() {
  return overrideErrorMap;
}
var makeIssue = (params) => {
  const { data, path, errorMaps, issueData } = params;
  const fullPath = [...path, ...issueData.path || []];
  const fullIssue = {
    ...issueData,
    path: fullPath
  };
  if (issueData.message !== void 0) {
    return {
      ...issueData,
      path: fullPath,
      message: issueData.message
    };
  }
  let errorMessage = "";
  const maps = errorMaps.filter((m) => !!m).slice().reverse();
  for (const map of maps) {
    errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
  }
  return {
    ...issueData,
    path: fullPath,
    message: errorMessage
  };
};
var EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
  const overrideMap = getErrorMap();
  const issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      // contextual error map is first priority
      ctx.schemaErrorMap,
      // then schema-bound map if available
      overrideMap,
      // then global override map
      overrideMap === errorMap ? void 0 : errorMap
      // then global default map
    ].filter((x) => !!x)
  });
  ctx.common.issues.push(issue);
}
var ParseStatus = class _ParseStatus {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    if (this.value === "valid")
      this.value = "dirty";
  }
  abort() {
    if (this.value !== "aborted")
      this.value = "aborted";
  }
  static mergeArray(status, results) {
    const arrayValue = [];
    for (const s of results) {
      if (s.status === "aborted")
        return INVALID;
      if (s.status === "dirty")
        status.dirty();
      arrayValue.push(s.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    const syncPairs = [];
    for (const pair of pairs) {
      const key = await pair.key;
      const value = await pair.value;
      syncPairs.push({
        key,
        value
      });
    }
    return _ParseStatus.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    const finalObject = {};
    for (const pair of pairs) {
      const { key, value } = pair;
      if (key.status === "aborted")
        return INVALID;
      if (value.status === "aborted")
        return INVALID;
      if (key.status === "dirty")
        status.dirty();
      if (value.status === "dirty")
        status.dirty();
      if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
        finalObject[key.value] = value.value;
      }
    }
    return { status: status.value, value: finalObject };
  }
};
var INVALID = Object.freeze({
  status: "aborted"
});
var DIRTY = (value) => ({ status: "dirty", value });
var OK = (value) => ({ status: "valid", value });
var isAborted = (x) => x.status === "aborted";
var isDirty = (x) => x.status === "dirty";
var isValid = (x) => x.status === "valid";
var isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
var errorUtil;
(function(errorUtil2) {
  errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
  errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));
var _ZodEnum_cache;
var _ZodNativeEnum_cache;
var ParseInputLazyPath = class {
  constructor(parent, value, path, key) {
    this._cachedPath = [];
    this.parent = parent;
    this.data = value;
    this._path = path;
    this._key = key;
  }
  get path() {
    if (!this._cachedPath.length) {
      if (this._key instanceof Array) {
        this._cachedPath.push(...this._path, ...this._key);
      } else {
        this._cachedPath.push(...this._path, this._key);
      }
    }
    return this._cachedPath;
  }
};
var handleResult = (ctx, result) => {
  if (isValid(result)) {
    return { success: true, data: result.value };
  } else {
    if (!ctx.common.issues.length) {
      throw new Error("Validation failed but no issues detected.");
    }
    return {
      success: false,
      get error() {
        if (this._error)
          return this._error;
        const error = new ZodError(ctx.common.issues);
        this._error = error;
        return this._error;
      }
    };
  }
};
function processCreateParams(params) {
  if (!params)
    return {};
  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
  if (errorMap2 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap2)
    return { errorMap: errorMap2, description };
  const customMap = (iss, ctx) => {
    var _a17, _b;
    const { message } = params;
    if (iss.code === "invalid_enum_value") {
      return { message: message !== null && message !== void 0 ? message : ctx.defaultError };
    }
    if (typeof ctx.data === "undefined") {
      return { message: (_a17 = message !== null && message !== void 0 ? message : required_error) !== null && _a17 !== void 0 ? _a17 : ctx.defaultError };
    }
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };
  };
  return { errorMap: customMap, description };
}
var ZodType = class {
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return ctx || {
      common: input.parent.common,
      data: input.data,
      parsedType: getParsedType(input.data),
      schemaErrorMap: this._def.errorMap,
      path: input.path,
      parent: input.parent
    };
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus(),
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      }
    };
  }
  _parseSync(input) {
    const result = this._parse(input);
    if (isAsync(result)) {
      throw new Error("Synchronous parse encountered promise.");
    }
    return result;
  }
  _parseAsync(input) {
    const result = this._parse(input);
    return Promise.resolve(result);
  }
  parse(data, params) {
    const result = this.safeParse(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  safeParse(data, params) {
    var _a17;
    const ctx = {
      common: {
        issues: [],
        async: (_a17 = params === null || params === void 0 ? void 0 : params.async) !== null && _a17 !== void 0 ? _a17 : false,
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const result = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult(ctx, result);
  }
  "~validate"(data) {
    var _a17, _b;
    const ctx = {
      common: {
        issues: [],
        async: !!this["~standard"].async
      },
      path: [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    if (!this["~standard"].async) {
      try {
        const result = this._parseSync({ data, path: [], parent: ctx });
        return isValid(result) ? {
          value: result.value
        } : {
          issues: ctx.common.issues
        };
      } catch (err) {
        if ((_b = (_a17 = err === null || err === void 0 ? void 0 : err.message) === null || _a17 === void 0 ? void 0 : _a17.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes("encountered")) {
          this["~standard"].async = true;
        }
        ctx.common = {
          issues: [],
          async: true
        };
      }
    }
    return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result) ? {
      value: result.value
    } : {
      issues: ctx.common.issues
    });
  }
  async parseAsync(data, params) {
    const result = await this.safeParseAsync(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  async safeParseAsync(data, params) {
    const ctx = {
      common: {
        issues: [],
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
        async: true
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult(ctx, result);
  }
  refine(check, message) {
    const getIssueProperties = (val) => {
      if (typeof message === "string" || typeof message === "undefined") {
        return { message };
      } else if (typeof message === "function") {
        return message(val);
      } else {
        return message;
      }
    };
    return this._refinement((val, ctx) => {
      const result = check(val);
      const setError = () => ctx.addIssue({
        code: ZodIssueCode.custom,
        ...getIssueProperties(val)
      });
      if (typeof Promise !== "undefined" && result instanceof Promise) {
        return result.then((data) => {
          if (!data) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      if (!result) {
        setError();
        return false;
      } else {
        return true;
      }
    });
  }
  refinement(check, refinementData) {
    return this._refinement((val, ctx) => {
      if (!check(val)) {
        ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
        return false;
      } else {
        return true;
      }
    });
  }
  _refinement(refinement) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "refinement", refinement }
    });
  }
  superRefine(refinement) {
    return this._refinement(refinement);
  }
  constructor(def) {
    this.spa = this.safeParseAsync;
    this._def = def;
    this.parse = this.parse.bind(this);
    this.safeParse = this.safeParse.bind(this);
    this.parseAsync = this.parseAsync.bind(this);
    this.safeParseAsync = this.safeParseAsync.bind(this);
    this.spa = this.spa.bind(this);
    this.refine = this.refine.bind(this);
    this.refinement = this.refinement.bind(this);
    this.superRefine = this.superRefine.bind(this);
    this.optional = this.optional.bind(this);
    this.nullable = this.nullable.bind(this);
    this.nullish = this.nullish.bind(this);
    this.array = this.array.bind(this);
    this.promise = this.promise.bind(this);
    this.or = this.or.bind(this);
    this.and = this.and.bind(this);
    this.transform = this.transform.bind(this);
    this.brand = this.brand.bind(this);
    this.default = this.default.bind(this);
    this.catch = this.catch.bind(this);
    this.describe = this.describe.bind(this);
    this.pipe = this.pipe.bind(this);
    this.readonly = this.readonly.bind(this);
    this.isNullable = this.isNullable.bind(this);
    this.isOptional = this.isOptional.bind(this);
    this["~standard"] = {
      version: 1,
      vendor: "zod",
      validate: (data) => this["~validate"](data)
    };
  }
  optional() {
    return ZodOptional.create(this, this._def);
  }
  nullable() {
    return ZodNullable.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return ZodArray.create(this);
  }
  promise() {
    return ZodPromise.create(this, this._def);
  }
  or(option) {
    return ZodUnion.create([this, option], this._def);
  }
  and(incoming) {
    return ZodIntersection.create(this, incoming, this._def);
  }
  transform(transform) {
    return new ZodEffects({
      ...processCreateParams(this._def),
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "transform", transform }
    });
  }
  default(def) {
    const defaultValueFunc = typeof def === "function" ? def : () => def;
    return new ZodDefault({
      ...processCreateParams(this._def),
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodDefault
    });
  }
  brand() {
    return new ZodBranded({
      typeName: ZodFirstPartyTypeKind.ZodBranded,
      type: this,
      ...processCreateParams(this._def)
    });
  }
  catch(def) {
    const catchValueFunc = typeof def === "function" ? def : () => def;
    return new ZodCatch({
      ...processCreateParams(this._def),
      innerType: this,
      catchValue: catchValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodCatch
    });
  }
  describe(description) {
    const This = this.constructor;
    return new This({
      ...this._def,
      description
    });
  }
  pipe(target) {
    return ZodPipeline.create(this, target);
  }
  readonly() {
    return ZodReadonly.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
};
var cuidRegex = /^c[^\s-]{8,}$/i;
var cuid2Regex = /^[0-9a-z]+$/;
var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
var nanoidRegex = /^[a-z0-9_-]{21}$/i;
var jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
var durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
var emojiRegex;
var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
var ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
var ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
var ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
var base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
var base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
var dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
var dateRegex = new RegExp(`^${dateRegexSource}$`);
function timeRegexSource(args) {
  let regex = `([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d`;
  if (args.precision) {
    regex = `${regex}\\.\\d{${args.precision}}`;
  } else if (args.precision == null) {
    regex = `${regex}(\\.\\d+)?`;
  }
  return regex;
}
function timeRegex(args) {
  return new RegExp(`^${timeRegexSource(args)}$`);
}
function datetimeRegex(args) {
  let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
  const opts = [];
  opts.push(args.local ? `Z?` : `Z`);
  if (args.offset)
    opts.push(`([+-]\\d{2}:?\\d{2})`);
  regex = `${regex}(${opts.join("|")})`;
  return new RegExp(`^${regex}$`);
}
function isValidIP(ip, version) {
  if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
    return true;
  }
  if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
    return true;
  }
  return false;
}
function isValidJWT(jwt, alg) {
  if (!jwtRegex.test(jwt))
    return false;
  try {
    const [header] = jwt.split(".");
    const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
    const decoded = JSON.parse(atob(base64));
    if (typeof decoded !== "object" || decoded === null)
      return false;
    if (!decoded.typ || !decoded.alg)
      return false;
    if (alg && decoded.alg !== alg)
      return false;
    return true;
  } catch (_a17) {
    return false;
  }
}
function isValidCidr(ip, version) {
  if ((version === "v4" || !version) && ipv4CidrRegex.test(ip)) {
    return true;
  }
  if ((version === "v6" || !version) && ipv6CidrRegex.test(ip)) {
    return true;
  }
  return false;
}
var ZodString = class _ZodString extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = String(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.string) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.string,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.length < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.length > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "length") {
        const tooBig = input.data.length > check.value;
        const tooSmall = input.data.length < check.value;
        if (tooBig || tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          if (tooBig) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          } else if (tooSmall) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          }
          status.dirty();
        }
      } else if (check.kind === "email") {
        if (!emailRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "email",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "emoji") {
        if (!emojiRegex) {
          emojiRegex = new RegExp(_emojiRegex, "u");
        }
        if (!emojiRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "emoji",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "uuid") {
        if (!uuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "uuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "nanoid") {
        if (!nanoidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "nanoid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid") {
        if (!cuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid2") {
        if (!cuid2Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid2",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ulid") {
        if (!ulidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ulid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "url") {
        try {
          new URL(input.data);
        } catch (_a17) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "regex") {
        check.regex.lastIndex = 0;
        const testResult = check.regex.test(input.data);
        if (!testResult) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "regex",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "trim") {
        input.data = input.data.trim();
      } else if (check.kind === "includes") {
        if (!input.data.includes(check.value, check.position)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { includes: check.value, position: check.position },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "toLowerCase") {
        input.data = input.data.toLowerCase();
      } else if (check.kind === "toUpperCase") {
        input.data = input.data.toUpperCase();
      } else if (check.kind === "startsWith") {
        if (!input.data.startsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { startsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "endsWith") {
        if (!input.data.endsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { endsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "datetime") {
        const regex = datetimeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "datetime",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "date") {
        const regex = dateRegex;
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "date",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "time") {
        const regex = timeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "time",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "duration") {
        if (!durationRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "duration",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ip") {
        if (!isValidIP(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ip",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "jwt") {
        if (!isValidJWT(input.data, check.alg)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "jwt",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cidr") {
        if (!isValidCidr(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cidr",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "base64") {
        if (!base64Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "base64",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "base64url") {
        if (!base64urlRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "base64url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _regex(regex, validation, message) {
    return this.refinement((data) => regex.test(data), {
      validation,
      code: ZodIssueCode.invalid_string,
      ...errorUtil.errToObj(message)
    });
  }
  _addCheck(check) {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  email(message) {
    return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
  }
  url(message) {
    return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
  }
  emoji(message) {
    return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
  }
  uuid(message) {
    return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
  }
  nanoid(message) {
    return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(message) });
  }
  cuid(message) {
    return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
  }
  cuid2(message) {
    return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
  }
  ulid(message) {
    return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
  }
  base64(message) {
    return this._addCheck({ kind: "base64", ...errorUtil.errToObj(message) });
  }
  base64url(message) {
    return this._addCheck({
      kind: "base64url",
      ...errorUtil.errToObj(message)
    });
  }
  jwt(options) {
    return this._addCheck({ kind: "jwt", ...errorUtil.errToObj(options) });
  }
  ip(options) {
    return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
  }
  cidr(options) {
    return this._addCheck({ kind: "cidr", ...errorUtil.errToObj(options) });
  }
  datetime(options) {
    var _a17, _b;
    if (typeof options === "string") {
      return this._addCheck({
        kind: "datetime",
        precision: null,
        offset: false,
        local: false,
        message: options
      });
    }
    return this._addCheck({
      kind: "datetime",
      precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
      offset: (_a17 = options === null || options === void 0 ? void 0 : options.offset) !== null && _a17 !== void 0 ? _a17 : false,
      local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  date(message) {
    return this._addCheck({ kind: "date", message });
  }
  time(options) {
    if (typeof options === "string") {
      return this._addCheck({
        kind: "time",
        precision: null,
        message: options
      });
    }
    return this._addCheck({
      kind: "time",
      precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  duration(message) {
    return this._addCheck({ kind: "duration", ...errorUtil.errToObj(message) });
  }
  regex(regex, message) {
    return this._addCheck({
      kind: "regex",
      regex,
      ...errorUtil.errToObj(message)
    });
  }
  includes(value, options) {
    return this._addCheck({
      kind: "includes",
      value,
      position: options === null || options === void 0 ? void 0 : options.position,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  startsWith(value, message) {
    return this._addCheck({
      kind: "startsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  endsWith(value, message) {
    return this._addCheck({
      kind: "endsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  min(minLength, message) {
    return this._addCheck({
      kind: "min",
      value: minLength,
      ...errorUtil.errToObj(message)
    });
  }
  max(maxLength, message) {
    return this._addCheck({
      kind: "max",
      value: maxLength,
      ...errorUtil.errToObj(message)
    });
  }
  length(len, message) {
    return this._addCheck({
      kind: "length",
      value: len,
      ...errorUtil.errToObj(message)
    });
  }
  /**
   * Equivalent to `.min(1)`
   */
  nonempty(message) {
    return this.min(1, errorUtil.errToObj(message));
  }
  trim() {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((ch) => ch.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((ch) => ch.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((ch) => ch.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((ch) => ch.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((ch) => ch.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((ch) => ch.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((ch) => ch.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((ch) => ch.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((ch) => ch.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((ch) => ch.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((ch) => ch.kind === "ip");
  }
  get isCIDR() {
    return !!this._def.checks.find((ch) => ch.kind === "cidr");
  }
  get isBase64() {
    return !!this._def.checks.find((ch) => ch.kind === "base64");
  }
  get isBase64url() {
    return !!this._def.checks.find((ch) => ch.kind === "base64url");
  }
  get minLength() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxLength() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
};
ZodString.create = (params) => {
  var _a17;
  return new ZodString({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodString,
    coerce: (_a17 = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a17 !== void 0 ? _a17 : false,
    ...processCreateParams(params)
  });
};
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / Math.pow(10, decCount);
}
var ZodNumber = class _ZodNumber extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
    this.step = this.multipleOf;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = Number(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.number) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.number,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "int") {
        if (!util.isInteger(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: "integer",
            received: "float",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (floatSafeRemainder(input.data, check.value) !== 0) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "finite") {
        if (!Number.isFinite(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_finite,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new _ZodNumber({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new _ZodNumber({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  int(message) {
    return this._addCheck({
      kind: "int",
      message: errorUtil.toString(message)
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  finite(message) {
    return this._addCheck({
      kind: "finite",
      message: errorUtil.toString(message)
    });
  }
  safe(message) {
    return this._addCheck({
      kind: "min",
      inclusive: true,
      value: Number.MIN_SAFE_INTEGER,
      message: errorUtil.toString(message)
    })._addCheck({
      kind: "max",
      inclusive: true,
      value: Number.MAX_SAFE_INTEGER,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
  get isInt() {
    return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
  }
  get isFinite() {
    let max = null, min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
        return true;
      } else if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      } else if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return Number.isFinite(min) && Number.isFinite(max);
  }
};
ZodNumber.create = (params) => {
  return new ZodNumber({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodNumber,
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
var ZodBigInt = class _ZodBigInt extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
  }
  _parse(input) {
    if (this._def.coerce) {
      try {
        input.data = BigInt(input.data);
      } catch (_a17) {
        return this._getInvalidInput(input);
      }
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.bigint) {
      return this._getInvalidInput(input);
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            type: "bigint",
            minimum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            type: "bigint",
            maximum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (input.data % check.value !== BigInt(0)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _getInvalidInput(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.bigint,
      received: ctx.parsedType
    });
    return INVALID;
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new _ZodBigInt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new _ZodBigInt({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
};
ZodBigInt.create = (params) => {
  var _a17;
  return new ZodBigInt({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodBigInt,
    coerce: (_a17 = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a17 !== void 0 ? _a17 : false,
    ...processCreateParams(params)
  });
};
var ZodBoolean = class extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = Boolean(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.boolean) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.boolean,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodBoolean.create = (params) => {
  return new ZodBoolean({
    typeName: ZodFirstPartyTypeKind.ZodBoolean,
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
var ZodDate = class _ZodDate extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = new Date(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.date) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.date,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    if (isNaN(input.data.getTime())) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_date
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.getTime() < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            message: check.message,
            inclusive: true,
            exact: false,
            minimum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.getTime() > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            message: check.message,
            inclusive: true,
            exact: false,
            maximum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return {
      status: status.value,
      value: new Date(input.data.getTime())
    };
  }
  _addCheck(check) {
    return new _ZodDate({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  min(minDate, message) {
    return this._addCheck({
      kind: "min",
      value: minDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  max(maxDate, message) {
    return this._addCheck({
      kind: "max",
      value: maxDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  get minDate() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min != null ? new Date(min) : null;
  }
  get maxDate() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max != null ? new Date(max) : null;
  }
};
ZodDate.create = (params) => {
  return new ZodDate({
    checks: [],
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    typeName: ZodFirstPartyTypeKind.ZodDate,
    ...processCreateParams(params)
  });
};
var ZodSymbol = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.symbol) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.symbol,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodSymbol.create = (params) => {
  return new ZodSymbol({
    typeName: ZodFirstPartyTypeKind.ZodSymbol,
    ...processCreateParams(params)
  });
};
var ZodUndefined = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.undefined,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodUndefined.create = (params) => {
  return new ZodUndefined({
    typeName: ZodFirstPartyTypeKind.ZodUndefined,
    ...processCreateParams(params)
  });
};
var ZodNull = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.null) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.null,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodNull.create = (params) => {
  return new ZodNull({
    typeName: ZodFirstPartyTypeKind.ZodNull,
    ...processCreateParams(params)
  });
};
var ZodAny = class extends ZodType {
  constructor() {
    super(...arguments);
    this._any = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodAny.create = (params) => {
  return new ZodAny({
    typeName: ZodFirstPartyTypeKind.ZodAny,
    ...processCreateParams(params)
  });
};
var ZodUnknown = class extends ZodType {
  constructor() {
    super(...arguments);
    this._unknown = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodUnknown.create = (params) => {
  return new ZodUnknown({
    typeName: ZodFirstPartyTypeKind.ZodUnknown,
    ...processCreateParams(params)
  });
};
var ZodNever = class extends ZodType {
  _parse(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.never,
      received: ctx.parsedType
    });
    return INVALID;
  }
};
ZodNever.create = (params) => {
  return new ZodNever({
    typeName: ZodFirstPartyTypeKind.ZodNever,
    ...processCreateParams(params)
  });
};
var ZodVoid = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.void,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodVoid.create = (params) => {
  return new ZodVoid({
    typeName: ZodFirstPartyTypeKind.ZodVoid,
    ...processCreateParams(params)
  });
};
var ZodArray = class _ZodArray extends ZodType {
  _parse(input) {
    const { ctx, status } = this._processInputParams(input);
    const def = this._def;
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (def.exactLength !== null) {
      const tooBig = ctx.data.length > def.exactLength.value;
      const tooSmall = ctx.data.length < def.exactLength.value;
      if (tooBig || tooSmall) {
        addIssueToContext(ctx, {
          code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
          minimum: tooSmall ? def.exactLength.value : void 0,
          maximum: tooBig ? def.exactLength.value : void 0,
          type: "array",
          inclusive: true,
          exact: true,
          message: def.exactLength.message
        });
        status.dirty();
      }
    }
    if (def.minLength !== null) {
      if (ctx.data.length < def.minLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.minLength.message
        });
        status.dirty();
      }
    }
    if (def.maxLength !== null) {
      if (ctx.data.length > def.maxLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.maxLength.message
        });
        status.dirty();
      }
    }
    if (ctx.common.async) {
      return Promise.all([...ctx.data].map((item, i) => {
        return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
      })).then((result2) => {
        return ParseStatus.mergeArray(status, result2);
      });
    }
    const result = [...ctx.data].map((item, i) => {
      return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
    });
    return ParseStatus.mergeArray(status, result);
  }
  get element() {
    return this._def.type;
  }
  min(minLength, message) {
    return new _ZodArray({
      ...this._def,
      minLength: { value: minLength, message: errorUtil.toString(message) }
    });
  }
  max(maxLength, message) {
    return new _ZodArray({
      ...this._def,
      maxLength: { value: maxLength, message: errorUtil.toString(message) }
    });
  }
  length(len, message) {
    return new _ZodArray({
      ...this._def,
      exactLength: { value: len, message: errorUtil.toString(message) }
    });
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodArray.create = (schema, params) => {
  return new ZodArray({
    type: schema,
    minLength: null,
    maxLength: null,
    exactLength: null,
    typeName: ZodFirstPartyTypeKind.ZodArray,
    ...processCreateParams(params)
  });
};
function deepPartialify(schema) {
  if (schema instanceof ZodObject) {
    const newShape = {};
    for (const key in schema.shape) {
      const fieldSchema = schema.shape[key];
      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema._def,
      shape: () => newShape
    });
  } else if (schema instanceof ZodArray) {
    return new ZodArray({
      ...schema._def,
      type: deepPartialify(schema.element)
    });
  } else if (schema instanceof ZodOptional) {
    return ZodOptional.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodNullable) {
    return ZodNullable.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodTuple) {
    return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
  } else {
    return schema;
  }
}
var ZodObject = class _ZodObject extends ZodType {
  constructor() {
    super(...arguments);
    this._cached = null;
    this.nonstrict = this.passthrough;
    this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const shape = this._def.shape();
    const keys = util.objectKeys(shape);
    return this._cached = { shape, keys };
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.object) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const { status, ctx } = this._processInputParams(input);
    const { shape, keys: shapeKeys } = this._getCached();
    const extraKeys = [];
    if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
      for (const key in ctx.data) {
        if (!shapeKeys.includes(key)) {
          extraKeys.push(key);
        }
      }
    }
    const pairs = [];
    for (const key of shapeKeys) {
      const keyValidator = shape[key];
      const value = ctx.data[key];
      pairs.push({
        key: { status: "valid", value: key },
        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (this._def.catchall instanceof ZodNever) {
      const unknownKeys = this._def.unknownKeys;
      if (unknownKeys === "passthrough") {
        for (const key of extraKeys) {
          pairs.push({
            key: { status: "valid", value: key },
            value: { status: "valid", value: ctx.data[key] }
          });
        }
      } else if (unknownKeys === "strict") {
        if (extraKeys.length > 0) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.unrecognized_keys,
            keys: extraKeys
          });
          status.dirty();
        }
      } else if (unknownKeys === "strip") ;
      else {
        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
      }
    } else {
      const catchall = this._def.catchall;
      for (const key of extraKeys) {
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: catchall._parse(
            new ParseInputLazyPath(ctx, value, ctx.path, key)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: key in ctx.data
        });
      }
    }
    if (ctx.common.async) {
      return Promise.resolve().then(async () => {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value,
            alwaysSet: pair.alwaysSet
          });
        }
        return syncPairs;
      }).then((syncPairs) => {
        return ParseStatus.mergeObjectSync(status, syncPairs);
      });
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get shape() {
    return this._def.shape();
  }
  strict(message) {
    errorUtil.errToObj;
    return new _ZodObject({
      ...this._def,
      unknownKeys: "strict",
      ...message !== void 0 ? {
        errorMap: (issue, ctx) => {
          var _a17, _b, _c, _d;
          const defaultError = (_c = (_b = (_a17 = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a17, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
          if (issue.code === "unrecognized_keys")
            return {
              message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
            };
          return {
            message: defaultError
          };
        }
      } : {}
    });
  }
  strip() {
    return new _ZodObject({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new _ZodObject({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(augmentation) {
    return new _ZodObject({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...augmentation
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(merging) {
    const merged = new _ZodObject({
      unknownKeys: merging._def.unknownKeys,
      catchall: merging._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...merging._def.shape()
      }),
      typeName: ZodFirstPartyTypeKind.ZodObject
    });
    return merged;
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(key, schema) {
    return this.augment({ [key]: schema });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(index) {
    return new _ZodObject({
      ...this._def,
      catchall: index
    });
  }
  pick(mask) {
    const shape = {};
    util.objectKeys(mask).forEach((key) => {
      if (mask[key] && this.shape[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new _ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  omit(mask) {
    const shape = {};
    util.objectKeys(this.shape).forEach((key) => {
      if (!mask[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new _ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return deepPartialify(this);
  }
  partial(mask) {
    const newShape = {};
    util.objectKeys(this.shape).forEach((key) => {
      const fieldSchema = this.shape[key];
      if (mask && !mask[key]) {
        newShape[key] = fieldSchema;
      } else {
        newShape[key] = fieldSchema.optional();
      }
    });
    return new _ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  required(mask) {
    const newShape = {};
    util.objectKeys(this.shape).forEach((key) => {
      if (mask && !mask[key]) {
        newShape[key] = this.shape[key];
      } else {
        const fieldSchema = this.shape[key];
        let newField = fieldSchema;
        while (newField instanceof ZodOptional) {
          newField = newField._def.innerType;
        }
        newShape[key] = newField;
      }
    });
    return new _ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  keyof() {
    return createZodEnum(util.objectKeys(this.shape));
  }
};
ZodObject.create = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.strictCreate = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strict",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.lazycreate = (shape, params) => {
  return new ZodObject({
    shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
var ZodUnion = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const options = this._def.options;
    function handleResults(results) {
      for (const result of results) {
        if (result.result.status === "valid") {
          return result.result;
        }
      }
      for (const result of results) {
        if (result.result.status === "dirty") {
          ctx.common.issues.push(...result.ctx.common.issues);
          return result.result;
        }
      }
      const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return Promise.all(options.map(async (option) => {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          }),
          ctx: childCtx
        };
      })).then(handleResults);
    } else {
      let dirty = void 0;
      const issues = [];
      for (const option of options) {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        const result = option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: childCtx
        });
        if (result.status === "valid") {
          return result;
        } else if (result.status === "dirty" && !dirty) {
          dirty = { result, ctx: childCtx };
        }
        if (childCtx.common.issues.length) {
          issues.push(childCtx.common.issues);
        }
      }
      if (dirty) {
        ctx.common.issues.push(...dirty.ctx.common.issues);
        return dirty.result;
      }
      const unionErrors = issues.map((issues2) => new ZodError(issues2));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
  }
  get options() {
    return this._def.options;
  }
};
ZodUnion.create = (types, params) => {
  return new ZodUnion({
    options: types,
    typeName: ZodFirstPartyTypeKind.ZodUnion,
    ...processCreateParams(params)
  });
};
var getDiscriminator = (type) => {
  if (type instanceof ZodLazy) {
    return getDiscriminator(type.schema);
  } else if (type instanceof ZodEffects) {
    return getDiscriminator(type.innerType());
  } else if (type instanceof ZodLiteral) {
    return [type.value];
  } else if (type instanceof ZodEnum) {
    return type.options;
  } else if (type instanceof ZodNativeEnum) {
    return util.objectValues(type.enum);
  } else if (type instanceof ZodDefault) {
    return getDiscriminator(type._def.innerType);
  } else if (type instanceof ZodUndefined) {
    return [void 0];
  } else if (type instanceof ZodNull) {
    return [null];
  } else if (type instanceof ZodOptional) {
    return [void 0, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodNullable) {
    return [null, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodBranded) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodReadonly) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodCatch) {
    return getDiscriminator(type._def.innerType);
  } else {
    return [];
  }
};
var ZodDiscriminatedUnion = class _ZodDiscriminatedUnion extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const discriminator = this.discriminator;
    const discriminatorValue = ctx.data[discriminator];
    const option = this.optionsMap.get(discriminatorValue);
    if (!option) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union_discriminator,
        options: Array.from(this.optionsMap.keys()),
        path: [discriminator]
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return option._parseAsync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    } else {
      return option._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    }
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(discriminator, options, params) {
    const optionsMap = /* @__PURE__ */ new Map();
    for (const type of options) {
      const discriminatorValues = getDiscriminator(type.shape[discriminator]);
      if (!discriminatorValues.length) {
        throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
      }
      for (const value of discriminatorValues) {
        if (optionsMap.has(value)) {
          throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
        }
        optionsMap.set(value, type);
      }
    }
    return new _ZodDiscriminatedUnion({
      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
      discriminator,
      options,
      optionsMap,
      ...processCreateParams(params)
    });
  }
};
function mergeValues(a, b) {
  const aType = getParsedType(a);
  const bType = getParsedType(b);
  if (a === b) {
    return { valid: true, data: a };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util.objectKeys(b);
    const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a, ...b };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a[key], b[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a.length !== b.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0; index < a.length; index++) {
      const itemA = a[index];
      const itemB = b[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {
    return { valid: true, data: a };
  } else {
    return { valid: false };
  }
}
var ZodIntersection = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const handleParsed = (parsedLeft, parsedRight) => {
      if (isAborted(parsedLeft) || isAborted(parsedRight)) {
        return INVALID;
      }
      const merged = mergeValues(parsedLeft.value, parsedRight.value);
      if (!merged.valid) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_intersection_types
        });
        return INVALID;
      }
      if (isDirty(parsedLeft) || isDirty(parsedRight)) {
        status.dirty();
      }
      return { status: status.value, value: merged.data };
    };
    if (ctx.common.async) {
      return Promise.all([
        this._def.left._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }),
        this._def.right._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        })
      ]).then(([left, right]) => handleParsed(left, right));
    } else {
      return handleParsed(this._def.left._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }), this._def.right._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }));
    }
  }
};
ZodIntersection.create = (left, right, params) => {
  return new ZodIntersection({
    left,
    right,
    typeName: ZodFirstPartyTypeKind.ZodIntersection,
    ...processCreateParams(params)
  });
};
var ZodTuple = class _ZodTuple extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (ctx.data.length < this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_small,
        minimum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      return INVALID;
    }
    const rest = this._def.rest;
    if (!rest && ctx.data.length > this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_big,
        maximum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      status.dirty();
    }
    const items = [...ctx.data].map((item, itemIndex) => {
      const schema = this._def.items[itemIndex] || this._def.rest;
      if (!schema)
        return null;
      return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
    }).filter((x) => !!x);
    if (ctx.common.async) {
      return Promise.all(items).then((results) => {
        return ParseStatus.mergeArray(status, results);
      });
    } else {
      return ParseStatus.mergeArray(status, items);
    }
  }
  get items() {
    return this._def.items;
  }
  rest(rest) {
    return new _ZodTuple({
      ...this._def,
      rest
    });
  }
};
ZodTuple.create = (schemas, params) => {
  if (!Array.isArray(schemas)) {
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  }
  return new ZodTuple({
    items: schemas,
    typeName: ZodFirstPartyTypeKind.ZodTuple,
    rest: null,
    ...processCreateParams(params)
  });
};
var ZodRecord = class _ZodRecord extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const pairs = [];
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    for (const key in ctx.data) {
      pairs.push({
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (ctx.common.async) {
      return ParseStatus.mergeObjectAsync(status, pairs);
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get element() {
    return this._def.valueType;
  }
  static create(first, second, third) {
    if (second instanceof ZodType) {
      return new _ZodRecord({
        keyType: first,
        valueType: second,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(third)
      });
    }
    return new _ZodRecord({
      keyType: ZodString.create(),
      valueType: first,
      typeName: ZodFirstPartyTypeKind.ZodRecord,
      ...processCreateParams(second)
    });
  }
};
var ZodMap = class extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.map) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.map,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    const pairs = [...ctx.data.entries()].map(([key, value], index) => {
      return {
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
        value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
      };
    });
    if (ctx.common.async) {
      const finalMap = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      });
    } else {
      const finalMap = /* @__PURE__ */ new Map();
      for (const pair of pairs) {
        const key = pair.key;
        const value = pair.value;
        if (key.status === "aborted" || value.status === "aborted") {
          return INVALID;
        }
        if (key.status === "dirty" || value.status === "dirty") {
          status.dirty();
        }
        finalMap.set(key.value, value.value);
      }
      return { status: status.value, value: finalMap };
    }
  }
};
ZodMap.create = (keyType, valueType, params) => {
  return new ZodMap({
    valueType,
    keyType,
    typeName: ZodFirstPartyTypeKind.ZodMap,
    ...processCreateParams(params)
  });
};
var ZodSet = class _ZodSet extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.set) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.set,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const def = this._def;
    if (def.minSize !== null) {
      if (ctx.data.size < def.minSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.minSize.message
        });
        status.dirty();
      }
    }
    if (def.maxSize !== null) {
      if (ctx.data.size > def.maxSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.maxSize.message
        });
        status.dirty();
      }
    }
    const valueType = this._def.valueType;
    function finalizeSet(elements2) {
      const parsedSet = /* @__PURE__ */ new Set();
      for (const element of elements2) {
        if (element.status === "aborted")
          return INVALID;
        if (element.status === "dirty")
          status.dirty();
        parsedSet.add(element.value);
      }
      return { status: status.value, value: parsedSet };
    }
    const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
    if (ctx.common.async) {
      return Promise.all(elements).then((elements2) => finalizeSet(elements2));
    } else {
      return finalizeSet(elements);
    }
  }
  min(minSize, message) {
    return new _ZodSet({
      ...this._def,
      minSize: { value: minSize, message: errorUtil.toString(message) }
    });
  }
  max(maxSize, message) {
    return new _ZodSet({
      ...this._def,
      maxSize: { value: maxSize, message: errorUtil.toString(message) }
    });
  }
  size(size, message) {
    return this.min(size, message).max(size, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodSet.create = (valueType, params) => {
  return new ZodSet({
    valueType,
    minSize: null,
    maxSize: null,
    typeName: ZodFirstPartyTypeKind.ZodSet,
    ...processCreateParams(params)
  });
};
var ZodFunction = class _ZodFunction extends ZodType {
  constructor() {
    super(...arguments);
    this.validate = this.implement;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.function) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.function,
        received: ctx.parsedType
      });
      return INVALID;
    }
    function makeArgsIssue(args, error) {
      return makeIssue({
        data: args,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_arguments,
          argumentsError: error
        }
      });
    }
    function makeReturnsIssue(returns, error) {
      return makeIssue({
        data: returns,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_return_type,
          returnTypeError: error
        }
      });
    }
    const params = { errorMap: ctx.common.contextualErrorMap };
    const fn = ctx.data;
    if (this._def.returns instanceof ZodPromise) {
      const me = this;
      return OK(async function(...args) {
        const error = new ZodError([]);
        const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
          error.addIssue(makeArgsIssue(args, e));
          throw error;
        });
        const result = await Reflect.apply(fn, this, parsedArgs);
        const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
          error.addIssue(makeReturnsIssue(result, e));
          throw error;
        });
        return parsedReturns;
      });
    } else {
      const me = this;
      return OK(function(...args) {
        const parsedArgs = me._def.args.safeParse(args, params);
        if (!parsedArgs.success) {
          throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
        }
        const result = Reflect.apply(fn, this, parsedArgs.data);
        const parsedReturns = me._def.returns.safeParse(result, params);
        if (!parsedReturns.success) {
          throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
        }
        return parsedReturns.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...items) {
    return new _ZodFunction({
      ...this._def,
      args: ZodTuple.create(items).rest(ZodUnknown.create())
    });
  }
  returns(returnType) {
    return new _ZodFunction({
      ...this._def,
      returns: returnType
    });
  }
  implement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  strictImplement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  static create(args, returns, params) {
    return new _ZodFunction({
      args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
      returns: returns || ZodUnknown.create(),
      typeName: ZodFirstPartyTypeKind.ZodFunction,
      ...processCreateParams(params)
    });
  }
};
var ZodLazy = class extends ZodType {
  get schema() {
    return this._def.getter();
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const lazySchema = this._def.getter();
    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
  }
};
ZodLazy.create = (getter, params) => {
  return new ZodLazy({
    getter,
    typeName: ZodFirstPartyTypeKind.ZodLazy,
    ...processCreateParams(params)
  });
};
var ZodLiteral = class extends ZodType {
  _parse(input) {
    if (input.data !== this._def.value) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_literal,
        expected: this._def.value
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
  get value() {
    return this._def.value;
  }
};
ZodLiteral.create = (value, params) => {
  return new ZodLiteral({
    value,
    typeName: ZodFirstPartyTypeKind.ZodLiteral,
    ...processCreateParams(params)
  });
};
function createZodEnum(values, params) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params)
  });
}
var ZodEnum = class _ZodEnum extends ZodType {
  constructor() {
    super(...arguments);
    _ZodEnum_cache.set(this, void 0);
  }
  _parse(input) {
    if (typeof input.data !== "string") {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f")) {
      __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), "f");
    }
    if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f").has(input.data)) {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Values() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  extract(values, newDef = this._def) {
    return _ZodEnum.create(values, {
      ...this._def,
      ...newDef
    });
  }
  exclude(values, newDef = this._def) {
    return _ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
      ...this._def,
      ...newDef
    });
  }
};
_ZodEnum_cache = /* @__PURE__ */ new WeakMap();
ZodEnum.create = createZodEnum;
var ZodNativeEnum = class extends ZodType {
  constructor() {
    super(...arguments);
    _ZodNativeEnum_cache.set(this, void 0);
  }
  _parse(input) {
    const nativeEnumValues = util.getValidEnumValues(this._def.values);
    const ctx = this._getOrReturnCtx(input);
    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f")) {
      __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), "f");
    }
    if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f").has(input.data)) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get enum() {
    return this._def.values;
  }
};
_ZodNativeEnum_cache = /* @__PURE__ */ new WeakMap();
ZodNativeEnum.create = (values, params) => {
  return new ZodNativeEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
    ...processCreateParams(params)
  });
};
var ZodPromise = class extends ZodType {
  unwrap() {
    return this._def.type;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.promise,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
    return OK(promisified.then((data) => {
      return this._def.type.parseAsync(data, {
        path: ctx.path,
        errorMap: ctx.common.contextualErrorMap
      });
    }));
  }
};
ZodPromise.create = (schema, params) => {
  return new ZodPromise({
    type: schema,
    typeName: ZodFirstPartyTypeKind.ZodPromise,
    ...processCreateParams(params)
  });
};
var ZodEffects = class extends ZodType {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const effect = this._def.effect || null;
    const checkCtx = {
      addIssue: (arg) => {
        addIssueToContext(ctx, arg);
        if (arg.fatal) {
          status.abort();
        } else {
          status.dirty();
        }
      },
      get path() {
        return ctx.path;
      }
    };
    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
    if (effect.type === "preprocess") {
      const processed = effect.transform(ctx.data, checkCtx);
      if (ctx.common.async) {
        return Promise.resolve(processed).then(async (processed2) => {
          if (status.value === "aborted")
            return INVALID;
          const result = await this._def.schema._parseAsync({
            data: processed2,
            path: ctx.path,
            parent: ctx
          });
          if (result.status === "aborted")
            return INVALID;
          if (result.status === "dirty")
            return DIRTY(result.value);
          if (status.value === "dirty")
            return DIRTY(result.value);
          return result;
        });
      } else {
        if (status.value === "aborted")
          return INVALID;
        const result = this._def.schema._parseSync({
          data: processed,
          path: ctx.path,
          parent: ctx
        });
        if (result.status === "aborted")
          return INVALID;
        if (result.status === "dirty")
          return DIRTY(result.value);
        if (status.value === "dirty")
          return DIRTY(result.value);
        return result;
      }
    }
    if (effect.type === "refinement") {
      const executeRefinement = (acc) => {
        const result = effect.refinement(acc, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(result);
        }
        if (result instanceof Promise) {
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        }
        return acc;
      };
      if (ctx.common.async === false) {
        const inner = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inner.status === "aborted")
          return INVALID;
        if (inner.status === "dirty")
          status.dirty();
        executeRefinement(inner.value);
        return { status: status.value, value: inner.value };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          return executeRefinement(inner.value).then(() => {
            return { status: status.value, value: inner.value };
          });
        });
      }
    }
    if (effect.type === "transform") {
      if (ctx.common.async === false) {
        const base = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (!isValid(base))
          return base;
        const result = effect.transform(base.value, checkCtx);
        if (result instanceof Promise) {
          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
        }
        return { status: status.value, value: result };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
          if (!isValid(base))
            return base;
          return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
        });
      }
    }
    util.assertNever(effect);
  }
};
ZodEffects.create = (schema, effect, params) => {
  return new ZodEffects({
    schema,
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    effect,
    ...processCreateParams(params)
  });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
  return new ZodEffects({
    schema,
    effect: { type: "preprocess", transform: preprocess },
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    ...processCreateParams(params)
  });
};
var ZodOptional = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.undefined) {
      return OK(void 0);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodOptional.create = (type, params) => {
  return new ZodOptional({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params)
  });
};
var ZodNullable = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.null) {
      return OK(null);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodNullable.create = (type, params) => {
  return new ZodNullable({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodNullable,
    ...processCreateParams(params)
  });
};
var ZodDefault = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    let data = ctx.data;
    if (ctx.parsedType === ZodParsedType.undefined) {
      data = this._def.defaultValue();
    }
    return this._def.innerType._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
};
ZodDefault.create = (type, params) => {
  return new ZodDefault({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodDefault,
    defaultValue: typeof params.default === "function" ? params.default : () => params.default,
    ...processCreateParams(params)
  });
};
var ZodCatch = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const newCtx = {
      ...ctx,
      common: {
        ...ctx.common,
        issues: []
      }
    };
    const result = this._def.innerType._parse({
      data: newCtx.data,
      path: newCtx.path,
      parent: {
        ...newCtx
      }
    });
    if (isAsync(result)) {
      return result.then((result2) => {
        return {
          status: "valid",
          value: result2.status === "valid" ? result2.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      });
    } else {
      return {
        status: "valid",
        value: result.status === "valid" ? result.value : this._def.catchValue({
          get error() {
            return new ZodError(newCtx.common.issues);
          },
          input: newCtx.data
        })
      };
    }
  }
  removeCatch() {
    return this._def.innerType;
  }
};
ZodCatch.create = (type, params) => {
  return new ZodCatch({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodCatch,
    catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
    ...processCreateParams(params)
  });
};
var ZodNaN = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.nan) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.nan,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
};
ZodNaN.create = (params) => {
  return new ZodNaN({
    typeName: ZodFirstPartyTypeKind.ZodNaN,
    ...processCreateParams(params)
  });
};
var BRAND = Symbol("zod_brand");
var ZodBranded = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const data = ctx.data;
    return this._def.type._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  unwrap() {
    return this._def.type;
  }
};
var ZodPipeline = class _ZodPipeline extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.common.async) {
      const handleAsync = async () => {
        const inResult = await this._def.in._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return DIRTY(inResult.value);
        } else {
          return this._def.out._parseAsync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      };
      return handleAsync();
    } else {
      const inResult = this._def.in._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
      if (inResult.status === "aborted")
        return INVALID;
      if (inResult.status === "dirty") {
        status.dirty();
        return {
          status: "dirty",
          value: inResult.value
        };
      } else {
        return this._def.out._parseSync({
          data: inResult.value,
          path: ctx.path,
          parent: ctx
        });
      }
    }
  }
  static create(a, b) {
    return new _ZodPipeline({
      in: a,
      out: b,
      typeName: ZodFirstPartyTypeKind.ZodPipeline
    });
  }
};
var ZodReadonly = class extends ZodType {
  _parse(input) {
    const result = this._def.innerType._parse(input);
    const freeze = (data) => {
      if (isValid(data)) {
        data.value = Object.freeze(data.value);
      }
      return data;
    };
    return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodReadonly.create = (type, params) => {
  return new ZodReadonly({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodReadonly,
    ...processCreateParams(params)
  });
};
function cleanParams(params, data) {
  const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
  const p2 = typeof p === "string" ? { message: p } : p;
  return p2;
}
function custom(check, _params = {}, fatal) {
  if (check)
    return ZodAny.create().superRefine((data, ctx) => {
      var _a17, _b;
      const r = check(data);
      if (r instanceof Promise) {
        return r.then((r2) => {
          var _a18, _b2;
          if (!r2) {
            const params = cleanParams(_params, data);
            const _fatal = (_b2 = (_a18 = params.fatal) !== null && _a18 !== void 0 ? _a18 : fatal) !== null && _b2 !== void 0 ? _b2 : true;
            ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
          }
        });
      }
      if (!r) {
        const params = cleanParams(_params, data);
        const _fatal = (_b = (_a17 = params.fatal) !== null && _a17 !== void 0 ? _a17 : fatal) !== null && _b !== void 0 ? _b : true;
        ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
      }
      return;
    });
  return ZodAny.create();
}
var late = {
  object: ZodObject.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind2) {
  ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
  ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
  ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
  ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
  ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
  ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
  ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
  ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
  ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
  ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
  ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
  ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
  ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
  ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
  ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
  ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
  ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
  ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
  ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
  ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
  ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
  ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
  ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
  ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
  ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
  ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
  ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
  ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
  ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
  ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
  ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
  ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
  ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
  ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
  ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
  ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
var instanceOfType = (cls, params = {
  message: `Input not instance of ${cls.name}`
}) => custom((data) => data instanceof cls, params);
var stringType = ZodString.create;
var numberType = ZodNumber.create;
var nanType = ZodNaN.create;
var bigIntType = ZodBigInt.create;
var booleanType = ZodBoolean.create;
var dateType = ZodDate.create;
var symbolType = ZodSymbol.create;
var undefinedType = ZodUndefined.create;
var nullType = ZodNull.create;
var anyType = ZodAny.create;
var unknownType = ZodUnknown.create;
var neverType = ZodNever.create;
var voidType = ZodVoid.create;
var arrayType = ZodArray.create;
var objectType = ZodObject.create;
var strictObjectType = ZodObject.strictCreate;
var unionType = ZodUnion.create;
var discriminatedUnionType = ZodDiscriminatedUnion.create;
var intersectionType = ZodIntersection.create;
var tupleType = ZodTuple.create;
var recordType = ZodRecord.create;
var mapType = ZodMap.create;
var setType = ZodSet.create;
var functionType = ZodFunction.create;
var lazyType = ZodLazy.create;
var literalType = ZodLiteral.create;
var enumType = ZodEnum.create;
var nativeEnumType = ZodNativeEnum.create;
var promiseType = ZodPromise.create;
var effectsType = ZodEffects.create;
var optionalType = ZodOptional.create;
var nullableType = ZodNullable.create;
var preprocessType = ZodEffects.createWithPreprocess;
var pipelineType = ZodPipeline.create;
var ostring = () => stringType().optional();
var onumber = () => numberType().optional();
var oboolean = () => booleanType().optional();
var coerce = {
  string: (arg) => ZodString.create({ ...arg, coerce: true }),
  number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
  boolean: (arg) => ZodBoolean.create({
    ...arg,
    coerce: true
  }),
  bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
  date: (arg) => ZodDate.create({ ...arg, coerce: true })
};
var NEVER = INVALID;
var z = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  defaultErrorMap: errorMap,
  setErrorMap,
  getErrorMap,
  makeIssue,
  EMPTY_PATH,
  addIssueToContext,
  ParseStatus,
  INVALID,
  DIRTY,
  OK,
  isAborted,
  isDirty,
  isValid,
  isAsync,
  get util() {
    return util;
  },
  get objectUtil() {
    return objectUtil;
  },
  ZodParsedType,
  getParsedType,
  ZodType,
  datetimeRegex,
  ZodString,
  ZodNumber,
  ZodBigInt,
  ZodBoolean,
  ZodDate,
  ZodSymbol,
  ZodUndefined,
  ZodNull,
  ZodAny,
  ZodUnknown,
  ZodNever,
  ZodVoid,
  ZodArray,
  ZodObject,
  ZodUnion,
  ZodDiscriminatedUnion,
  ZodIntersection,
  ZodTuple,
  ZodRecord,
  ZodMap,
  ZodSet,
  ZodFunction,
  ZodLazy,
  ZodLiteral,
  ZodEnum,
  ZodNativeEnum,
  ZodPromise,
  ZodEffects,
  ZodTransformer: ZodEffects,
  ZodOptional,
  ZodNullable,
  ZodDefault,
  ZodCatch,
  ZodNaN,
  BRAND,
  ZodBranded,
  ZodPipeline,
  ZodReadonly,
  custom,
  Schema: ZodType,
  ZodSchema: ZodType,
  late,
  get ZodFirstPartyTypeKind() {
    return ZodFirstPartyTypeKind;
  },
  coerce,
  any: anyType,
  array: arrayType,
  bigint: bigIntType,
  boolean: booleanType,
  date: dateType,
  discriminatedUnion: discriminatedUnionType,
  effect: effectsType,
  "enum": enumType,
  "function": functionType,
  "instanceof": instanceOfType,
  intersection: intersectionType,
  lazy: lazyType,
  literal: literalType,
  map: mapType,
  nan: nanType,
  nativeEnum: nativeEnumType,
  never: neverType,
  "null": nullType,
  nullable: nullableType,
  number: numberType,
  object: objectType,
  oboolean,
  onumber,
  optional: optionalType,
  ostring,
  pipeline: pipelineType,
  preprocess: preprocessType,
  promise: promiseType,
  record: recordType,
  set: setType,
  strictObject: strictObjectType,
  string: stringType,
  symbol: symbolType,
  transformer: effectsType,
  tuple: tupleType,
  "undefined": undefinedType,
  union: unionType,
  unknown: unknownType,
  "void": voidType,
  NEVER,
  ZodIssueCode,
  quotelessJson,
  ZodError
});

// src/utils/get-tracks-from-spotify.ts
init_esm();
async function getTracksFromSpotify(inputs, accessToken) {
  const allTracks = [];
  for (const input of inputs) {
    const isLiked = input.type === "LIKED";
    let nextUrl = isLiked ? "https://api.spotify.com/v1/me/tracks?limit=50" : `https://api.spotify.com/v1/playlists/${input.playlistId}/tracks?limit=50`;
    while (nextUrl) {
      const res = await fetch(nextUrl, {
        headers: {
          Authorization: `Bearer ${accessToken}`
        }
      });
      if (!res.ok) {
        console.error(
          `Failed to fetch tracks from ${input.name}:`,
          await res.text()
        );
        break;
      }
      const data = await res.json();
      const items = isLiked ? data.items.map((i) => i.track) : data.items.map((i) => i.track);
      for (const track of items) {
        if (!track || !track.id) continue;
        allTracks.push({
          id: track.id,
          name: track.name,
          artist: track.artists.map((a) => a.name).join(", ")
        });
      }
      nextUrl = data.next;
    }
  }
  return allTracks;
}

// src/utils/organize-tracks-with-ai.ts
init_esm();

// src/schemas/playlist-schema.ts
init_esm();
var PlaylistsSchema = z.object({
  playlists: z.array(
    z.object({
      name: z.string(),
      description: z.string().optional(),
      tracks: z.array(z.string())
    })
  )
});
function makePlaylistsSchema(validIds) {
  const idSet = new Set(validIds);
  return z.object({
    playlists: z.array(
      z.object({
        name: z.string(),
        description: z.string(),
        tracks: z.array(z.string()).nonempty("Cada playlist precisa ter ao menos 1 faixa")
      })
    ).max(5, "Excede o número máximo de playlists")
  });
}

// ../../node_modules/.pnpm/ai@4.3.19_react@19.0.0_zod@3.24.2/node_modules/ai/dist/index.mjs
init_esm();

// ../../node_modules/.pnpm/@ai-sdk+provider-utils@2.2.8_zod@3.24.2/node_modules/@ai-sdk/provider-utils/dist/index.mjs
init_esm();

// ../../node_modules/.pnpm/@ai-sdk+provider@1.1.3/node_modules/@ai-sdk/provider/dist/index.mjs
init_esm();
var marker = "vercel.ai.error";
var symbol = Symbol.for(marker);
var _a;
var _AISDKError = class _AISDKError2 extends Error {
  /**
   * Creates an AI SDK Error.
   *
   * @param {Object} params - The parameters for creating the error.
   * @param {string} params.name - The name of the error.
   * @param {string} params.message - The error message.
   * @param {unknown} [params.cause] - The underlying cause of the error.
   */
  constructor({
    name: name143,
    message,
    cause
  }) {
    super(message);
    this[_a] = true;
    this.name = name143;
    this.cause = cause;
  }
  /**
   * Checks if the given error is an AI SDK Error.
   * @param {unknown} error - The error to check.
   * @returns {boolean} True if the error is an AI SDK Error, false otherwise.
   */
  static isInstance(error) {
    return _AISDKError2.hasMarker(error, marker);
  }
  static hasMarker(error, marker153) {
    const markerSymbol = Symbol.for(marker153);
    return error != null && typeof error === "object" && markerSymbol in error && typeof error[markerSymbol] === "boolean" && error[markerSymbol] === true;
  }
};
_a = symbol;
var AISDKError = _AISDKError;
var name = "AI_APICallError";
var marker2 = `vercel.ai.error.${name}`;
var symbol2 = Symbol.for(marker2);
var _a2;
var APICallError = class extends AISDKError {
  constructor({
    message,
    url,
    requestBodyValues,
    statusCode,
    responseHeaders,
    responseBody,
    cause,
    isRetryable = statusCode != null && (statusCode === 408 || // request timeout
    statusCode === 409 || // conflict
    statusCode === 429 || // too many requests
    statusCode >= 500),
    // server error
    data
  }) {
    super({ name, message, cause });
    this[_a2] = true;
    this.url = url;
    this.requestBodyValues = requestBodyValues;
    this.statusCode = statusCode;
    this.responseHeaders = responseHeaders;
    this.responseBody = responseBody;
    this.isRetryable = isRetryable;
    this.data = data;
  }
  static isInstance(error) {
    return AISDKError.hasMarker(error, marker2);
  }
};
_a2 = symbol2;
var name2 = "AI_EmptyResponseBodyError";
var marker3 = `vercel.ai.error.${name2}`;
var symbol3 = Symbol.for(marker3);
var _a3;
var EmptyResponseBodyError = class extends AISDKError {
  // used in isInstance
  constructor({ message = "Empty response body" } = {}) {
    super({ name: name2, message });
    this[_a3] = true;
  }
  static isInstance(error) {
    return AISDKError.hasMarker(error, marker3);
  }
};
_a3 = symbol3;
function getErrorMessage(error) {
  if (error == null) {
    return "unknown error";
  }
  if (typeof error === "string") {
    return error;
  }
  if (error instanceof Error) {
    return error.message;
  }
  return JSON.stringify(error);
}
var name3 = "AI_InvalidArgumentError";
var marker4 = `vercel.ai.error.${name3}`;
var symbol4 = Symbol.for(marker4);
var _a4;
var InvalidArgumentError = class extends AISDKError {
  constructor({
    message,
    cause,
    argument
  }) {
    super({ name: name3, message, cause });
    this[_a4] = true;
    this.argument = argument;
  }
  static isInstance(error) {
    return AISDKError.hasMarker(error, marker4);
  }
};
_a4 = symbol4;
var name4 = "AI_InvalidPromptError";
var marker5 = `vercel.ai.error.${name4}`;
var symbol5 = Symbol.for(marker5);
var _a5;
var InvalidPromptError = class extends AISDKError {
  constructor({
    prompt,
    message,
    cause
  }) {
    super({ name: name4, message: `Invalid prompt: ${message}`, cause });
    this[_a5] = true;
    this.prompt = prompt;
  }
  static isInstance(error) {
    return AISDKError.hasMarker(error, marker5);
  }
};
_a5 = symbol5;
var name5 = "AI_InvalidResponseDataError";
var marker6 = `vercel.ai.error.${name5}`;
var symbol6 = Symbol.for(marker6);
var _a6;
var InvalidResponseDataError = class extends AISDKError {
  constructor({
    data,
    message = `Invalid response data: ${JSON.stringify(data)}.`
  }) {
    super({ name: name5, message });
    this[_a6] = true;
    this.data = data;
  }
  static isInstance(error) {
    return AISDKError.hasMarker(error, marker6);
  }
};
_a6 = symbol6;
var name6 = "AI_JSONParseError";
var marker7 = `vercel.ai.error.${name6}`;
var symbol7 = Symbol.for(marker7);
var _a7;
var JSONParseError = class extends AISDKError {
  constructor({ text: text2, cause }) {
    super({
      name: name6,
      message: `JSON parsing failed: Text: ${text2}.
Error message: ${getErrorMessage(cause)}`,
      cause
    });
    this[_a7] = true;
    this.text = text2;
  }
  static isInstance(error) {
    return AISDKError.hasMarker(error, marker7);
  }
};
_a7 = symbol7;
var name7 = "AI_LoadAPIKeyError";
var marker8 = `vercel.ai.error.${name7}`;
var symbol8 = Symbol.for(marker8);
var _a8;
var LoadAPIKeyError = class extends AISDKError {
  // used in isInstance
  constructor({ message }) {
    super({ name: name7, message });
    this[_a8] = true;
  }
  static isInstance(error) {
    return AISDKError.hasMarker(error, marker8);
  }
};
_a8 = symbol8;
var name8 = "AI_LoadSettingError";
var marker9 = `vercel.ai.error.${name8}`;
var symbol9 = Symbol.for(marker9);
var _a9;
_a9 = symbol9;
var name9 = "AI_NoContentGeneratedError";
var marker10 = `vercel.ai.error.${name9}`;
var symbol10 = Symbol.for(marker10);
var _a10;
_a10 = symbol10;
var name10 = "AI_NoSuchModelError";
var marker11 = `vercel.ai.error.${name10}`;
var symbol11 = Symbol.for(marker11);
var _a11;
_a11 = symbol11;
var name11 = "AI_TooManyEmbeddingValuesForCallError";
var marker12 = `vercel.ai.error.${name11}`;
var symbol12 = Symbol.for(marker12);
var _a12;
var TooManyEmbeddingValuesForCallError = class extends AISDKError {
  constructor(options) {
    super({
      name: name11,
      message: `Too many values for a single embedding call. The ${options.provider} model "${options.modelId}" can only embed up to ${options.maxEmbeddingsPerCall} values per call, but ${options.values.length} values were provided.`
    });
    this[_a12] = true;
    this.provider = options.provider;
    this.modelId = options.modelId;
    this.maxEmbeddingsPerCall = options.maxEmbeddingsPerCall;
    this.values = options.values;
  }
  static isInstance(error) {
    return AISDKError.hasMarker(error, marker12);
  }
};
_a12 = symbol12;
var name12 = "AI_TypeValidationError";
var marker13 = `vercel.ai.error.${name12}`;
var symbol13 = Symbol.for(marker13);
var _a13;
var _TypeValidationError = class _TypeValidationError2 extends AISDKError {
  constructor({ value, cause }) {
    super({
      name: name12,
      message: `Type validation failed: Value: ${JSON.stringify(value)}.
Error message: ${getErrorMessage(cause)}`,
      cause
    });
    this[_a13] = true;
    this.value = value;
  }
  static isInstance(error) {
    return AISDKError.hasMarker(error, marker13);
  }
  /**
   * Wraps an error into a TypeValidationError.
   * If the cause is already a TypeValidationError with the same value, it returns the cause.
   * Otherwise, it creates a new TypeValidationError.
   *
   * @param {Object} params - The parameters for wrapping the error.
   * @param {unknown} params.value - The value that failed validation.
   * @param {unknown} params.cause - The original error or cause of the validation failure.
   * @returns {TypeValidationError} A TypeValidationError instance.
   */
  static wrap({
    value,
    cause
  }) {
    return _TypeValidationError2.isInstance(cause) && cause.value === value ? cause : new _TypeValidationError2({ value, cause });
  }
};
_a13 = symbol13;
var TypeValidationError = _TypeValidationError;
var name13 = "AI_UnsupportedFunctionalityError";
var marker14 = `vercel.ai.error.${name13}`;
var symbol14 = Symbol.for(marker14);
var _a14;
var UnsupportedFunctionalityError = class extends AISDKError {
  constructor({
    functionality,
    message = `'${functionality}' functionality not supported.`
  }) {
    super({ name: name13, message });
    this[_a14] = true;
    this.functionality = functionality;
  }
  static isInstance(error) {
    return AISDKError.hasMarker(error, marker14);
  }
};
_a14 = symbol14;
function isJSONValue(value) {
  if (value === null || typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
    return true;
  }
  if (Array.isArray(value)) {
    return value.every(isJSONValue);
  }
  if (typeof value === "object") {
    return Object.entries(value).every(
      ([key, val]) => typeof key === "string" && isJSONValue(val)
    );
  }
  return false;
}
function isJSONArray(value) {
  return Array.isArray(value) && value.every(isJSONValue);
}
function isJSONObject(value) {
  return value != null && typeof value === "object" && Object.entries(value).every(
    ([key, val]) => typeof key === "string" && isJSONValue(val)
  );
}

// ../../node_modules/.pnpm/nanoid@3.3.11/node_modules/nanoid/non-secure/index.js
init_esm();
var customAlphabet = (alphabet, defaultSize = 21) => {
  return (size = defaultSize) => {
    let id = "";
    let i = size | 0;
    while (i--) {
      id += alphabet[Math.random() * alphabet.length | 0];
    }
    return id;
  };
};

// ../../node_modules/.pnpm/@ai-sdk+provider-utils@2.2.8_zod@3.24.2/node_modules/@ai-sdk/provider-utils/dist/index.mjs
var import_secure_json_parse = __toESM(require_secure_json_parse(), 1);
function combineHeaders(...headers) {
  return headers.reduce(
    (combinedHeaders, currentHeaders) => ({
      ...combinedHeaders,
      ...currentHeaders != null ? currentHeaders : {}
    }),
    {}
  );
}
function convertAsyncIteratorToReadableStream(iterator) {
  return new ReadableStream({
    /**
     * Called when the consumer wants to pull more data from the stream.
     *
     * @param {ReadableStreamDefaultController<T>} controller - The controller to enqueue data into the stream.
     * @returns {Promise<void>}
     */
    async pull(controller) {
      try {
        const { value, done } = await iterator.next();
        if (done) {
          controller.close();
        } else {
          controller.enqueue(value);
        }
      } catch (error) {
        controller.error(error);
      }
    },
    /**
     * Called when the consumer cancels the stream.
     */
    cancel() {
    }
  });
}
async function delay(delayInMs) {
  return delayInMs == null ? Promise.resolve() : new Promise((resolve2) => setTimeout(resolve2, delayInMs));
}
function createEventSourceParserStream() {
  let buffer = "";
  let event = void 0;
  let data = [];
  let lastEventId = void 0;
  let retry = void 0;
  function parseLine(line, controller) {
    if (line === "") {
      dispatchEvent(controller);
      return;
    }
    if (line.startsWith(":")) {
      return;
    }
    const colonIndex = line.indexOf(":");
    if (colonIndex === -1) {
      handleField(line, "");
      return;
    }
    const field = line.slice(0, colonIndex);
    const valueStart = colonIndex + 1;
    const value = valueStart < line.length && line[valueStart] === " " ? line.slice(valueStart + 1) : line.slice(valueStart);
    handleField(field, value);
  }
  function dispatchEvent(controller) {
    if (data.length > 0) {
      controller.enqueue({
        event,
        data: data.join("\n"),
        id: lastEventId,
        retry
      });
      data = [];
      event = void 0;
      retry = void 0;
    }
  }
  function handleField(field, value) {
    switch (field) {
      case "event":
        event = value;
        break;
      case "data":
        data.push(value);
        break;
      case "id":
        lastEventId = value;
        break;
      case "retry":
        const parsedRetry = parseInt(value, 10);
        if (!isNaN(parsedRetry)) {
          retry = parsedRetry;
        }
        break;
    }
  }
  return new TransformStream({
    transform(chunk, controller) {
      const { lines, incompleteLine } = splitLines(buffer, chunk);
      buffer = incompleteLine;
      for (let i = 0; i < lines.length; i++) {
        parseLine(lines[i], controller);
      }
    },
    flush(controller) {
      parseLine(buffer, controller);
      dispatchEvent(controller);
    }
  });
}
function splitLines(buffer, chunk) {
  const lines = [];
  let currentLine = buffer;
  for (let i = 0; i < chunk.length; ) {
    const char = chunk[i++];
    if (char === "\n") {
      lines.push(currentLine);
      currentLine = "";
    } else if (char === "\r") {
      lines.push(currentLine);
      currentLine = "";
      if (chunk[i] === "\n") {
        i++;
      }
    } else {
      currentLine += char;
    }
  }
  return { lines, incompleteLine: currentLine };
}
function extractResponseHeaders(response) {
  const headers = {};
  response.headers.forEach((value, key) => {
    headers[key] = value;
  });
  return headers;
}
var createIdGenerator = ({
  prefix,
  size: defaultSize = 16,
  alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
  separator = "-"
} = {}) => {
  const generator = customAlphabet(alphabet, defaultSize);
  if (prefix == null) {
    return generator;
  }
  if (alphabet.includes(separator)) {
    throw new InvalidArgumentError({
      argument: "separator",
      message: `The separator "${separator}" must not be part of the alphabet "${alphabet}".`
    });
  }
  return (size) => `${prefix}${separator}${generator(size)}`;
};
var generateId = createIdGenerator();
function getErrorMessage2(error) {
  if (error == null) {
    return "unknown error";
  }
  if (typeof error === "string") {
    return error;
  }
  if (error instanceof Error) {
    return error.message;
  }
  return JSON.stringify(error);
}
function removeUndefinedEntries(record) {
  return Object.fromEntries(
    Object.entries(record).filter(([_key, value]) => value != null)
  );
}
function isAbortError(error) {
  return error instanceof Error && (error.name === "AbortError" || error.name === "TimeoutError");
}
function loadApiKey({
  apiKey,
  environmentVariableName,
  apiKeyParameterName = "apiKey",
  description
}) {
  if (typeof apiKey === "string") {
    return apiKey;
  }
  if (apiKey != null) {
    throw new LoadAPIKeyError({
      message: `${description} API key must be a string.`
    });
  }
  if (typeof process === "undefined") {
    throw new LoadAPIKeyError({
      message: `${description} API key is missing. Pass it using the '${apiKeyParameterName}' parameter. Environment variables is not supported in this environment.`
    });
  }
  apiKey = process.env[environmentVariableName];
  if (apiKey == null) {
    throw new LoadAPIKeyError({
      message: `${description} API key is missing. Pass it using the '${apiKeyParameterName}' parameter or the ${environmentVariableName} environment variable.`
    });
  }
  if (typeof apiKey !== "string") {
    throw new LoadAPIKeyError({
      message: `${description} API key must be a string. The value of the ${environmentVariableName} environment variable is not a string.`
    });
  }
  return apiKey;
}
var validatorSymbol = Symbol.for("vercel.ai.validator");
function validator(validate) {
  return { [validatorSymbol]: true, validate };
}
function isValidator(value) {
  return typeof value === "object" && value !== null && validatorSymbol in value && value[validatorSymbol] === true && "validate" in value;
}
function asValidator(value) {
  return isValidator(value) ? value : zodValidator(value);
}
function zodValidator(zodSchema2) {
  return validator((value) => {
    const result = zodSchema2.safeParse(value);
    return result.success ? { success: true, value: result.data } : { success: false, error: result.error };
  });
}
function validateTypes({
  value,
  schema: inputSchema
}) {
  const result = safeValidateTypes({ value, schema: inputSchema });
  if (!result.success) {
    throw TypeValidationError.wrap({ value, cause: result.error });
  }
  return result.value;
}
function safeValidateTypes({
  value,
  schema
}) {
  const validator2 = asValidator(schema);
  try {
    if (validator2.validate == null) {
      return { success: true, value };
    }
    const result = validator2.validate(value);
    if (result.success) {
      return result;
    }
    return {
      success: false,
      error: TypeValidationError.wrap({ value, cause: result.error })
    };
  } catch (error) {
    return {
      success: false,
      error: TypeValidationError.wrap({ value, cause: error })
    };
  }
}
function parseJSON({
  text: text2,
  schema
}) {
  try {
    const value = import_secure_json_parse.default.parse(text2);
    if (schema == null) {
      return value;
    }
    return validateTypes({ value, schema });
  } catch (error) {
    if (JSONParseError.isInstance(error) || TypeValidationError.isInstance(error)) {
      throw error;
    }
    throw new JSONParseError({ text: text2, cause: error });
  }
}
function safeParseJSON({
  text: text2,
  schema
}) {
  try {
    const value = import_secure_json_parse.default.parse(text2);
    if (schema == null) {
      return { success: true, value, rawValue: value };
    }
    const validationResult = safeValidateTypes({ value, schema });
    return validationResult.success ? { ...validationResult, rawValue: value } : validationResult;
  } catch (error) {
    return {
      success: false,
      error: JSONParseError.isInstance(error) ? error : new JSONParseError({ text: text2, cause: error })
    };
  }
}
function isParsableJson(input) {
  try {
    import_secure_json_parse.default.parse(input);
    return true;
  } catch (e) {
    return false;
  }
}
function parseProviderOptions({
  provider,
  providerOptions,
  schema
}) {
  if ((providerOptions == null ? void 0 : providerOptions[provider]) == null) {
    return void 0;
  }
  const parsedProviderOptions = safeValidateTypes({
    value: providerOptions[provider],
    schema
  });
  if (!parsedProviderOptions.success) {
    throw new InvalidArgumentError({
      argument: "providerOptions",
      message: `invalid ${provider} provider options`,
      cause: parsedProviderOptions.error
    });
  }
  return parsedProviderOptions.value;
}
var getOriginalFetch2 = () => globalThis.fetch;
var postJsonToApi = async ({
  url,
  headers,
  body,
  failedResponseHandler,
  successfulResponseHandler,
  abortSignal,
  fetch: fetch2
}) => postToApi({
  url,
  headers: {
    "Content-Type": "application/json",
    ...headers
  },
  body: {
    content: JSON.stringify(body),
    values: body
  },
  failedResponseHandler,
  successfulResponseHandler,
  abortSignal,
  fetch: fetch2
});
var postFormDataToApi = async ({
  url,
  headers,
  formData,
  failedResponseHandler,
  successfulResponseHandler,
  abortSignal,
  fetch: fetch2
}) => postToApi({
  url,
  headers,
  body: {
    content: formData,
    values: Object.fromEntries(formData.entries())
  },
  failedResponseHandler,
  successfulResponseHandler,
  abortSignal,
  fetch: fetch2
});
var postToApi = async ({
  url,
  headers = {},
  body,
  successfulResponseHandler,
  failedResponseHandler,
  abortSignal,
  fetch: fetch2 = getOriginalFetch2()
}) => {
  try {
    const response = await fetch2(url, {
      method: "POST",
      headers: removeUndefinedEntries(headers),
      body: body.content,
      signal: abortSignal
    });
    const responseHeaders = extractResponseHeaders(response);
    if (!response.ok) {
      let errorInformation;
      try {
        errorInformation = await failedResponseHandler({
          response,
          url,
          requestBodyValues: body.values
        });
      } catch (error) {
        if (isAbortError(error) || APICallError.isInstance(error)) {
          throw error;
        }
        throw new APICallError({
          message: "Failed to process error response",
          cause: error,
          statusCode: response.status,
          url,
          responseHeaders,
          requestBodyValues: body.values
        });
      }
      throw errorInformation.value;
    }
    try {
      return await successfulResponseHandler({
        response,
        url,
        requestBodyValues: body.values
      });
    } catch (error) {
      if (error instanceof Error) {
        if (isAbortError(error) || APICallError.isInstance(error)) {
          throw error;
        }
      }
      throw new APICallError({
        message: "Failed to process successful response",
        cause: error,
        statusCode: response.status,
        url,
        responseHeaders,
        requestBodyValues: body.values
      });
    }
  } catch (error) {
    if (isAbortError(error)) {
      throw error;
    }
    if (error instanceof TypeError && error.message === "fetch failed") {
      const cause = error.cause;
      if (cause != null) {
        throw new APICallError({
          message: `Cannot connect to API: ${cause.message}`,
          cause,
          url,
          requestBodyValues: body.values,
          isRetryable: true
          // retry when network error
        });
      }
    }
    throw error;
  }
};
var createJsonErrorResponseHandler = ({
  errorSchema,
  errorToMessage,
  isRetryable
}) => async ({ response, url, requestBodyValues }) => {
  const responseBody = await response.text();
  const responseHeaders = extractResponseHeaders(response);
  if (responseBody.trim() === "") {
    return {
      responseHeaders,
      value: new APICallError({
        message: response.statusText,
        url,
        requestBodyValues,
        statusCode: response.status,
        responseHeaders,
        responseBody,
        isRetryable: isRetryable == null ? void 0 : isRetryable(response)
      })
    };
  }
  try {
    const parsedError = parseJSON({
      text: responseBody,
      schema: errorSchema
    });
    return {
      responseHeaders,
      value: new APICallError({
        message: errorToMessage(parsedError),
        url,
        requestBodyValues,
        statusCode: response.status,
        responseHeaders,
        responseBody,
        data: parsedError,
        isRetryable: isRetryable == null ? void 0 : isRetryable(response, parsedError)
      })
    };
  } catch (parseError) {
    return {
      responseHeaders,
      value: new APICallError({
        message: response.statusText,
        url,
        requestBodyValues,
        statusCode: response.status,
        responseHeaders,
        responseBody,
        isRetryable: isRetryable == null ? void 0 : isRetryable(response)
      })
    };
  }
};
var createEventSourceResponseHandler = (chunkSchema) => async ({ response }) => {
  const responseHeaders = extractResponseHeaders(response);
  if (response.body == null) {
    throw new EmptyResponseBodyError({});
  }
  return {
    responseHeaders,
    value: response.body.pipeThrough(new TextDecoderStream()).pipeThrough(createEventSourceParserStream()).pipeThrough(
      new TransformStream({
        transform({ data }, controller) {
          if (data === "[DONE]") {
            return;
          }
          controller.enqueue(
            safeParseJSON({
              text: data,
              schema: chunkSchema
            })
          );
        }
      })
    )
  };
};
var createJsonResponseHandler = (responseSchema) => async ({ response, url, requestBodyValues }) => {
  const responseBody = await response.text();
  const parsedResult = safeParseJSON({
    text: responseBody,
    schema: responseSchema
  });
  const responseHeaders = extractResponseHeaders(response);
  if (!parsedResult.success) {
    throw new APICallError({
      message: "Invalid JSON response",
      cause: parsedResult.error,
      statusCode: response.status,
      responseHeaders,
      responseBody,
      url,
      requestBodyValues
    });
  }
  return {
    responseHeaders,
    value: parsedResult.value,
    rawValue: parsedResult.rawValue
  };
};
var createBinaryResponseHandler = () => async ({ response, url, requestBodyValues }) => {
  const responseHeaders = extractResponseHeaders(response);
  if (!response.body) {
    throw new APICallError({
      message: "Response body is empty",
      url,
      requestBodyValues,
      statusCode: response.status,
      responseHeaders,
      responseBody: void 0
    });
  }
  try {
    const buffer = await response.arrayBuffer();
    return {
      responseHeaders,
      value: new Uint8Array(buffer)
    };
  } catch (error) {
    throw new APICallError({
      message: "Failed to read response as array buffer",
      url,
      requestBodyValues,
      statusCode: response.status,
      responseHeaders,
      responseBody: void 0,
      cause: error
    });
  }
};
var { btoa, atob: atob2 } = globalThis;
function convertBase64ToUint8Array(base64String) {
  const base64Url = base64String.replace(/-/g, "+").replace(/_/g, "/");
  const latin1string = atob2(base64Url);
  return Uint8Array.from(latin1string, (byte) => byte.codePointAt(0));
}
function convertUint8ArrayToBase64(array) {
  let latin1string = "";
  for (let i = 0; i < array.length; i++) {
    latin1string += String.fromCodePoint(array[i]);
  }
  return btoa(latin1string);
}
function withoutTrailingSlash(url) {
  return url == null ? void 0 : url.replace(/\/$/, "");
}

// ../../node_modules/.pnpm/@ai-sdk+ui-utils@1.2.11_zod@3.24.2/node_modules/@ai-sdk/ui-utils/dist/index.mjs
init_esm();

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/index.js
init_esm();

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/Options.js
init_esm();
var ignoreOverride = Symbol("Let zodToJsonSchema decide on which parser to use");
var defaultOptions = {
  name: void 0,
  $refStrategy: "root",
  basePath: ["#"],
  effectStrategy: "input",
  pipeStrategy: "all",
  dateStrategy: "format:date-time",
  mapStrategy: "entries",
  removeAdditionalStrategy: "passthrough",
  allowedAdditionalProperties: true,
  rejectedAdditionalProperties: false,
  definitionPath: "definitions",
  target: "jsonSchema7",
  strictUnions: false,
  definitions: {},
  errorMessages: false,
  markdownDescription: false,
  patternStrategy: "escape",
  applyRegexFlags: false,
  emailStrategy: "format:email",
  base64Strategy: "contentEncoding:base64",
  nameStrategy: "ref",
  openAiAnyTypeName: "OpenAiAnyType"
};
var getDefaultOptions = (options) => typeof options === "string" ? {
  ...defaultOptions,
  name: options
} : {
  ...defaultOptions,
  ...options
};

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/Refs.js
init_esm();
var getRefs = (options) => {
  const _options = getDefaultOptions(options);
  const currentPath = _options.name !== void 0 ? [..._options.basePath, _options.definitionPath, _options.name] : _options.basePath;
  return {
    ..._options,
    flags: { hasReferencedOpenAiAnyType: false },
    currentPath,
    propertyPath: void 0,
    seen: new Map(Object.entries(_options.definitions).map(([name17, def]) => [
      def._def,
      {
        def: def._def,
        path: [..._options.basePath, _options.definitionPath, name17],
        // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.
        jsonSchema: void 0
      }
    ]))
  };
};

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/errorMessages.js
init_esm();
function addErrorMessage(res, key, errorMessage, refs) {
  if (!refs?.errorMessages)
    return;
  if (errorMessage) {
    res.errorMessage = {
      ...res.errorMessage,
      [key]: errorMessage
    };
  }
}
function setResponseValueAndErrors(res, key, value, errorMessage, refs) {
  res[key] = value;
  addErrorMessage(res, key, errorMessage, refs);
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/getRelativePath.js
init_esm();
var getRelativePath = (pathA, pathB) => {
  let i = 0;
  for (; i < pathA.length && i < pathB.length; i++) {
    if (pathA[i] !== pathB[i])
      break;
  }
  return [(pathA.length - i).toString(), ...pathB.slice(i)].join("/");
};

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parseDef.js
init_esm();

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/selectParser.js
init_esm();

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/any.js
init_esm();
function parseAnyDef(refs) {
  if (refs.target !== "openAi") {
    return {};
  }
  const anyDefinitionPath = [
    ...refs.basePath,
    refs.definitionPath,
    refs.openAiAnyTypeName
  ];
  refs.flags.hasReferencedOpenAiAnyType = true;
  return {
    $ref: refs.$refStrategy === "relative" ? getRelativePath(anyDefinitionPath, refs.currentPath) : anyDefinitionPath.join("/")
  };
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/array.js
init_esm();
function parseArrayDef(def, refs) {
  const res = {
    type: "array"
  };
  if (def.type?._def && def.type?._def?.typeName !== ZodFirstPartyTypeKind.ZodAny) {
    res.items = parseDef(def.type._def, {
      ...refs,
      currentPath: [...refs.currentPath, "items"]
    });
  }
  if (def.minLength) {
    setResponseValueAndErrors(res, "minItems", def.minLength.value, def.minLength.message, refs);
  }
  if (def.maxLength) {
    setResponseValueAndErrors(res, "maxItems", def.maxLength.value, def.maxLength.message, refs);
  }
  if (def.exactLength) {
    setResponseValueAndErrors(res, "minItems", def.exactLength.value, def.exactLength.message, refs);
    setResponseValueAndErrors(res, "maxItems", def.exactLength.value, def.exactLength.message, refs);
  }
  return res;
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/bigint.js
init_esm();
function parseBigintDef(def, refs) {
  const res = {
    type: "integer",
    format: "int64"
  };
  if (!def.checks)
    return res;
  for (const check of def.checks) {
    switch (check.kind) {
      case "min":
        if (refs.target === "jsonSchema7") {
          if (check.inclusive) {
            setResponseValueAndErrors(res, "minimum", check.value, check.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMinimum", check.value, check.message, refs);
          }
        } else {
          if (!check.inclusive) {
            res.exclusiveMinimum = true;
          }
          setResponseValueAndErrors(res, "minimum", check.value, check.message, refs);
        }
        break;
      case "max":
        if (refs.target === "jsonSchema7") {
          if (check.inclusive) {
            setResponseValueAndErrors(res, "maximum", check.value, check.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMaximum", check.value, check.message, refs);
          }
        } else {
          if (!check.inclusive) {
            res.exclusiveMaximum = true;
          }
          setResponseValueAndErrors(res, "maximum", check.value, check.message, refs);
        }
        break;
      case "multipleOf":
        setResponseValueAndErrors(res, "multipleOf", check.value, check.message, refs);
        break;
    }
  }
  return res;
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/boolean.js
init_esm();
function parseBooleanDef() {
  return {
    type: "boolean"
  };
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/branded.js
init_esm();
function parseBrandedDef(_def, refs) {
  return parseDef(_def.type._def, refs);
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/catch.js
init_esm();
var parseCatchDef = (def, refs) => {
  return parseDef(def.innerType._def, refs);
};

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/date.js
init_esm();
function parseDateDef(def, refs, overrideDateStrategy) {
  const strategy = overrideDateStrategy ?? refs.dateStrategy;
  if (Array.isArray(strategy)) {
    return {
      anyOf: strategy.map((item, i) => parseDateDef(def, refs, item))
    };
  }
  switch (strategy) {
    case "string":
    case "format:date-time":
      return {
        type: "string",
        format: "date-time"
      };
    case "format:date":
      return {
        type: "string",
        format: "date"
      };
    case "integer":
      return integerDateParser(def, refs);
  }
}
var integerDateParser = (def, refs) => {
  const res = {
    type: "integer",
    format: "unix-time"
  };
  if (refs.target === "openApi3") {
    return res;
  }
  for (const check of def.checks) {
    switch (check.kind) {
      case "min":
        setResponseValueAndErrors(
          res,
          "minimum",
          check.value,
          // This is in milliseconds
          check.message,
          refs
        );
        break;
      case "max":
        setResponseValueAndErrors(
          res,
          "maximum",
          check.value,
          // This is in milliseconds
          check.message,
          refs
        );
        break;
    }
  }
  return res;
};

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/default.js
init_esm();
function parseDefaultDef(_def, refs) {
  return {
    ...parseDef(_def.innerType._def, refs),
    default: _def.defaultValue()
  };
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/effects.js
init_esm();
function parseEffectsDef(_def, refs) {
  return refs.effectStrategy === "input" ? parseDef(_def.schema._def, refs) : parseAnyDef(refs);
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/enum.js
init_esm();
function parseEnumDef(def) {
  return {
    type: "string",
    enum: Array.from(def.values)
  };
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/intersection.js
init_esm();
var isJsonSchema7AllOfType = (type) => {
  if ("type" in type && type.type === "string")
    return false;
  return "allOf" in type;
};
function parseIntersectionDef(def, refs) {
  const allOf = [
    parseDef(def.left._def, {
      ...refs,
      currentPath: [...refs.currentPath, "allOf", "0"]
    }),
    parseDef(def.right._def, {
      ...refs,
      currentPath: [...refs.currentPath, "allOf", "1"]
    })
  ].filter((x) => !!x);
  let unevaluatedProperties = refs.target === "jsonSchema2019-09" ? { unevaluatedProperties: false } : void 0;
  const mergedAllOf = [];
  allOf.forEach((schema) => {
    if (isJsonSchema7AllOfType(schema)) {
      mergedAllOf.push(...schema.allOf);
      if (schema.unevaluatedProperties === void 0) {
        unevaluatedProperties = void 0;
      }
    } else {
      let nestedSchema = schema;
      if ("additionalProperties" in schema && schema.additionalProperties === false) {
        const { additionalProperties, ...rest } = schema;
        nestedSchema = rest;
      } else {
        unevaluatedProperties = void 0;
      }
      mergedAllOf.push(nestedSchema);
    }
  });
  return mergedAllOf.length ? {
    allOf: mergedAllOf,
    ...unevaluatedProperties
  } : void 0;
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/literal.js
init_esm();
function parseLiteralDef(def, refs) {
  const parsedType = typeof def.value;
  if (parsedType !== "bigint" && parsedType !== "number" && parsedType !== "boolean" && parsedType !== "string") {
    return {
      type: Array.isArray(def.value) ? "array" : "object"
    };
  }
  if (refs.target === "openApi3") {
    return {
      type: parsedType === "bigint" ? "integer" : parsedType,
      enum: [def.value]
    };
  }
  return {
    type: parsedType === "bigint" ? "integer" : parsedType,
    const: def.value
  };
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/map.js
init_esm();

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/record.js
init_esm();

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/string.js
init_esm();
var emojiRegex2 = void 0;
var zodPatterns = {
  /**
   * `c` was changed to `[cC]` to replicate /i flag
   */
  cuid: /^[cC][^\s-]{8,}$/,
  cuid2: /^[0-9a-z]+$/,
  ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,
  /**
   * `a-z` was added to replicate /i flag
   */
  email: /^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,
  /**
   * Constructed a valid Unicode RegExp
   *
   * Lazily instantiate since this type of regex isn't supported
   * in all envs (e.g. React Native).
   *
   * See:
   * https://github.com/colinhacks/zod/issues/2433
   * Fix in Zod:
   * https://github.com/colinhacks/zod/commit/9340fd51e48576a75adc919bff65dbc4a5d4c99b
   */
  emoji: () => {
    if (emojiRegex2 === void 0) {
      emojiRegex2 = RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$", "u");
    }
    return emojiRegex2;
  },
  /**
   * Unused
   */
  uuid: /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/,
  /**
   * Unused
   */
  ipv4: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,
  ipv4Cidr: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,
  /**
   * Unused
   */
  ipv6: /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,
  ipv6Cidr: /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,
  base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,
  base64url: /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,
  nanoid: /^[a-zA-Z0-9_-]{21}$/,
  jwt: /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/
};
function parseStringDef(def, refs) {
  const res = {
    type: "string"
  };
  if (def.checks) {
    for (const check of def.checks) {
      switch (check.kind) {
        case "min":
          setResponseValueAndErrors(res, "minLength", typeof res.minLength === "number" ? Math.max(res.minLength, check.value) : check.value, check.message, refs);
          break;
        case "max":
          setResponseValueAndErrors(res, "maxLength", typeof res.maxLength === "number" ? Math.min(res.maxLength, check.value) : check.value, check.message, refs);
          break;
        case "email":
          switch (refs.emailStrategy) {
            case "format:email":
              addFormat(res, "email", check.message, refs);
              break;
            case "format:idn-email":
              addFormat(res, "idn-email", check.message, refs);
              break;
            case "pattern:zod":
              addPattern(res, zodPatterns.email, check.message, refs);
              break;
          }
          break;
        case "url":
          addFormat(res, "uri", check.message, refs);
          break;
        case "uuid":
          addFormat(res, "uuid", check.message, refs);
          break;
        case "regex":
          addPattern(res, check.regex, check.message, refs);
          break;
        case "cuid":
          addPattern(res, zodPatterns.cuid, check.message, refs);
          break;
        case "cuid2":
          addPattern(res, zodPatterns.cuid2, check.message, refs);
          break;
        case "startsWith":
          addPattern(res, RegExp(`^${escapeLiteralCheckValue(check.value, refs)}`), check.message, refs);
          break;
        case "endsWith":
          addPattern(res, RegExp(`${escapeLiteralCheckValue(check.value, refs)}$`), check.message, refs);
          break;
        case "datetime":
          addFormat(res, "date-time", check.message, refs);
          break;
        case "date":
          addFormat(res, "date", check.message, refs);
          break;
        case "time":
          addFormat(res, "time", check.message, refs);
          break;
        case "duration":
          addFormat(res, "duration", check.message, refs);
          break;
        case "length":
          setResponseValueAndErrors(res, "minLength", typeof res.minLength === "number" ? Math.max(res.minLength, check.value) : check.value, check.message, refs);
          setResponseValueAndErrors(res, "maxLength", typeof res.maxLength === "number" ? Math.min(res.maxLength, check.value) : check.value, check.message, refs);
          break;
        case "includes": {
          addPattern(res, RegExp(escapeLiteralCheckValue(check.value, refs)), check.message, refs);
          break;
        }
        case "ip": {
          if (check.version !== "v6") {
            addFormat(res, "ipv4", check.message, refs);
          }
          if (check.version !== "v4") {
            addFormat(res, "ipv6", check.message, refs);
          }
          break;
        }
        case "base64url":
          addPattern(res, zodPatterns.base64url, check.message, refs);
          break;
        case "jwt":
          addPattern(res, zodPatterns.jwt, check.message, refs);
          break;
        case "cidr": {
          if (check.version !== "v6") {
            addPattern(res, zodPatterns.ipv4Cidr, check.message, refs);
          }
          if (check.version !== "v4") {
            addPattern(res, zodPatterns.ipv6Cidr, check.message, refs);
          }
          break;
        }
        case "emoji":
          addPattern(res, zodPatterns.emoji(), check.message, refs);
          break;
        case "ulid": {
          addPattern(res, zodPatterns.ulid, check.message, refs);
          break;
        }
        case "base64": {
          switch (refs.base64Strategy) {
            case "format:binary": {
              addFormat(res, "binary", check.message, refs);
              break;
            }
            case "contentEncoding:base64": {
              setResponseValueAndErrors(res, "contentEncoding", "base64", check.message, refs);
              break;
            }
            case "pattern:zod": {
              addPattern(res, zodPatterns.base64, check.message, refs);
              break;
            }
          }
          break;
        }
        case "nanoid": {
          addPattern(res, zodPatterns.nanoid, check.message, refs);
        }
        case "toLowerCase":
        case "toUpperCase":
        case "trim":
          break;
        default:
          /* @__PURE__ */ ((_) => {
          })(check);
      }
    }
  }
  return res;
}
function escapeLiteralCheckValue(literal, refs) {
  return refs.patternStrategy === "escape" ? escapeNonAlphaNumeric(literal) : literal;
}
var ALPHA_NUMERIC = new Set("ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz0123456789");
function escapeNonAlphaNumeric(source) {
  let result = "";
  for (let i = 0; i < source.length; i++) {
    if (!ALPHA_NUMERIC.has(source[i])) {
      result += "\\";
    }
    result += source[i];
  }
  return result;
}
function addFormat(schema, value, message, refs) {
  if (schema.format || schema.anyOf?.some((x) => x.format)) {
    if (!schema.anyOf) {
      schema.anyOf = [];
    }
    if (schema.format) {
      schema.anyOf.push({
        format: schema.format,
        ...schema.errorMessage && refs.errorMessages && {
          errorMessage: { format: schema.errorMessage.format }
        }
      });
      delete schema.format;
      if (schema.errorMessage) {
        delete schema.errorMessage.format;
        if (Object.keys(schema.errorMessage).length === 0) {
          delete schema.errorMessage;
        }
      }
    }
    schema.anyOf.push({
      format: value,
      ...message && refs.errorMessages && { errorMessage: { format: message } }
    });
  } else {
    setResponseValueAndErrors(schema, "format", value, message, refs);
  }
}
function addPattern(schema, regex, message, refs) {
  if (schema.pattern || schema.allOf?.some((x) => x.pattern)) {
    if (!schema.allOf) {
      schema.allOf = [];
    }
    if (schema.pattern) {
      schema.allOf.push({
        pattern: schema.pattern,
        ...schema.errorMessage && refs.errorMessages && {
          errorMessage: { pattern: schema.errorMessage.pattern }
        }
      });
      delete schema.pattern;
      if (schema.errorMessage) {
        delete schema.errorMessage.pattern;
        if (Object.keys(schema.errorMessage).length === 0) {
          delete schema.errorMessage;
        }
      }
    }
    schema.allOf.push({
      pattern: stringifyRegExpWithFlags(regex, refs),
      ...message && refs.errorMessages && { errorMessage: { pattern: message } }
    });
  } else {
    setResponseValueAndErrors(schema, "pattern", stringifyRegExpWithFlags(regex, refs), message, refs);
  }
}
function stringifyRegExpWithFlags(regex, refs) {
  if (!refs.applyRegexFlags || !regex.flags) {
    return regex.source;
  }
  const flags = {
    i: regex.flags.includes("i"),
    m: regex.flags.includes("m"),
    s: regex.flags.includes("s")
    // `.` matches newlines
  };
  const source = flags.i ? regex.source.toLowerCase() : regex.source;
  let pattern = "";
  let isEscaped = false;
  let inCharGroup = false;
  let inCharRange = false;
  for (let i = 0; i < source.length; i++) {
    if (isEscaped) {
      pattern += source[i];
      isEscaped = false;
      continue;
    }
    if (flags.i) {
      if (inCharGroup) {
        if (source[i].match(/[a-z]/)) {
          if (inCharRange) {
            pattern += source[i];
            pattern += `${source[i - 2]}-${source[i]}`.toUpperCase();
            inCharRange = false;
          } else if (source[i + 1] === "-" && source[i + 2]?.match(/[a-z]/)) {
            pattern += source[i];
            inCharRange = true;
          } else {
            pattern += `${source[i]}${source[i].toUpperCase()}`;
          }
          continue;
        }
      } else if (source[i].match(/[a-z]/)) {
        pattern += `[${source[i]}${source[i].toUpperCase()}]`;
        continue;
      }
    }
    if (flags.m) {
      if (source[i] === "^") {
        pattern += `(^|(?<=[\r
]))`;
        continue;
      } else if (source[i] === "$") {
        pattern += `($|(?=[\r
]))`;
        continue;
      }
    }
    if (flags.s && source[i] === ".") {
      pattern += inCharGroup ? `${source[i]}\r
` : `[${source[i]}\r
]`;
      continue;
    }
    pattern += source[i];
    if (source[i] === "\\") {
      isEscaped = true;
    } else if (inCharGroup && source[i] === "]") {
      inCharGroup = false;
    } else if (!inCharGroup && source[i] === "[") {
      inCharGroup = true;
    }
  }
  try {
    new RegExp(pattern);
  } catch {
    console.warn(`Could not convert regex pattern at ${refs.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`);
    return regex.source;
  }
  return pattern;
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/record.js
function parseRecordDef(def, refs) {
  if (refs.target === "openAi") {
    console.warn("Warning: OpenAI may not support records in schemas! Try an array of key-value pairs instead.");
  }
  if (refs.target === "openApi3" && def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) {
    return {
      type: "object",
      required: def.keyType._def.values,
      properties: def.keyType._def.values.reduce((acc, key) => ({
        ...acc,
        [key]: parseDef(def.valueType._def, {
          ...refs,
          currentPath: [...refs.currentPath, "properties", key]
        }) ?? parseAnyDef(refs)
      }), {}),
      additionalProperties: refs.rejectedAdditionalProperties
    };
  }
  const schema = {
    type: "object",
    additionalProperties: parseDef(def.valueType._def, {
      ...refs,
      currentPath: [...refs.currentPath, "additionalProperties"]
    }) ?? refs.allowedAdditionalProperties
  };
  if (refs.target === "openApi3") {
    return schema;
  }
  if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodString && def.keyType._def.checks?.length) {
    const { type, ...keyType } = parseStringDef(def.keyType._def, refs);
    return {
      ...schema,
      propertyNames: keyType
    };
  } else if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) {
    return {
      ...schema,
      propertyNames: {
        enum: def.keyType._def.values
      }
    };
  } else if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodBranded && def.keyType._def.type._def.typeName === ZodFirstPartyTypeKind.ZodString && def.keyType._def.type._def.checks?.length) {
    const { type, ...keyType } = parseBrandedDef(def.keyType._def, refs);
    return {
      ...schema,
      propertyNames: keyType
    };
  }
  return schema;
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/map.js
function parseMapDef(def, refs) {
  if (refs.mapStrategy === "record") {
    return parseRecordDef(def, refs);
  }
  const keys = parseDef(def.keyType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "items", "items", "0"]
  }) || parseAnyDef(refs);
  const values = parseDef(def.valueType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "items", "items", "1"]
  }) || parseAnyDef(refs);
  return {
    type: "array",
    maxItems: 125,
    items: {
      type: "array",
      items: [keys, values],
      minItems: 2,
      maxItems: 2
    }
  };
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/nativeEnum.js
init_esm();
function parseNativeEnumDef(def) {
  const object2 = def.values;
  const actualKeys = Object.keys(def.values).filter((key) => {
    return typeof object2[object2[key]] !== "number";
  });
  const actualValues = actualKeys.map((key) => object2[key]);
  const parsedTypes = Array.from(new Set(actualValues.map((values) => typeof values)));
  return {
    type: parsedTypes.length === 1 ? parsedTypes[0] === "string" ? "string" : "number" : ["string", "number"],
    enum: actualValues
  };
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/never.js
init_esm();
function parseNeverDef(refs) {
  return refs.target === "openAi" ? void 0 : {
    not: parseAnyDef({
      ...refs,
      currentPath: [...refs.currentPath, "not"]
    })
  };
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/null.js
init_esm();
function parseNullDef(refs) {
  return refs.target === "openApi3" ? {
    enum: ["null"],
    nullable: true
  } : {
    type: "null"
  };
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/nullable.js
init_esm();

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/union.js
init_esm();
var primitiveMappings = {
  ZodString: "string",
  ZodNumber: "number",
  ZodBigInt: "integer",
  ZodBoolean: "boolean",
  ZodNull: "null"
};
function parseUnionDef(def, refs) {
  if (refs.target === "openApi3")
    return asAnyOf(def, refs);
  const options = def.options instanceof Map ? Array.from(def.options.values()) : def.options;
  if (options.every((x) => x._def.typeName in primitiveMappings && (!x._def.checks || !x._def.checks.length))) {
    const types = options.reduce((types2, x) => {
      const type = primitiveMappings[x._def.typeName];
      return type && !types2.includes(type) ? [...types2, type] : types2;
    }, []);
    return {
      type: types.length > 1 ? types : types[0]
    };
  } else if (options.every((x) => x._def.typeName === "ZodLiteral" && !x.description)) {
    const types = options.reduce((acc, x) => {
      const type = typeof x._def.value;
      switch (type) {
        case "string":
        case "number":
        case "boolean":
          return [...acc, type];
        case "bigint":
          return [...acc, "integer"];
        case "object":
          if (x._def.value === null)
            return [...acc, "null"];
        case "symbol":
        case "undefined":
        case "function":
        default:
          return acc;
      }
    }, []);
    if (types.length === options.length) {
      const uniqueTypes = types.filter((x, i, a) => a.indexOf(x) === i);
      return {
        type: uniqueTypes.length > 1 ? uniqueTypes : uniqueTypes[0],
        enum: options.reduce((acc, x) => {
          return acc.includes(x._def.value) ? acc : [...acc, x._def.value];
        }, [])
      };
    }
  } else if (options.every((x) => x._def.typeName === "ZodEnum")) {
    return {
      type: "string",
      enum: options.reduce((acc, x) => [
        ...acc,
        ...x._def.values.filter((x2) => !acc.includes(x2))
      ], [])
    };
  }
  return asAnyOf(def, refs);
}
var asAnyOf = (def, refs) => {
  const anyOf = (def.options instanceof Map ? Array.from(def.options.values()) : def.options).map((x, i) => parseDef(x._def, {
    ...refs,
    currentPath: [...refs.currentPath, "anyOf", `${i}`]
  })).filter((x) => !!x && (!refs.strictUnions || typeof x === "object" && Object.keys(x).length > 0));
  return anyOf.length ? { anyOf } : void 0;
};

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/nullable.js
function parseNullableDef(def, refs) {
  if (["ZodString", "ZodNumber", "ZodBigInt", "ZodBoolean", "ZodNull"].includes(def.innerType._def.typeName) && (!def.innerType._def.checks || !def.innerType._def.checks.length)) {
    if (refs.target === "openApi3") {
      return {
        type: primitiveMappings[def.innerType._def.typeName],
        nullable: true
      };
    }
    return {
      type: [
        primitiveMappings[def.innerType._def.typeName],
        "null"
      ]
    };
  }
  if (refs.target === "openApi3") {
    const base2 = parseDef(def.innerType._def, {
      ...refs,
      currentPath: [...refs.currentPath]
    });
    if (base2 && "$ref" in base2)
      return { allOf: [base2], nullable: true };
    return base2 && { ...base2, nullable: true };
  }
  const base = parseDef(def.innerType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "anyOf", "0"]
  });
  return base && { anyOf: [base, { type: "null" }] };
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/number.js
init_esm();
function parseNumberDef(def, refs) {
  const res = {
    type: "number"
  };
  if (!def.checks)
    return res;
  for (const check of def.checks) {
    switch (check.kind) {
      case "int":
        res.type = "integer";
        addErrorMessage(res, "type", check.message, refs);
        break;
      case "min":
        if (refs.target === "jsonSchema7") {
          if (check.inclusive) {
            setResponseValueAndErrors(res, "minimum", check.value, check.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMinimum", check.value, check.message, refs);
          }
        } else {
          if (!check.inclusive) {
            res.exclusiveMinimum = true;
          }
          setResponseValueAndErrors(res, "minimum", check.value, check.message, refs);
        }
        break;
      case "max":
        if (refs.target === "jsonSchema7") {
          if (check.inclusive) {
            setResponseValueAndErrors(res, "maximum", check.value, check.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMaximum", check.value, check.message, refs);
          }
        } else {
          if (!check.inclusive) {
            res.exclusiveMaximum = true;
          }
          setResponseValueAndErrors(res, "maximum", check.value, check.message, refs);
        }
        break;
      case "multipleOf":
        setResponseValueAndErrors(res, "multipleOf", check.value, check.message, refs);
        break;
    }
  }
  return res;
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/object.js
init_esm();
function parseObjectDef(def, refs) {
  const forceOptionalIntoNullable = refs.target === "openAi";
  const result = {
    type: "object",
    properties: {}
  };
  const required = [];
  const shape = def.shape();
  for (const propName in shape) {
    let propDef = shape[propName];
    if (propDef === void 0 || propDef._def === void 0) {
      continue;
    }
    let propOptional = safeIsOptional(propDef);
    if (propOptional && forceOptionalIntoNullable) {
      if (propDef._def.typeName === "ZodOptional") {
        propDef = propDef._def.innerType;
      }
      if (!propDef.isNullable()) {
        propDef = propDef.nullable();
      }
      propOptional = false;
    }
    const parsedDef = parseDef(propDef._def, {
      ...refs,
      currentPath: [...refs.currentPath, "properties", propName],
      propertyPath: [...refs.currentPath, "properties", propName]
    });
    if (parsedDef === void 0) {
      continue;
    }
    result.properties[propName] = parsedDef;
    if (!propOptional) {
      required.push(propName);
    }
  }
  if (required.length) {
    result.required = required;
  }
  const additionalProperties = decideAdditionalProperties(def, refs);
  if (additionalProperties !== void 0) {
    result.additionalProperties = additionalProperties;
  }
  return result;
}
function decideAdditionalProperties(def, refs) {
  if (def.catchall._def.typeName !== "ZodNever") {
    return parseDef(def.catchall._def, {
      ...refs,
      currentPath: [...refs.currentPath, "additionalProperties"]
    });
  }
  switch (def.unknownKeys) {
    case "passthrough":
      return refs.allowedAdditionalProperties;
    case "strict":
      return refs.rejectedAdditionalProperties;
    case "strip":
      return refs.removeAdditionalStrategy === "strict" ? refs.allowedAdditionalProperties : refs.rejectedAdditionalProperties;
  }
}
function safeIsOptional(schema) {
  try {
    return schema.isOptional();
  } catch {
    return true;
  }
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/optional.js
init_esm();
var parseOptionalDef = (def, refs) => {
  if (refs.currentPath.toString() === refs.propertyPath?.toString()) {
    return parseDef(def.innerType._def, refs);
  }
  const innerSchema = parseDef(def.innerType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "anyOf", "1"]
  });
  return innerSchema ? {
    anyOf: [
      {
        not: parseAnyDef(refs)
      },
      innerSchema
    ]
  } : parseAnyDef(refs);
};

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/pipeline.js
init_esm();
var parsePipelineDef = (def, refs) => {
  if (refs.pipeStrategy === "input") {
    return parseDef(def.in._def, refs);
  } else if (refs.pipeStrategy === "output") {
    return parseDef(def.out._def, refs);
  }
  const a = parseDef(def.in._def, {
    ...refs,
    currentPath: [...refs.currentPath, "allOf", "0"]
  });
  const b = parseDef(def.out._def, {
    ...refs,
    currentPath: [...refs.currentPath, "allOf", a ? "1" : "0"]
  });
  return {
    allOf: [a, b].filter((x) => x !== void 0)
  };
};

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/promise.js
init_esm();
function parsePromiseDef(def, refs) {
  return parseDef(def.type._def, refs);
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/set.js
init_esm();
function parseSetDef(def, refs) {
  const items = parseDef(def.valueType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "items"]
  });
  const schema = {
    type: "array",
    uniqueItems: true,
    items
  };
  if (def.minSize) {
    setResponseValueAndErrors(schema, "minItems", def.minSize.value, def.minSize.message, refs);
  }
  if (def.maxSize) {
    setResponseValueAndErrors(schema, "maxItems", def.maxSize.value, def.maxSize.message, refs);
  }
  return schema;
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/tuple.js
init_esm();
function parseTupleDef(def, refs) {
  if (def.rest) {
    return {
      type: "array",
      minItems: def.items.length,
      items: def.items.map((x, i) => parseDef(x._def, {
        ...refs,
        currentPath: [...refs.currentPath, "items", `${i}`]
      })).reduce((acc, x) => x === void 0 ? acc : [...acc, x], []),
      additionalItems: parseDef(def.rest._def, {
        ...refs,
        currentPath: [...refs.currentPath, "additionalItems"]
      })
    };
  } else {
    return {
      type: "array",
      minItems: def.items.length,
      maxItems: def.items.length,
      items: def.items.map((x, i) => parseDef(x._def, {
        ...refs,
        currentPath: [...refs.currentPath, "items", `${i}`]
      })).reduce((acc, x) => x === void 0 ? acc : [...acc, x], [])
    };
  }
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/undefined.js
init_esm();
function parseUndefinedDef(refs) {
  return {
    not: parseAnyDef(refs)
  };
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/unknown.js
init_esm();
function parseUnknownDef(refs) {
  return parseAnyDef(refs);
}

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parsers/readonly.js
init_esm();
var parseReadonlyDef = (def, refs) => {
  return parseDef(def.innerType._def, refs);
};

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/selectParser.js
var selectParser = (def, typeName, refs) => {
  switch (typeName) {
    case ZodFirstPartyTypeKind.ZodString:
      return parseStringDef(def, refs);
    case ZodFirstPartyTypeKind.ZodNumber:
      return parseNumberDef(def, refs);
    case ZodFirstPartyTypeKind.ZodObject:
      return parseObjectDef(def, refs);
    case ZodFirstPartyTypeKind.ZodBigInt:
      return parseBigintDef(def, refs);
    case ZodFirstPartyTypeKind.ZodBoolean:
      return parseBooleanDef();
    case ZodFirstPartyTypeKind.ZodDate:
      return parseDateDef(def, refs);
    case ZodFirstPartyTypeKind.ZodUndefined:
      return parseUndefinedDef(refs);
    case ZodFirstPartyTypeKind.ZodNull:
      return parseNullDef(refs);
    case ZodFirstPartyTypeKind.ZodArray:
      return parseArrayDef(def, refs);
    case ZodFirstPartyTypeKind.ZodUnion:
    case ZodFirstPartyTypeKind.ZodDiscriminatedUnion:
      return parseUnionDef(def, refs);
    case ZodFirstPartyTypeKind.ZodIntersection:
      return parseIntersectionDef(def, refs);
    case ZodFirstPartyTypeKind.ZodTuple:
      return parseTupleDef(def, refs);
    case ZodFirstPartyTypeKind.ZodRecord:
      return parseRecordDef(def, refs);
    case ZodFirstPartyTypeKind.ZodLiteral:
      return parseLiteralDef(def, refs);
    case ZodFirstPartyTypeKind.ZodEnum:
      return parseEnumDef(def);
    case ZodFirstPartyTypeKind.ZodNativeEnum:
      return parseNativeEnumDef(def);
    case ZodFirstPartyTypeKind.ZodNullable:
      return parseNullableDef(def, refs);
    case ZodFirstPartyTypeKind.ZodOptional:
      return parseOptionalDef(def, refs);
    case ZodFirstPartyTypeKind.ZodMap:
      return parseMapDef(def, refs);
    case ZodFirstPartyTypeKind.ZodSet:
      return parseSetDef(def, refs);
    case ZodFirstPartyTypeKind.ZodLazy:
      return () => def.getter()._def;
    case ZodFirstPartyTypeKind.ZodPromise:
      return parsePromiseDef(def, refs);
    case ZodFirstPartyTypeKind.ZodNaN:
    case ZodFirstPartyTypeKind.ZodNever:
      return parseNeverDef(refs);
    case ZodFirstPartyTypeKind.ZodEffects:
      return parseEffectsDef(def, refs);
    case ZodFirstPartyTypeKind.ZodAny:
      return parseAnyDef(refs);
    case ZodFirstPartyTypeKind.ZodUnknown:
      return parseUnknownDef(refs);
    case ZodFirstPartyTypeKind.ZodDefault:
      return parseDefaultDef(def, refs);
    case ZodFirstPartyTypeKind.ZodBranded:
      return parseBrandedDef(def, refs);
    case ZodFirstPartyTypeKind.ZodReadonly:
      return parseReadonlyDef(def, refs);
    case ZodFirstPartyTypeKind.ZodCatch:
      return parseCatchDef(def, refs);
    case ZodFirstPartyTypeKind.ZodPipeline:
      return parsePipelineDef(def, refs);
    case ZodFirstPartyTypeKind.ZodFunction:
    case ZodFirstPartyTypeKind.ZodVoid:
    case ZodFirstPartyTypeKind.ZodSymbol:
      return void 0;
    default:
      return /* @__PURE__ */ ((_) => void 0)(typeName);
  }
};

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parseDef.js
function parseDef(def, refs, forceResolution = false) {
  const seenItem = refs.seen.get(def);
  if (refs.override) {
    const overrideResult = refs.override?.(def, refs, seenItem, forceResolution);
    if (overrideResult !== ignoreOverride) {
      return overrideResult;
    }
  }
  if (seenItem && !forceResolution) {
    const seenSchema = get$ref(seenItem, refs);
    if (seenSchema !== void 0) {
      return seenSchema;
    }
  }
  const newItem = { def, path: refs.currentPath, jsonSchema: void 0 };
  refs.seen.set(def, newItem);
  const jsonSchemaOrGetter = selectParser(def, def.typeName, refs);
  const jsonSchema2 = typeof jsonSchemaOrGetter === "function" ? parseDef(jsonSchemaOrGetter(), refs) : jsonSchemaOrGetter;
  if (jsonSchema2) {
    addMeta(def, refs, jsonSchema2);
  }
  if (refs.postProcess) {
    const postProcessResult = refs.postProcess(jsonSchema2, def, refs);
    newItem.jsonSchema = jsonSchema2;
    return postProcessResult;
  }
  newItem.jsonSchema = jsonSchema2;
  return jsonSchema2;
}
var get$ref = (item, refs) => {
  switch (refs.$refStrategy) {
    case "root":
      return { $ref: item.path.join("/") };
    case "relative":
      return { $ref: getRelativePath(refs.currentPath, item.path) };
    case "none":
    case "seen": {
      if (item.path.length < refs.currentPath.length && item.path.every((value, index) => refs.currentPath[index] === value)) {
        console.warn(`Recursive reference detected at ${refs.currentPath.join("/")}! Defaulting to any`);
        return parseAnyDef(refs);
      }
      return refs.$refStrategy === "seen" ? parseAnyDef(refs) : void 0;
    }
  }
};
var addMeta = (def, refs, jsonSchema2) => {
  if (def.description) {
    jsonSchema2.description = def.description;
    if (refs.markdownDescription) {
      jsonSchema2.markdownDescription = def.description;
    }
  }
  return jsonSchema2;
};

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/parseTypes.js
init_esm();

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/zodToJsonSchema.js
init_esm();
var zodToJsonSchema = (schema, options) => {
  const refs = getRefs(options);
  let definitions = typeof options === "object" && options.definitions ? Object.entries(options.definitions).reduce((acc, [name18, schema2]) => ({
    ...acc,
    [name18]: parseDef(schema2._def, {
      ...refs,
      currentPath: [...refs.basePath, refs.definitionPath, name18]
    }, true) ?? parseAnyDef(refs)
  }), {}) : void 0;
  const name17 = typeof options === "string" ? options : options?.nameStrategy === "title" ? void 0 : options?.name;
  const main = parseDef(schema._def, name17 === void 0 ? refs : {
    ...refs,
    currentPath: [...refs.basePath, refs.definitionPath, name17]
  }, false) ?? parseAnyDef(refs);
  const title = typeof options === "object" && options.name !== void 0 && options.nameStrategy === "title" ? options.name : void 0;
  if (title !== void 0) {
    main.title = title;
  }
  if (refs.flags.hasReferencedOpenAiAnyType) {
    if (!definitions) {
      definitions = {};
    }
    if (!definitions[refs.openAiAnyTypeName]) {
      definitions[refs.openAiAnyTypeName] = {
        // Skipping "object" as no properties can be defined and additionalProperties must be "false"
        type: ["string", "number", "integer", "boolean", "array", "null"],
        items: {
          $ref: refs.$refStrategy === "relative" ? "1" : [
            ...refs.basePath,
            refs.definitionPath,
            refs.openAiAnyTypeName
          ].join("/")
        }
      };
    }
  }
  const combined = name17 === void 0 ? definitions ? {
    ...main,
    [refs.definitionPath]: definitions
  } : main : {
    $ref: [
      ...refs.$refStrategy === "relative" ? [] : refs.basePath,
      refs.definitionPath,
      name17
    ].join("/"),
    [refs.definitionPath]: {
      ...definitions,
      [name17]: main
    }
  };
  if (refs.target === "jsonSchema7") {
    combined.$schema = "http://json-schema.org/draft-07/schema#";
  } else if (refs.target === "jsonSchema2019-09" || refs.target === "openAi") {
    combined.$schema = "https://json-schema.org/draft/2019-09/schema#";
  }
  if (refs.target === "openAi" && ("anyOf" in combined || "oneOf" in combined || "allOf" in combined || "type" in combined && Array.isArray(combined.type))) {
    console.warn("Warning: OpenAI may not support schemas with unions as roots! Try wrapping it in an object property.");
  }
  return combined;
};

// ../../node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.24.2/node_modules/zod-to-json-schema/dist/esm/index.js
var esm_default = zodToJsonSchema;

// ../../node_modules/.pnpm/@ai-sdk+ui-utils@1.2.11_zod@3.24.2/node_modules/@ai-sdk/ui-utils/dist/index.mjs
var textStreamPart = {
  code: "0",
  name: "text",
  parse: (value) => {
    if (typeof value !== "string") {
      throw new Error('"text" parts expect a string value.');
    }
    return { type: "text", value };
  }
};
var errorStreamPart = {
  code: "3",
  name: "error",
  parse: (value) => {
    if (typeof value !== "string") {
      throw new Error('"error" parts expect a string value.');
    }
    return { type: "error", value };
  }
};
var assistantMessageStreamPart = {
  code: "4",
  name: "assistant_message",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("id" in value) || !("role" in value) || !("content" in value) || typeof value.id !== "string" || typeof value.role !== "string" || value.role !== "assistant" || !Array.isArray(value.content) || !value.content.every(
      (item) => item != null && typeof item === "object" && "type" in item && item.type === "text" && "text" in item && item.text != null && typeof item.text === "object" && "value" in item.text && typeof item.text.value === "string"
    )) {
      throw new Error(
        '"assistant_message" parts expect an object with an "id", "role", and "content" property.'
      );
    }
    return {
      type: "assistant_message",
      value
    };
  }
};
var assistantControlDataStreamPart = {
  code: "5",
  name: "assistant_control_data",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("threadId" in value) || !("messageId" in value) || typeof value.threadId !== "string" || typeof value.messageId !== "string") {
      throw new Error(
        '"assistant_control_data" parts expect an object with a "threadId" and "messageId" property.'
      );
    }
    return {
      type: "assistant_control_data",
      value: {
        threadId: value.threadId,
        messageId: value.messageId
      }
    };
  }
};
var dataMessageStreamPart = {
  code: "6",
  name: "data_message",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("role" in value) || !("data" in value) || typeof value.role !== "string" || value.role !== "data") {
      throw new Error(
        '"data_message" parts expect an object with a "role" and "data" property.'
      );
    }
    return {
      type: "data_message",
      value
    };
  }
};
var assistantStreamParts = [
  textStreamPart,
  errorStreamPart,
  assistantMessageStreamPart,
  assistantControlDataStreamPart,
  dataMessageStreamPart
];
var assistantStreamPartsByCode = {
  [textStreamPart.code]: textStreamPart,
  [errorStreamPart.code]: errorStreamPart,
  [assistantMessageStreamPart.code]: assistantMessageStreamPart,
  [assistantControlDataStreamPart.code]: assistantControlDataStreamPart,
  [dataMessageStreamPart.code]: dataMessageStreamPart
};
var StreamStringPrefixes = {
  [textStreamPart.name]: textStreamPart.code,
  [errorStreamPart.name]: errorStreamPart.code,
  [assistantMessageStreamPart.name]: assistantMessageStreamPart.code,
  [assistantControlDataStreamPart.name]: assistantControlDataStreamPart.code,
  [dataMessageStreamPart.name]: dataMessageStreamPart.code
};
var validCodes = assistantStreamParts.map((part) => part.code);
function fixJson(input) {
  const stack = ["ROOT"];
  let lastValidIndex = -1;
  let literalStart = null;
  function processValueStart(char, i, swapState) {
    {
      switch (char) {
        case '"': {
          lastValidIndex = i;
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_STRING");
          break;
        }
        case "f":
        case "t":
        case "n": {
          lastValidIndex = i;
          literalStart = i;
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_LITERAL");
          break;
        }
        case "-": {
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_NUMBER");
          break;
        }
        case "0":
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9": {
          lastValidIndex = i;
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_NUMBER");
          break;
        }
        case "{": {
          lastValidIndex = i;
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_OBJECT_START");
          break;
        }
        case "[": {
          lastValidIndex = i;
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_ARRAY_START");
          break;
        }
      }
    }
  }
  function processAfterObjectValue(char, i) {
    switch (char) {
      case ",": {
        stack.pop();
        stack.push("INSIDE_OBJECT_AFTER_COMMA");
        break;
      }
      case "}": {
        lastValidIndex = i;
        stack.pop();
        break;
      }
    }
  }
  function processAfterArrayValue(char, i) {
    switch (char) {
      case ",": {
        stack.pop();
        stack.push("INSIDE_ARRAY_AFTER_COMMA");
        break;
      }
      case "]": {
        lastValidIndex = i;
        stack.pop();
        break;
      }
    }
  }
  for (let i = 0; i < input.length; i++) {
    const char = input[i];
    const currentState = stack[stack.length - 1];
    switch (currentState) {
      case "ROOT":
        processValueStart(char, i, "FINISH");
        break;
      case "INSIDE_OBJECT_START": {
        switch (char) {
          case '"': {
            stack.pop();
            stack.push("INSIDE_OBJECT_KEY");
            break;
          }
          case "}": {
            lastValidIndex = i;
            stack.pop();
            break;
          }
        }
        break;
      }
      case "INSIDE_OBJECT_AFTER_COMMA": {
        switch (char) {
          case '"': {
            stack.pop();
            stack.push("INSIDE_OBJECT_KEY");
            break;
          }
        }
        break;
      }
      case "INSIDE_OBJECT_KEY": {
        switch (char) {
          case '"': {
            stack.pop();
            stack.push("INSIDE_OBJECT_AFTER_KEY");
            break;
          }
        }
        break;
      }
      case "INSIDE_OBJECT_AFTER_KEY": {
        switch (char) {
          case ":": {
            stack.pop();
            stack.push("INSIDE_OBJECT_BEFORE_VALUE");
            break;
          }
        }
        break;
      }
      case "INSIDE_OBJECT_BEFORE_VALUE": {
        processValueStart(char, i, "INSIDE_OBJECT_AFTER_VALUE");
        break;
      }
      case "INSIDE_OBJECT_AFTER_VALUE": {
        processAfterObjectValue(char, i);
        break;
      }
      case "INSIDE_STRING": {
        switch (char) {
          case '"': {
            stack.pop();
            lastValidIndex = i;
            break;
          }
          case "\\": {
            stack.push("INSIDE_STRING_ESCAPE");
            break;
          }
          default: {
            lastValidIndex = i;
          }
        }
        break;
      }
      case "INSIDE_ARRAY_START": {
        switch (char) {
          case "]": {
            lastValidIndex = i;
            stack.pop();
            break;
          }
          default: {
            lastValidIndex = i;
            processValueStart(char, i, "INSIDE_ARRAY_AFTER_VALUE");
            break;
          }
        }
        break;
      }
      case "INSIDE_ARRAY_AFTER_VALUE": {
        switch (char) {
          case ",": {
            stack.pop();
            stack.push("INSIDE_ARRAY_AFTER_COMMA");
            break;
          }
          case "]": {
            lastValidIndex = i;
            stack.pop();
            break;
          }
          default: {
            lastValidIndex = i;
            break;
          }
        }
        break;
      }
      case "INSIDE_ARRAY_AFTER_COMMA": {
        processValueStart(char, i, "INSIDE_ARRAY_AFTER_VALUE");
        break;
      }
      case "INSIDE_STRING_ESCAPE": {
        stack.pop();
        lastValidIndex = i;
        break;
      }
      case "INSIDE_NUMBER": {
        switch (char) {
          case "0":
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9": {
            lastValidIndex = i;
            break;
          }
          case "e":
          case "E":
          case "-":
          case ".": {
            break;
          }
          case ",": {
            stack.pop();
            if (stack[stack.length - 1] === "INSIDE_ARRAY_AFTER_VALUE") {
              processAfterArrayValue(char, i);
            }
            if (stack[stack.length - 1] === "INSIDE_OBJECT_AFTER_VALUE") {
              processAfterObjectValue(char, i);
            }
            break;
          }
          case "}": {
            stack.pop();
            if (stack[stack.length - 1] === "INSIDE_OBJECT_AFTER_VALUE") {
              processAfterObjectValue(char, i);
            }
            break;
          }
          case "]": {
            stack.pop();
            if (stack[stack.length - 1] === "INSIDE_ARRAY_AFTER_VALUE") {
              processAfterArrayValue(char, i);
            }
            break;
          }
          default: {
            stack.pop();
            break;
          }
        }
        break;
      }
      case "INSIDE_LITERAL": {
        const partialLiteral = input.substring(literalStart, i + 1);
        if (!"false".startsWith(partialLiteral) && !"true".startsWith(partialLiteral) && !"null".startsWith(partialLiteral)) {
          stack.pop();
          if (stack[stack.length - 1] === "INSIDE_OBJECT_AFTER_VALUE") {
            processAfterObjectValue(char, i);
          } else if (stack[stack.length - 1] === "INSIDE_ARRAY_AFTER_VALUE") {
            processAfterArrayValue(char, i);
          }
        } else {
          lastValidIndex = i;
        }
        break;
      }
    }
  }
  let result = input.slice(0, lastValidIndex + 1);
  for (let i = stack.length - 1; i >= 0; i--) {
    const state = stack[i];
    switch (state) {
      case "INSIDE_STRING": {
        result += '"';
        break;
      }
      case "INSIDE_OBJECT_KEY":
      case "INSIDE_OBJECT_AFTER_KEY":
      case "INSIDE_OBJECT_AFTER_COMMA":
      case "INSIDE_OBJECT_START":
      case "INSIDE_OBJECT_BEFORE_VALUE":
      case "INSIDE_OBJECT_AFTER_VALUE": {
        result += "}";
        break;
      }
      case "INSIDE_ARRAY_START":
      case "INSIDE_ARRAY_AFTER_COMMA":
      case "INSIDE_ARRAY_AFTER_VALUE": {
        result += "]";
        break;
      }
      case "INSIDE_LITERAL": {
        const partialLiteral = input.substring(literalStart, input.length);
        if ("true".startsWith(partialLiteral)) {
          result += "true".slice(partialLiteral.length);
        } else if ("false".startsWith(partialLiteral)) {
          result += "false".slice(partialLiteral.length);
        } else if ("null".startsWith(partialLiteral)) {
          result += "null".slice(partialLiteral.length);
        }
      }
    }
  }
  return result;
}
function parsePartialJson(jsonText) {
  if (jsonText === void 0) {
    return { value: void 0, state: "undefined-input" };
  }
  let result = safeParseJSON({ text: jsonText });
  if (result.success) {
    return { value: result.value, state: "successful-parse" };
  }
  result = safeParseJSON({ text: fixJson(jsonText) });
  if (result.success) {
    return { value: result.value, state: "repaired-parse" };
  }
  return { value: void 0, state: "failed-parse" };
}
var textStreamPart2 = {
  code: "0",
  name: "text",
  parse: (value) => {
    if (typeof value !== "string") {
      throw new Error('"text" parts expect a string value.');
    }
    return { type: "text", value };
  }
};
var dataStreamPart = {
  code: "2",
  name: "data",
  parse: (value) => {
    if (!Array.isArray(value)) {
      throw new Error('"data" parts expect an array value.');
    }
    return { type: "data", value };
  }
};
var errorStreamPart2 = {
  code: "3",
  name: "error",
  parse: (value) => {
    if (typeof value !== "string") {
      throw new Error('"error" parts expect a string value.');
    }
    return { type: "error", value };
  }
};
var messageAnnotationsStreamPart = {
  code: "8",
  name: "message_annotations",
  parse: (value) => {
    if (!Array.isArray(value)) {
      throw new Error('"message_annotations" parts expect an array value.');
    }
    return { type: "message_annotations", value };
  }
};
var toolCallStreamPart = {
  code: "9",
  name: "tool_call",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("toolCallId" in value) || typeof value.toolCallId !== "string" || !("toolName" in value) || typeof value.toolName !== "string" || !("args" in value) || typeof value.args !== "object") {
      throw new Error(
        '"tool_call" parts expect an object with a "toolCallId", "toolName", and "args" property.'
      );
    }
    return {
      type: "tool_call",
      value
    };
  }
};
var toolResultStreamPart = {
  code: "a",
  name: "tool_result",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("toolCallId" in value) || typeof value.toolCallId !== "string" || !("result" in value)) {
      throw new Error(
        '"tool_result" parts expect an object with a "toolCallId" and a "result" property.'
      );
    }
    return {
      type: "tool_result",
      value
    };
  }
};
var toolCallStreamingStartStreamPart = {
  code: "b",
  name: "tool_call_streaming_start",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("toolCallId" in value) || typeof value.toolCallId !== "string" || !("toolName" in value) || typeof value.toolName !== "string") {
      throw new Error(
        '"tool_call_streaming_start" parts expect an object with a "toolCallId" and "toolName" property.'
      );
    }
    return {
      type: "tool_call_streaming_start",
      value
    };
  }
};
var toolCallDeltaStreamPart = {
  code: "c",
  name: "tool_call_delta",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("toolCallId" in value) || typeof value.toolCallId !== "string" || !("argsTextDelta" in value) || typeof value.argsTextDelta !== "string") {
      throw new Error(
        '"tool_call_delta" parts expect an object with a "toolCallId" and "argsTextDelta" property.'
      );
    }
    return {
      type: "tool_call_delta",
      value
    };
  }
};
var finishMessageStreamPart = {
  code: "d",
  name: "finish_message",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("finishReason" in value) || typeof value.finishReason !== "string") {
      throw new Error(
        '"finish_message" parts expect an object with a "finishReason" property.'
      );
    }
    const result = {
      finishReason: value.finishReason
    };
    if ("usage" in value && value.usage != null && typeof value.usage === "object" && "promptTokens" in value.usage && "completionTokens" in value.usage) {
      result.usage = {
        promptTokens: typeof value.usage.promptTokens === "number" ? value.usage.promptTokens : Number.NaN,
        completionTokens: typeof value.usage.completionTokens === "number" ? value.usage.completionTokens : Number.NaN
      };
    }
    return {
      type: "finish_message",
      value: result
    };
  }
};
var finishStepStreamPart = {
  code: "e",
  name: "finish_step",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("finishReason" in value) || typeof value.finishReason !== "string") {
      throw new Error(
        '"finish_step" parts expect an object with a "finishReason" property.'
      );
    }
    const result = {
      finishReason: value.finishReason,
      isContinued: false
    };
    if ("usage" in value && value.usage != null && typeof value.usage === "object" && "promptTokens" in value.usage && "completionTokens" in value.usage) {
      result.usage = {
        promptTokens: typeof value.usage.promptTokens === "number" ? value.usage.promptTokens : Number.NaN,
        completionTokens: typeof value.usage.completionTokens === "number" ? value.usage.completionTokens : Number.NaN
      };
    }
    if ("isContinued" in value && typeof value.isContinued === "boolean") {
      result.isContinued = value.isContinued;
    }
    return {
      type: "finish_step",
      value: result
    };
  }
};
var startStepStreamPart = {
  code: "f",
  name: "start_step",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("messageId" in value) || typeof value.messageId !== "string") {
      throw new Error(
        '"start_step" parts expect an object with an "id" property.'
      );
    }
    return {
      type: "start_step",
      value: {
        messageId: value.messageId
      }
    };
  }
};
var reasoningStreamPart = {
  code: "g",
  name: "reasoning",
  parse: (value) => {
    if (typeof value !== "string") {
      throw new Error('"reasoning" parts expect a string value.');
    }
    return { type: "reasoning", value };
  }
};
var sourcePart = {
  code: "h",
  name: "source",
  parse: (value) => {
    if (value == null || typeof value !== "object") {
      throw new Error('"source" parts expect a Source object.');
    }
    return {
      type: "source",
      value
    };
  }
};
var redactedReasoningStreamPart = {
  code: "i",
  name: "redacted_reasoning",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("data" in value) || typeof value.data !== "string") {
      throw new Error(
        '"redacted_reasoning" parts expect an object with a "data" property.'
      );
    }
    return { type: "redacted_reasoning", value: { data: value.data } };
  }
};
var reasoningSignatureStreamPart = {
  code: "j",
  name: "reasoning_signature",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("signature" in value) || typeof value.signature !== "string") {
      throw new Error(
        '"reasoning_signature" parts expect an object with a "signature" property.'
      );
    }
    return {
      type: "reasoning_signature",
      value: { signature: value.signature }
    };
  }
};
var fileStreamPart = {
  code: "k",
  name: "file",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("data" in value) || typeof value.data !== "string" || !("mimeType" in value) || typeof value.mimeType !== "string") {
      throw new Error(
        '"file" parts expect an object with a "data" and "mimeType" property.'
      );
    }
    return { type: "file", value };
  }
};
var dataStreamParts = [
  textStreamPart2,
  dataStreamPart,
  errorStreamPart2,
  messageAnnotationsStreamPart,
  toolCallStreamPart,
  toolResultStreamPart,
  toolCallStreamingStartStreamPart,
  toolCallDeltaStreamPart,
  finishMessageStreamPart,
  finishStepStreamPart,
  startStepStreamPart,
  reasoningStreamPart,
  sourcePart,
  redactedReasoningStreamPart,
  reasoningSignatureStreamPart,
  fileStreamPart
];
var dataStreamPartsByCode = Object.fromEntries(
  dataStreamParts.map((part) => [part.code, part])
);
var DataStreamStringPrefixes = Object.fromEntries(
  dataStreamParts.map((part) => [part.name, part.code])
);
var validCodes2 = dataStreamParts.map((part) => part.code);
function formatDataStreamPart(type, value) {
  const streamPart = dataStreamParts.find((part) => part.name === type);
  if (!streamPart) {
    throw new Error(`Invalid stream part type: ${type}`);
  }
  return `${streamPart.code}:${JSON.stringify(value)}
`;
}
var NEWLINE = "\n".charCodeAt(0);
var NEWLINE2 = "\n".charCodeAt(0);
function zodSchema(zodSchema2, options) {
  var _a17;
  const useReferences = (_a17 = options == null ? void 0 : options.useReferences) != null ? _a17 : false;
  return jsonSchema(
    esm_default(zodSchema2, {
      $refStrategy: useReferences ? "root" : "none",
      target: "jsonSchema7"
      // note: openai mode breaks various gemini conversions
    }),
    {
      validate: (value) => {
        const result = zodSchema2.safeParse(value);
        return result.success ? { success: true, value: result.data } : { success: false, error: result.error };
      }
    }
  );
}
var schemaSymbol = Symbol.for("vercel.ai.schema");
function jsonSchema(jsonSchema2, {
  validate
} = {}) {
  return {
    [schemaSymbol]: true,
    _type: void 0,
    // should never be used directly
    [validatorSymbol]: true,
    jsonSchema: jsonSchema2,
    validate
  };
}
function isSchema(value) {
  return typeof value === "object" && value !== null && schemaSymbol in value && value[schemaSymbol] === true && "jsonSchema" in value && "validate" in value;
}
function asSchema(schema) {
  return isSchema(schema) ? schema : zodSchema(schema);
}

// ../../node_modules/.pnpm/ai@4.3.19_react@19.0.0_zod@3.24.2/node_modules/ai/dist/index.mjs
var __defProp = Object.defineProperty;
var __export2 = (target, all) => {
  for (var name17 in all)
    __defProp(target, name17, { get: all[name17], enumerable: true });
};
function prepareResponseHeaders(headers, {
  contentType,
  dataStreamVersion
}) {
  const responseHeaders = new Headers(headers != null ? headers : {});
  if (!responseHeaders.has("Content-Type")) {
    responseHeaders.set("Content-Type", contentType);
  }
  if (dataStreamVersion !== void 0) {
    responseHeaders.set("X-Vercel-AI-Data-Stream", dataStreamVersion);
  }
  return responseHeaders;
}
var UnsupportedModelVersionError = class extends AISDKError {
  constructor() {
    super({
      name: "AI_UnsupportedModelVersionError",
      message: `Unsupported model version. AI SDK 4 only supports models that implement specification version "v1". Please upgrade to AI SDK 5 to use this model.`
    });
  }
};
var name14 = "AI_InvalidArgumentError";
var marker15 = `vercel.ai.error.${name14}`;
var symbol15 = Symbol.for(marker15);
var _a15;
var InvalidArgumentError2 = class extends AISDKError {
  constructor({
    parameter,
    value,
    message
  }) {
    super({
      name: name14,
      message: `Invalid argument for parameter ${parameter}: ${message}`
    });
    this[_a15] = true;
    this.parameter = parameter;
    this.value = value;
  }
  static isInstance(error) {
    return AISDKError.hasMarker(error, marker15);
  }
};
_a15 = symbol15;
var name22 = "AI_RetryError";
var marker22 = `vercel.ai.error.${name22}`;
var symbol22 = Symbol.for(marker22);
var _a22;
var RetryError = class extends AISDKError {
  constructor({
    message,
    reason,
    errors
  }) {
    super({ name: name22, message });
    this[_a22] = true;
    this.reason = reason;
    this.errors = errors;
    this.lastError = errors[errors.length - 1];
  }
  static isInstance(error) {
    return AISDKError.hasMarker(error, marker22);
  }
};
_a22 = symbol22;
var retryWithExponentialBackoff = ({
  maxRetries = 2,
  initialDelayInMs = 2e3,
  backoffFactor = 2
} = {}) => async (f) => _retryWithExponentialBackoff(f, {
  maxRetries,
  delayInMs: initialDelayInMs,
  backoffFactor
});
async function _retryWithExponentialBackoff(f, {
  maxRetries,
  delayInMs,
  backoffFactor
}, errors = []) {
  try {
    return await f();
  } catch (error) {
    if (isAbortError(error)) {
      throw error;
    }
    if (maxRetries === 0) {
      throw error;
    }
    const errorMessage = getErrorMessage2(error);
    const newErrors = [...errors, error];
    const tryNumber = newErrors.length;
    if (tryNumber > maxRetries) {
      throw new RetryError({
        message: `Failed after ${tryNumber} attempts. Last error: ${errorMessage}`,
        reason: "maxRetriesExceeded",
        errors: newErrors
      });
    }
    if (error instanceof Error && APICallError.isInstance(error) && error.isRetryable === true && tryNumber <= maxRetries) {
      await delay(delayInMs);
      return _retryWithExponentialBackoff(
        f,
        { maxRetries, delayInMs: backoffFactor * delayInMs, backoffFactor },
        newErrors
      );
    }
    if (tryNumber === 1) {
      throw error;
    }
    throw new RetryError({
      message: `Failed after ${tryNumber} attempts with non-retryable error: '${errorMessage}'`,
      reason: "errorNotRetryable",
      errors: newErrors
    });
  }
}
function prepareRetries({
  maxRetries
}) {
  if (maxRetries != null) {
    if (!Number.isInteger(maxRetries)) {
      throw new InvalidArgumentError2({
        parameter: "maxRetries",
        value: maxRetries,
        message: "maxRetries must be an integer"
      });
    }
    if (maxRetries < 0) {
      throw new InvalidArgumentError2({
        parameter: "maxRetries",
        value: maxRetries,
        message: "maxRetries must be >= 0"
      });
    }
  }
  const maxRetriesResult = maxRetries != null ? maxRetries : 2;
  return {
    maxRetries: maxRetriesResult,
    retry: retryWithExponentialBackoff({ maxRetries: maxRetriesResult })
  };
}
function assembleOperationName({
  operationId,
  telemetry
}) {
  return {
    // standardized operation and resource name:
    "operation.name": `${operationId}${(telemetry == null ? void 0 : telemetry.functionId) != null ? ` ${telemetry.functionId}` : ""}`,
    "resource.name": telemetry == null ? void 0 : telemetry.functionId,
    // detailed, AI SDK specific data:
    "ai.operationId": operationId,
    "ai.telemetry.functionId": telemetry == null ? void 0 : telemetry.functionId
  };
}
function getBaseTelemetryAttributes({
  model,
  settings,
  telemetry,
  headers
}) {
  var _a17;
  return {
    "ai.model.provider": model.provider,
    "ai.model.id": model.modelId,
    // settings:
    ...Object.entries(settings).reduce((attributes, [key, value]) => {
      attributes[`ai.settings.${key}`] = value;
      return attributes;
    }, {}),
    // add metadata as attributes:
    ...Object.entries((_a17 = telemetry == null ? void 0 : telemetry.metadata) != null ? _a17 : {}).reduce(
      (attributes, [key, value]) => {
        attributes[`ai.telemetry.metadata.${key}`] = value;
        return attributes;
      },
      {}
    ),
    // request headers
    ...Object.entries(headers != null ? headers : {}).reduce((attributes, [key, value]) => {
      if (value !== void 0) {
        attributes[`ai.request.headers.${key}`] = value;
      }
      return attributes;
    }, {})
  };
}
var noopTracer = {
  startSpan() {
    return noopSpan;
  },
  startActiveSpan(name17, arg1, arg2, arg3) {
    if (typeof arg1 === "function") {
      return arg1(noopSpan);
    }
    if (typeof arg2 === "function") {
      return arg2(noopSpan);
    }
    if (typeof arg3 === "function") {
      return arg3(noopSpan);
    }
  }
};
var noopSpan = {
  spanContext() {
    return noopSpanContext;
  },
  setAttribute() {
    return this;
  },
  setAttributes() {
    return this;
  },
  addEvent() {
    return this;
  },
  addLink() {
    return this;
  },
  addLinks() {
    return this;
  },
  setStatus() {
    return this;
  },
  updateName() {
    return this;
  },
  end() {
    return this;
  },
  isRecording() {
    return false;
  },
  recordException() {
    return this;
  }
};
var noopSpanContext = {
  traceId: "",
  spanId: "",
  traceFlags: 0
};
function getTracer({
  isEnabled = false,
  tracer
} = {}) {
  if (!isEnabled) {
    return noopTracer;
  }
  if (tracer) {
    return tracer;
  }
  return trace.getTracer("ai");
}
function recordSpan({
  name: name17,
  tracer,
  attributes,
  fn,
  endWhenDone = true
}) {
  return tracer.startActiveSpan(name17, { attributes }, async (span) => {
    try {
      const result = await fn(span);
      if (endWhenDone) {
        span.end();
      }
      return result;
    } catch (error) {
      try {
        recordErrorOnSpan(span, error);
      } finally {
        span.end();
      }
      throw error;
    }
  });
}
function recordErrorOnSpan(span, error) {
  if (error instanceof Error) {
    span.recordException({
      name: error.name,
      message: error.message,
      stack: error.stack
    });
    span.setStatus({
      code: SpanStatusCode.ERROR,
      message: error.message
    });
  } else {
    span.setStatus({ code: SpanStatusCode.ERROR });
  }
}
function selectTelemetryAttributes({
  telemetry,
  attributes
}) {
  if ((telemetry == null ? void 0 : telemetry.isEnabled) !== true) {
    return {};
  }
  return Object.entries(attributes).reduce((attributes2, [key, value]) => {
    if (value === void 0) {
      return attributes2;
    }
    if (typeof value === "object" && "input" in value && typeof value.input === "function") {
      if ((telemetry == null ? void 0 : telemetry.recordInputs) === false) {
        return attributes2;
      }
      const result = value.input();
      return result === void 0 ? attributes2 : { ...attributes2, [key]: result };
    }
    if (typeof value === "object" && "output" in value && typeof value.output === "function") {
      if ((telemetry == null ? void 0 : telemetry.recordOutputs) === false) {
        return attributes2;
      }
      const result = value.output();
      return result === void 0 ? attributes2 : { ...attributes2, [key]: result };
    }
    return { ...attributes2, [key]: value };
  }, {});
}
var name32 = "AI_NoImageGeneratedError";
var marker32 = `vercel.ai.error.${name32}`;
var symbol32 = Symbol.for(marker32);
var _a32;
_a32 = symbol32;
var imageMimeTypeSignatures = [
  {
    mimeType: "image/gif",
    bytesPrefix: [71, 73, 70],
    base64Prefix: "R0lG"
  },
  {
    mimeType: "image/png",
    bytesPrefix: [137, 80, 78, 71],
    base64Prefix: "iVBORw"
  },
  {
    mimeType: "image/jpeg",
    bytesPrefix: [255, 216],
    base64Prefix: "/9j/"
  },
  {
    mimeType: "image/webp",
    bytesPrefix: [82, 73, 70, 70],
    base64Prefix: "UklGRg"
  },
  {
    mimeType: "image/bmp",
    bytesPrefix: [66, 77],
    base64Prefix: "Qk"
  },
  {
    mimeType: "image/tiff",
    bytesPrefix: [73, 73, 42, 0],
    base64Prefix: "SUkqAA"
  },
  {
    mimeType: "image/tiff",
    bytesPrefix: [77, 77, 0, 42],
    base64Prefix: "TU0AKg"
  },
  {
    mimeType: "image/avif",
    bytesPrefix: [
      0,
      0,
      0,
      32,
      102,
      116,
      121,
      112,
      97,
      118,
      105,
      102
    ],
    base64Prefix: "AAAAIGZ0eXBhdmlm"
  },
  {
    mimeType: "image/heic",
    bytesPrefix: [
      0,
      0,
      0,
      32,
      102,
      116,
      121,
      112,
      104,
      101,
      105,
      99
    ],
    base64Prefix: "AAAAIGZ0eXBoZWlj"
  }
];
var stripID3 = (data) => {
  const bytes = typeof data === "string" ? convertBase64ToUint8Array(data) : data;
  const id3Size = (bytes[6] & 127) << 21 | (bytes[7] & 127) << 14 | (bytes[8] & 127) << 7 | bytes[9] & 127;
  return bytes.slice(id3Size + 10);
};
function stripID3TagsIfPresent(data) {
  const hasId3 = typeof data === "string" && data.startsWith("SUQz") || typeof data !== "string" && data.length > 10 && data[0] === 73 && // 'I'
  data[1] === 68 && // 'D'
  data[2] === 51;
  return hasId3 ? stripID3(data) : data;
}
function detectMimeType({
  data,
  signatures
}) {
  const processedData = stripID3TagsIfPresent(data);
  for (const signature of signatures) {
    if (typeof processedData === "string" ? processedData.startsWith(signature.base64Prefix) : processedData.length >= signature.bytesPrefix.length && signature.bytesPrefix.every(
      (byte, index) => processedData[index] === byte
    )) {
      return signature.mimeType;
    }
  }
  return void 0;
}
var name42 = "AI_NoObjectGeneratedError";
var marker42 = `vercel.ai.error.${name42}`;
var symbol42 = Symbol.for(marker42);
var _a42;
var NoObjectGeneratedError = class extends AISDKError {
  constructor({
    message = "No object generated.",
    cause,
    text: text2,
    response,
    usage,
    finishReason
  }) {
    super({ name: name42, message, cause });
    this[_a42] = true;
    this.text = text2;
    this.response = response;
    this.usage = usage;
    this.finishReason = finishReason;
  }
  static isInstance(error) {
    return AISDKError.hasMarker(error, marker42);
  }
};
_a42 = symbol42;
var name52 = "AI_DownloadError";
var marker52 = `vercel.ai.error.${name52}`;
var symbol52 = Symbol.for(marker52);
var _a52;
var DownloadError = class extends AISDKError {
  constructor({
    url,
    statusCode,
    statusText,
    cause,
    message = cause == null ? `Failed to download ${url}: ${statusCode} ${statusText}` : `Failed to download ${url}: ${cause}`
  }) {
    super({ name: name52, message, cause });
    this[_a52] = true;
    this.url = url;
    this.statusCode = statusCode;
    this.statusText = statusText;
  }
  static isInstance(error) {
    return AISDKError.hasMarker(error, marker52);
  }
};
_a52 = symbol52;
async function download({ url }) {
  var _a17;
  const urlText = url.toString();
  try {
    const response = await fetch(urlText);
    if (!response.ok) {
      throw new DownloadError({
        url: urlText,
        statusCode: response.status,
        statusText: response.statusText
      });
    }
    return {
      data: new Uint8Array(await response.arrayBuffer()),
      mimeType: (_a17 = response.headers.get("content-type")) != null ? _a17 : void 0
    };
  } catch (error) {
    if (DownloadError.isInstance(error)) {
      throw error;
    }
    throw new DownloadError({ url: urlText, cause: error });
  }
}
var name62 = "AI_InvalidDataContentError";
var marker62 = `vercel.ai.error.${name62}`;
var symbol62 = Symbol.for(marker62);
var _a62;
var InvalidDataContentError = class extends AISDKError {
  constructor({
    content,
    cause,
    message = `Invalid data content. Expected a base64 string, Uint8Array, ArrayBuffer, or Buffer, but got ${typeof content}.`
  }) {
    super({ name: name62, message, cause });
    this[_a62] = true;
    this.content = content;
  }
  static isInstance(error) {
    return AISDKError.hasMarker(error, marker62);
  }
};
_a62 = symbol62;
var dataContentSchema = z.union([
  z.string(),
  z.instanceof(Uint8Array),
  z.instanceof(ArrayBuffer),
  z.custom(
    // Buffer might not be available in some environments such as CloudFlare:
    (value) => {
      var _a17, _b;
      return (_b = (_a17 = globalThis.Buffer) == null ? void 0 : _a17.isBuffer(value)) != null ? _b : false;
    },
    { message: "Must be a Buffer" }
  )
]);
function convertDataContentToBase64String(content) {
  if (typeof content === "string") {
    return content;
  }
  if (content instanceof ArrayBuffer) {
    return convertUint8ArrayToBase64(new Uint8Array(content));
  }
  return convertUint8ArrayToBase64(content);
}
function convertDataContentToUint8Array(content) {
  if (content instanceof Uint8Array) {
    return content;
  }
  if (typeof content === "string") {
    try {
      return convertBase64ToUint8Array(content);
    } catch (error) {
      throw new InvalidDataContentError({
        message: "Invalid data content. Content string is not a base64-encoded media.",
        content,
        cause: error
      });
    }
  }
  if (content instanceof ArrayBuffer) {
    return new Uint8Array(content);
  }
  throw new InvalidDataContentError({ content });
}
function convertUint8ArrayToText(uint8Array) {
  try {
    return new TextDecoder().decode(uint8Array);
  } catch (error) {
    throw new Error("Error decoding Uint8Array to text");
  }
}
var name72 = "AI_InvalidMessageRoleError";
var marker72 = `vercel.ai.error.${name72}`;
var symbol72 = Symbol.for(marker72);
var _a72;
var InvalidMessageRoleError = class extends AISDKError {
  constructor({
    role,
    message = `Invalid message role: '${role}'. Must be one of: "system", "user", "assistant", "tool".`
  }) {
    super({ name: name72, message });
    this[_a72] = true;
    this.role = role;
  }
  static isInstance(error) {
    return AISDKError.hasMarker(error, marker72);
  }
};
_a72 = symbol72;
function splitDataUrl(dataUrl) {
  try {
    const [header, base64Content] = dataUrl.split(",");
    return {
      mimeType: header.split(";")[0].split(":")[1],
      base64Content
    };
  } catch (error) {
    return {
      mimeType: void 0,
      base64Content: void 0
    };
  }
}
async function convertToLanguageModelPrompt({
  prompt,
  modelSupportsImageUrls = true,
  modelSupportsUrl = () => false,
  downloadImplementation = download
}) {
  const downloadedAssets = await downloadAssets(
    prompt.messages,
    downloadImplementation,
    modelSupportsImageUrls,
    modelSupportsUrl
  );
  return [
    ...prompt.system != null ? [{ role: "system", content: prompt.system }] : [],
    ...prompt.messages.map(
      (message) => convertToLanguageModelMessage(message, downloadedAssets)
    )
  ];
}
function convertToLanguageModelMessage(message, downloadedAssets) {
  var _a17, _b, _c, _d, _e, _f;
  const role = message.role;
  switch (role) {
    case "system": {
      return {
        role: "system",
        content: message.content,
        providerMetadata: (_a17 = message.providerOptions) != null ? _a17 : message.experimental_providerMetadata
      };
    }
    case "user": {
      if (typeof message.content === "string") {
        return {
          role: "user",
          content: [{ type: "text", text: message.content }],
          providerMetadata: (_b = message.providerOptions) != null ? _b : message.experimental_providerMetadata
        };
      }
      return {
        role: "user",
        content: message.content.map((part) => convertPartToLanguageModelPart(part, downloadedAssets)).filter((part) => part.type !== "text" || part.text !== ""),
        providerMetadata: (_c = message.providerOptions) != null ? _c : message.experimental_providerMetadata
      };
    }
    case "assistant": {
      if (typeof message.content === "string") {
        return {
          role: "assistant",
          content: [{ type: "text", text: message.content }],
          providerMetadata: (_d = message.providerOptions) != null ? _d : message.experimental_providerMetadata
        };
      }
      return {
        role: "assistant",
        content: message.content.filter(
          // remove empty text parts:
          (part) => part.type !== "text" || part.text !== ""
        ).map((part) => {
          var _a18;
          const providerOptions = (_a18 = part.providerOptions) != null ? _a18 : part.experimental_providerMetadata;
          switch (part.type) {
            case "file": {
              return {
                type: "file",
                data: part.data instanceof URL ? part.data : convertDataContentToBase64String(part.data),
                filename: part.filename,
                mimeType: part.mimeType,
                providerMetadata: providerOptions
              };
            }
            case "reasoning": {
              return {
                type: "reasoning",
                text: part.text,
                signature: part.signature,
                providerMetadata: providerOptions
              };
            }
            case "redacted-reasoning": {
              return {
                type: "redacted-reasoning",
                data: part.data,
                providerMetadata: providerOptions
              };
            }
            case "text": {
              return {
                type: "text",
                text: part.text,
                providerMetadata: providerOptions
              };
            }
            case "tool-call": {
              return {
                type: "tool-call",
                toolCallId: part.toolCallId,
                toolName: part.toolName,
                args: part.args,
                providerMetadata: providerOptions
              };
            }
          }
        }),
        providerMetadata: (_e = message.providerOptions) != null ? _e : message.experimental_providerMetadata
      };
    }
    case "tool": {
      return {
        role: "tool",
        content: message.content.map((part) => {
          var _a18;
          return {
            type: "tool-result",
            toolCallId: part.toolCallId,
            toolName: part.toolName,
            result: part.result,
            content: part.experimental_content,
            isError: part.isError,
            providerMetadata: (_a18 = part.providerOptions) != null ? _a18 : part.experimental_providerMetadata
          };
        }),
        providerMetadata: (_f = message.providerOptions) != null ? _f : message.experimental_providerMetadata
      };
    }
    default: {
      const _exhaustiveCheck = role;
      throw new InvalidMessageRoleError({ role: _exhaustiveCheck });
    }
  }
}
async function downloadAssets(messages, downloadImplementation, modelSupportsImageUrls, modelSupportsUrl) {
  const urls = messages.filter((message) => message.role === "user").map((message) => message.content).filter(
    (content) => Array.isArray(content)
  ).flat().filter(
    (part) => part.type === "image" || part.type === "file"
  ).filter(
    (part) => !(part.type === "image" && modelSupportsImageUrls === true)
  ).map((part) => part.type === "image" ? part.image : part.data).map(
    (part) => (
      // support string urls:
      typeof part === "string" && (part.startsWith("http:") || part.startsWith("https:")) ? new URL(part) : part
    )
  ).filter((image) => image instanceof URL).filter((url) => !modelSupportsUrl(url));
  const downloadedImages = await Promise.all(
    urls.map(async (url) => ({
      url,
      data: await downloadImplementation({ url })
    }))
  );
  return Object.fromEntries(
    downloadedImages.map(({ url, data }) => [url.toString(), data])
  );
}
function convertPartToLanguageModelPart(part, downloadedAssets) {
  var _a17, _b, _c, _d;
  if (part.type === "text") {
    return {
      type: "text",
      text: part.text,
      providerMetadata: (_a17 = part.providerOptions) != null ? _a17 : part.experimental_providerMetadata
    };
  }
  let mimeType = part.mimeType;
  let data;
  let content;
  let normalizedData;
  const type = part.type;
  switch (type) {
    case "image":
      data = part.image;
      break;
    case "file":
      data = part.data;
      break;
    default:
      throw new Error(`Unsupported part type: ${type}`);
  }
  try {
    content = typeof data === "string" ? new URL(data) : data;
  } catch (error) {
    content = data;
  }
  if (content instanceof URL) {
    if (content.protocol === "data:") {
      const { mimeType: dataUrlMimeType, base64Content } = splitDataUrl(
        content.toString()
      );
      if (dataUrlMimeType == null || base64Content == null) {
        throw new Error(`Invalid data URL format in part ${type}`);
      }
      mimeType = dataUrlMimeType;
      normalizedData = convertDataContentToUint8Array(base64Content);
    } else {
      const downloadedFile = downloadedAssets[content.toString()];
      if (downloadedFile) {
        normalizedData = downloadedFile.data;
        mimeType != null ? mimeType : mimeType = downloadedFile.mimeType;
      } else {
        normalizedData = content;
      }
    }
  } else {
    normalizedData = convertDataContentToUint8Array(content);
  }
  switch (type) {
    case "image": {
      if (normalizedData instanceof Uint8Array) {
        mimeType = (_b = detectMimeType({
          data: normalizedData,
          signatures: imageMimeTypeSignatures
        })) != null ? _b : mimeType;
      }
      return {
        type: "image",
        image: normalizedData,
        mimeType,
        providerMetadata: (_c = part.providerOptions) != null ? _c : part.experimental_providerMetadata
      };
    }
    case "file": {
      if (mimeType == null) {
        throw new Error(`Mime type is missing for file part`);
      }
      return {
        type: "file",
        data: normalizedData instanceof Uint8Array ? convertDataContentToBase64String(normalizedData) : normalizedData,
        filename: part.filename,
        mimeType,
        providerMetadata: (_d = part.providerOptions) != null ? _d : part.experimental_providerMetadata
      };
    }
  }
}
function prepareCallSettings({
  maxTokens,
  temperature,
  topP,
  topK,
  presencePenalty,
  frequencyPenalty,
  stopSequences,
  seed
}) {
  if (maxTokens != null) {
    if (!Number.isInteger(maxTokens)) {
      throw new InvalidArgumentError2({
        parameter: "maxTokens",
        value: maxTokens,
        message: "maxTokens must be an integer"
      });
    }
    if (maxTokens < 1) {
      throw new InvalidArgumentError2({
        parameter: "maxTokens",
        value: maxTokens,
        message: "maxTokens must be >= 1"
      });
    }
  }
  if (temperature != null) {
    if (typeof temperature !== "number") {
      throw new InvalidArgumentError2({
        parameter: "temperature",
        value: temperature,
        message: "temperature must be a number"
      });
    }
  }
  if (topP != null) {
    if (typeof topP !== "number") {
      throw new InvalidArgumentError2({
        parameter: "topP",
        value: topP,
        message: "topP must be a number"
      });
    }
  }
  if (topK != null) {
    if (typeof topK !== "number") {
      throw new InvalidArgumentError2({
        parameter: "topK",
        value: topK,
        message: "topK must be a number"
      });
    }
  }
  if (presencePenalty != null) {
    if (typeof presencePenalty !== "number") {
      throw new InvalidArgumentError2({
        parameter: "presencePenalty",
        value: presencePenalty,
        message: "presencePenalty must be a number"
      });
    }
  }
  if (frequencyPenalty != null) {
    if (typeof frequencyPenalty !== "number") {
      throw new InvalidArgumentError2({
        parameter: "frequencyPenalty",
        value: frequencyPenalty,
        message: "frequencyPenalty must be a number"
      });
    }
  }
  if (seed != null) {
    if (!Number.isInteger(seed)) {
      throw new InvalidArgumentError2({
        parameter: "seed",
        value: seed,
        message: "seed must be an integer"
      });
    }
  }
  return {
    maxTokens,
    // TODO v5 remove default 0 for temperature
    temperature: temperature != null ? temperature : 0,
    topP,
    topK,
    presencePenalty,
    frequencyPenalty,
    stopSequences: stopSequences != null && stopSequences.length > 0 ? stopSequences : void 0,
    seed
  };
}
function attachmentsToParts(attachments) {
  var _a17, _b, _c;
  const parts = [];
  for (const attachment of attachments) {
    let url;
    try {
      url = new URL(attachment.url);
    } catch (error) {
      throw new Error(`Invalid URL: ${attachment.url}`);
    }
    switch (url.protocol) {
      case "http:":
      case "https:": {
        if ((_a17 = attachment.contentType) == null ? void 0 : _a17.startsWith("image/")) {
          parts.push({ type: "image", image: url });
        } else {
          if (!attachment.contentType) {
            throw new Error(
              "If the attachment is not an image, it must specify a content type"
            );
          }
          parts.push({
            type: "file",
            data: url,
            mimeType: attachment.contentType
          });
        }
        break;
      }
      case "data:": {
        let header;
        let base64Content;
        let mimeType;
        try {
          [header, base64Content] = attachment.url.split(",");
          mimeType = header.split(";")[0].split(":")[1];
        } catch (error) {
          throw new Error(`Error processing data URL: ${attachment.url}`);
        }
        if (mimeType == null || base64Content == null) {
          throw new Error(`Invalid data URL format: ${attachment.url}`);
        }
        if ((_b = attachment.contentType) == null ? void 0 : _b.startsWith("image/")) {
          parts.push({
            type: "image",
            image: convertDataContentToUint8Array(base64Content)
          });
        } else if ((_c = attachment.contentType) == null ? void 0 : _c.startsWith("text/")) {
          parts.push({
            type: "text",
            text: convertUint8ArrayToText(
              convertDataContentToUint8Array(base64Content)
            )
          });
        } else {
          if (!attachment.contentType) {
            throw new Error(
              "If the attachment is not an image or text, it must specify a content type"
            );
          }
          parts.push({
            type: "file",
            data: base64Content,
            mimeType: attachment.contentType
          });
        }
        break;
      }
      default: {
        throw new Error(`Unsupported URL protocol: ${url.protocol}`);
      }
    }
  }
  return parts;
}
var name82 = "AI_MessageConversionError";
var marker82 = `vercel.ai.error.${name82}`;
var symbol82 = Symbol.for(marker82);
var _a82;
var MessageConversionError = class extends AISDKError {
  constructor({
    originalMessage,
    message
  }) {
    super({ name: name82, message });
    this[_a82] = true;
    this.originalMessage = originalMessage;
  }
  static isInstance(error) {
    return AISDKError.hasMarker(error, marker82);
  }
};
_a82 = symbol82;
function convertToCoreMessages(messages, options) {
  var _a17, _b;
  const tools = (_a17 = options == null ? void 0 : options.tools) != null ? _a17 : {};
  const coreMessages = [];
  for (let i = 0; i < messages.length; i++) {
    const message = messages[i];
    const isLastMessage = i === messages.length - 1;
    const { role, content, experimental_attachments } = message;
    switch (role) {
      case "system": {
        coreMessages.push({
          role: "system",
          content
        });
        break;
      }
      case "user": {
        if (message.parts == null) {
          coreMessages.push({
            role: "user",
            content: experimental_attachments ? [
              { type: "text", text: content },
              ...attachmentsToParts(experimental_attachments)
            ] : content
          });
        } else {
          const textParts = message.parts.filter((part) => part.type === "text").map((part) => ({
            type: "text",
            text: part.text
          }));
          coreMessages.push({
            role: "user",
            content: experimental_attachments ? [...textParts, ...attachmentsToParts(experimental_attachments)] : textParts
          });
        }
        break;
      }
      case "assistant": {
        if (message.parts != null) {
          let processBlock2 = function() {
            const content2 = [];
            for (const part of block) {
              switch (part.type) {
                case "file":
                case "text": {
                  content2.push(part);
                  break;
                }
                case "reasoning": {
                  for (const detail of part.details) {
                    switch (detail.type) {
                      case "text":
                        content2.push({
                          type: "reasoning",
                          text: detail.text,
                          signature: detail.signature
                        });
                        break;
                      case "redacted":
                        content2.push({
                          type: "redacted-reasoning",
                          data: detail.data
                        });
                        break;
                    }
                  }
                  break;
                }
                case "tool-invocation":
                  content2.push({
                    type: "tool-call",
                    toolCallId: part.toolInvocation.toolCallId,
                    toolName: part.toolInvocation.toolName,
                    args: part.toolInvocation.args
                  });
                  break;
                default: {
                  const _exhaustiveCheck = part;
                  throw new Error(`Unsupported part: ${_exhaustiveCheck}`);
                }
              }
            }
            coreMessages.push({
              role: "assistant",
              content: content2
            });
            const stepInvocations = block.filter(
              (part) => part.type === "tool-invocation"
            ).map((part) => part.toolInvocation);
            if (stepInvocations.length > 0) {
              coreMessages.push({
                role: "tool",
                content: stepInvocations.map(
                  (toolInvocation) => {
                    if (!("result" in toolInvocation)) {
                      throw new MessageConversionError({
                        originalMessage: message,
                        message: "ToolInvocation must have a result: " + JSON.stringify(toolInvocation)
                      });
                    }
                    const { toolCallId, toolName, result } = toolInvocation;
                    const tool2 = tools[toolName];
                    return (tool2 == null ? void 0 : tool2.experimental_toToolResultContent) != null ? {
                      type: "tool-result",
                      toolCallId,
                      toolName,
                      result: tool2.experimental_toToolResultContent(result),
                      experimental_content: tool2.experimental_toToolResultContent(result)
                    } : {
                      type: "tool-result",
                      toolCallId,
                      toolName,
                      result
                    };
                  }
                )
              });
            }
            block = [];
            blockHasToolInvocations = false;
            currentStep++;
          };
          var processBlock = processBlock2;
          let currentStep = 0;
          let blockHasToolInvocations = false;
          let block = [];
          for (const part of message.parts) {
            switch (part.type) {
              case "text": {
                if (blockHasToolInvocations) {
                  processBlock2();
                }
                block.push(part);
                break;
              }
              case "file":
              case "reasoning": {
                block.push(part);
                break;
              }
              case "tool-invocation": {
                if (((_b = part.toolInvocation.step) != null ? _b : 0) !== currentStep) {
                  processBlock2();
                }
                block.push(part);
                blockHasToolInvocations = true;
                break;
              }
            }
          }
          processBlock2();
          break;
        }
        const toolInvocations = message.toolInvocations;
        if (toolInvocations == null || toolInvocations.length === 0) {
          coreMessages.push({ role: "assistant", content });
          break;
        }
        const maxStep = toolInvocations.reduce((max, toolInvocation) => {
          var _a18;
          return Math.max(max, (_a18 = toolInvocation.step) != null ? _a18 : 0);
        }, 0);
        for (let i2 = 0; i2 <= maxStep; i2++) {
          const stepInvocations = toolInvocations.filter(
            (toolInvocation) => {
              var _a18;
              return ((_a18 = toolInvocation.step) != null ? _a18 : 0) === i2;
            }
          );
          if (stepInvocations.length === 0) {
            continue;
          }
          coreMessages.push({
            role: "assistant",
            content: [
              ...isLastMessage && content && i2 === 0 ? [{ type: "text", text: content }] : [],
              ...stepInvocations.map(
                ({ toolCallId, toolName, args }) => ({
                  type: "tool-call",
                  toolCallId,
                  toolName,
                  args
                })
              )
            ]
          });
          coreMessages.push({
            role: "tool",
            content: stepInvocations.map((toolInvocation) => {
              if (!("result" in toolInvocation)) {
                throw new MessageConversionError({
                  originalMessage: message,
                  message: "ToolInvocation must have a result: " + JSON.stringify(toolInvocation)
                });
              }
              const { toolCallId, toolName, result } = toolInvocation;
              const tool2 = tools[toolName];
              return (tool2 == null ? void 0 : tool2.experimental_toToolResultContent) != null ? {
                type: "tool-result",
                toolCallId,
                toolName,
                result: tool2.experimental_toToolResultContent(result),
                experimental_content: tool2.experimental_toToolResultContent(result)
              } : {
                type: "tool-result",
                toolCallId,
                toolName,
                result
              };
            })
          });
        }
        if (content && !isLastMessage) {
          coreMessages.push({ role: "assistant", content });
        }
        break;
      }
      case "data": {
        break;
      }
      default: {
        const _exhaustiveCheck = role;
        throw new MessageConversionError({
          originalMessage: message,
          message: `Unsupported role: ${_exhaustiveCheck}`
        });
      }
    }
  }
  return coreMessages;
}
var jsonValueSchema = z.lazy(
  () => z.union([
    z.null(),
    z.string(),
    z.number(),
    z.boolean(),
    z.record(z.string(), jsonValueSchema),
    z.array(jsonValueSchema)
  ])
);
var providerMetadataSchema = z.record(
  z.string(),
  z.record(z.string(), jsonValueSchema)
);
var toolResultContentSchema = z.array(
  z.union([
    z.object({ type: z.literal("text"), text: z.string() }),
    z.object({
      type: z.literal("image"),
      data: z.string(),
      mimeType: z.string().optional()
    })
  ])
);
var textPartSchema = z.object({
  type: z.literal("text"),
  text: z.string(),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var imagePartSchema = z.object({
  type: z.literal("image"),
  image: z.union([dataContentSchema, z.instanceof(URL)]),
  mimeType: z.string().optional(),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var filePartSchema = z.object({
  type: z.literal("file"),
  data: z.union([dataContentSchema, z.instanceof(URL)]),
  filename: z.string().optional(),
  mimeType: z.string(),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var reasoningPartSchema = z.object({
  type: z.literal("reasoning"),
  text: z.string(),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var redactedReasoningPartSchema = z.object({
  type: z.literal("redacted-reasoning"),
  data: z.string(),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var toolCallPartSchema = z.object({
  type: z.literal("tool-call"),
  toolCallId: z.string(),
  toolName: z.string(),
  args: z.unknown(),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var toolResultPartSchema = z.object({
  type: z.literal("tool-result"),
  toolCallId: z.string(),
  toolName: z.string(),
  result: z.unknown(),
  content: toolResultContentSchema.optional(),
  isError: z.boolean().optional(),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var coreSystemMessageSchema = z.object({
  role: z.literal("system"),
  content: z.string(),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var coreUserMessageSchema = z.object({
  role: z.literal("user"),
  content: z.union([
    z.string(),
    z.array(z.union([textPartSchema, imagePartSchema, filePartSchema]))
  ]),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var coreAssistantMessageSchema = z.object({
  role: z.literal("assistant"),
  content: z.union([
    z.string(),
    z.array(
      z.union([
        textPartSchema,
        filePartSchema,
        reasoningPartSchema,
        redactedReasoningPartSchema,
        toolCallPartSchema
      ])
    )
  ]),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var coreToolMessageSchema = z.object({
  role: z.literal("tool"),
  content: z.array(toolResultPartSchema),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var coreMessageSchema = z.union([
  coreSystemMessageSchema,
  coreUserMessageSchema,
  coreAssistantMessageSchema,
  coreToolMessageSchema
]);
function standardizePrompt({
  prompt,
  tools
}) {
  if (prompt.prompt == null && prompt.messages == null) {
    throw new InvalidPromptError({
      prompt,
      message: "prompt or messages must be defined"
    });
  }
  if (prompt.prompt != null && prompt.messages != null) {
    throw new InvalidPromptError({
      prompt,
      message: "prompt and messages cannot be defined at the same time"
    });
  }
  if (prompt.system != null && typeof prompt.system !== "string") {
    throw new InvalidPromptError({
      prompt,
      message: "system must be a string"
    });
  }
  if (prompt.prompt != null) {
    if (typeof prompt.prompt !== "string") {
      throw new InvalidPromptError({
        prompt,
        message: "prompt must be a string"
      });
    }
    return {
      type: "prompt",
      system: prompt.system,
      messages: [
        {
          role: "user",
          content: prompt.prompt
        }
      ]
    };
  }
  if (prompt.messages != null) {
    const promptType = detectPromptType(prompt.messages);
    const messages = promptType === "ui-messages" ? convertToCoreMessages(prompt.messages, {
      tools
    }) : prompt.messages;
    if (messages.length === 0) {
      throw new InvalidPromptError({
        prompt,
        message: "messages must not be empty"
      });
    }
    const validationResult = safeValidateTypes({
      value: messages,
      schema: z.array(coreMessageSchema)
    });
    if (!validationResult.success) {
      throw new InvalidPromptError({
        prompt,
        message: [
          "message must be a CoreMessage or a UI message",
          `Validation error: ${validationResult.error.message}`
        ].join("\n"),
        cause: validationResult.error
      });
    }
    return {
      type: "messages",
      messages,
      system: prompt.system
    };
  }
  throw new Error("unreachable");
}
function detectPromptType(prompt) {
  if (!Array.isArray(prompt)) {
    throw new InvalidPromptError({
      prompt,
      message: [
        "messages must be an array of CoreMessage or UIMessage",
        `Received non-array value: ${JSON.stringify(prompt)}`
      ].join("\n"),
      cause: prompt
    });
  }
  if (prompt.length === 0) {
    return "messages";
  }
  const characteristics = prompt.map(detectSingleMessageCharacteristics);
  if (characteristics.some((c) => c === "has-ui-specific-parts")) {
    return "ui-messages";
  }
  const nonMessageIndex = characteristics.findIndex(
    (c) => c !== "has-core-specific-parts" && c !== "message"
  );
  if (nonMessageIndex === -1) {
    return "messages";
  }
  throw new InvalidPromptError({
    prompt,
    message: [
      "messages must be an array of CoreMessage or UIMessage",
      `Received message of type: "${characteristics[nonMessageIndex]}" at index ${nonMessageIndex}`,
      `messages[${nonMessageIndex}]: ${JSON.stringify(prompt[nonMessageIndex])}`
    ].join("\n"),
    cause: prompt
  });
}
function detectSingleMessageCharacteristics(message) {
  if (typeof message === "object" && message !== null && (message.role === "function" || // UI-only role
  message.role === "data" || // UI-only role
  "toolInvocations" in message || // UI-specific field
  "parts" in message || // UI-specific field
  "experimental_attachments" in message)) {
    return "has-ui-specific-parts";
  } else if (typeof message === "object" && message !== null && "content" in message && (Array.isArray(message.content) || // Core messages can have array content
  "experimental_providerMetadata" in message || "providerOptions" in message)) {
    return "has-core-specific-parts";
  } else if (typeof message === "object" && message !== null && "role" in message && "content" in message && typeof message.content === "string" && ["system", "user", "assistant", "tool"].includes(message.role)) {
    return "message";
  } else {
    return "other";
  }
}
function calculateLanguageModelUsage({
  promptTokens,
  completionTokens
}) {
  return {
    promptTokens,
    completionTokens,
    totalTokens: promptTokens + completionTokens
  };
}
var DEFAULT_SCHEMA_PREFIX = "JSON schema:";
var DEFAULT_SCHEMA_SUFFIX = "You MUST answer with a JSON object that matches the JSON schema above.";
var DEFAULT_GENERIC_SUFFIX = "You MUST answer with JSON.";
function injectJsonInstruction({
  prompt,
  schema,
  schemaPrefix = schema != null ? DEFAULT_SCHEMA_PREFIX : void 0,
  schemaSuffix = schema != null ? DEFAULT_SCHEMA_SUFFIX : DEFAULT_GENERIC_SUFFIX
}) {
  return [
    prompt != null && prompt.length > 0 ? prompt : void 0,
    prompt != null && prompt.length > 0 ? "" : void 0,
    // add a newline if prompt is not null
    schemaPrefix,
    schema != null ? JSON.stringify(schema) : void 0,
    schemaSuffix
  ].filter((line) => line != null).join("\n");
}
function createAsyncIterableStream(source) {
  const stream = source.pipeThrough(new TransformStream());
  stream[Symbol.asyncIterator] = () => {
    const reader = stream.getReader();
    return {
      async next() {
        const { done, value } = await reader.read();
        return done ? { done: true, value: void 0 } : { done: false, value };
      }
    };
  };
  return stream;
}
var noSchemaOutputStrategy = {
  type: "no-schema",
  jsonSchema: void 0,
  validatePartialResult({ value, textDelta }) {
    return { success: true, value: { partial: value, textDelta } };
  },
  validateFinalResult(value, context) {
    return value === void 0 ? {
      success: false,
      error: new NoObjectGeneratedError({
        message: "No object generated: response did not match schema.",
        text: context.text,
        response: context.response,
        usage: context.usage,
        finishReason: context.finishReason
      })
    } : { success: true, value };
  },
  createElementStream() {
    throw new UnsupportedFunctionalityError({
      functionality: "element streams in no-schema mode"
    });
  }
};
var objectOutputStrategy = (schema) => ({
  type: "object",
  jsonSchema: schema.jsonSchema,
  validatePartialResult({ value, textDelta }) {
    return {
      success: true,
      value: {
        // Note: currently no validation of partial results:
        partial: value,
        textDelta
      }
    };
  },
  validateFinalResult(value) {
    return safeValidateTypes({ value, schema });
  },
  createElementStream() {
    throw new UnsupportedFunctionalityError({
      functionality: "element streams in object mode"
    });
  }
});
var arrayOutputStrategy = (schema) => {
  const { $schema, ...itemSchema } = schema.jsonSchema;
  return {
    type: "enum",
    // wrap in object that contains array of elements, since most LLMs will not
    // be able to generate an array directly:
    // possible future optimization: use arrays directly when model supports grammar-guided generation
    jsonSchema: {
      $schema: "http://json-schema.org/draft-07/schema#",
      type: "object",
      properties: {
        elements: { type: "array", items: itemSchema }
      },
      required: ["elements"],
      additionalProperties: false
    },
    validatePartialResult({ value, latestObject, isFirstDelta, isFinalDelta }) {
      var _a17;
      if (!isJSONObject(value) || !isJSONArray(value.elements)) {
        return {
          success: false,
          error: new TypeValidationError({
            value,
            cause: "value must be an object that contains an array of elements"
          })
        };
      }
      const inputArray = value.elements;
      const resultArray = [];
      for (let i = 0; i < inputArray.length; i++) {
        const element = inputArray[i];
        const result = safeValidateTypes({ value: element, schema });
        if (i === inputArray.length - 1 && !isFinalDelta) {
          continue;
        }
        if (!result.success) {
          return result;
        }
        resultArray.push(result.value);
      }
      const publishedElementCount = (_a17 = latestObject == null ? void 0 : latestObject.length) != null ? _a17 : 0;
      let textDelta = "";
      if (isFirstDelta) {
        textDelta += "[";
      }
      if (publishedElementCount > 0) {
        textDelta += ",";
      }
      textDelta += resultArray.slice(publishedElementCount).map((element) => JSON.stringify(element)).join(",");
      if (isFinalDelta) {
        textDelta += "]";
      }
      return {
        success: true,
        value: {
          partial: resultArray,
          textDelta
        }
      };
    },
    validateFinalResult(value) {
      if (!isJSONObject(value) || !isJSONArray(value.elements)) {
        return {
          success: false,
          error: new TypeValidationError({
            value,
            cause: "value must be an object that contains an array of elements"
          })
        };
      }
      const inputArray = value.elements;
      for (const element of inputArray) {
        const result = safeValidateTypes({ value: element, schema });
        if (!result.success) {
          return result;
        }
      }
      return { success: true, value: inputArray };
    },
    createElementStream(originalStream) {
      let publishedElements = 0;
      return createAsyncIterableStream(
        originalStream.pipeThrough(
          new TransformStream({
            transform(chunk, controller) {
              switch (chunk.type) {
                case "object": {
                  const array = chunk.object;
                  for (; publishedElements < array.length; publishedElements++) {
                    controller.enqueue(array[publishedElements]);
                  }
                  break;
                }
                case "text-delta":
                case "finish":
                case "error":
                  break;
                default: {
                  const _exhaustiveCheck = chunk;
                  throw new Error(
                    `Unsupported chunk type: ${_exhaustiveCheck}`
                  );
                }
              }
            }
          })
        )
      );
    }
  };
};
var enumOutputStrategy = (enumValues) => {
  return {
    type: "enum",
    // wrap in object that contains result, since most LLMs will not
    // be able to generate an enum value directly:
    // possible future optimization: use enums directly when model supports top-level enums
    jsonSchema: {
      $schema: "http://json-schema.org/draft-07/schema#",
      type: "object",
      properties: {
        result: { type: "string", enum: enumValues }
      },
      required: ["result"],
      additionalProperties: false
    },
    validateFinalResult(value) {
      if (!isJSONObject(value) || typeof value.result !== "string") {
        return {
          success: false,
          error: new TypeValidationError({
            value,
            cause: 'value must be an object that contains a string in the "result" property.'
          })
        };
      }
      const result = value.result;
      return enumValues.includes(result) ? { success: true, value: result } : {
        success: false,
        error: new TypeValidationError({
          value,
          cause: "value must be a string in the enum"
        })
      };
    },
    validatePartialResult() {
      throw new UnsupportedFunctionalityError({
        functionality: "partial results in enum mode"
      });
    },
    createElementStream() {
      throw new UnsupportedFunctionalityError({
        functionality: "element streams in enum mode"
      });
    }
  };
};
function getOutputStrategy({
  output,
  schema,
  enumValues
}) {
  switch (output) {
    case "object":
      return objectOutputStrategy(asSchema(schema));
    case "array":
      return arrayOutputStrategy(asSchema(schema));
    case "enum":
      return enumOutputStrategy(enumValues);
    case "no-schema":
      return noSchemaOutputStrategy;
    default: {
      const _exhaustiveCheck = output;
      throw new Error(`Unsupported output: ${_exhaustiveCheck}`);
    }
  }
}
function validateObjectGenerationInput({
  output,
  mode,
  schema,
  schemaName,
  schemaDescription,
  enumValues
}) {
  if (output != null && output !== "object" && output !== "array" && output !== "enum" && output !== "no-schema") {
    throw new InvalidArgumentError2({
      parameter: "output",
      value: output,
      message: "Invalid output type."
    });
  }
  if (output === "no-schema") {
    if (mode === "auto" || mode === "tool") {
      throw new InvalidArgumentError2({
        parameter: "mode",
        value: mode,
        message: 'Mode must be "json" for no-schema output.'
      });
    }
    if (schema != null) {
      throw new InvalidArgumentError2({
        parameter: "schema",
        value: schema,
        message: "Schema is not supported for no-schema output."
      });
    }
    if (schemaDescription != null) {
      throw new InvalidArgumentError2({
        parameter: "schemaDescription",
        value: schemaDescription,
        message: "Schema description is not supported for no-schema output."
      });
    }
    if (schemaName != null) {
      throw new InvalidArgumentError2({
        parameter: "schemaName",
        value: schemaName,
        message: "Schema name is not supported for no-schema output."
      });
    }
    if (enumValues != null) {
      throw new InvalidArgumentError2({
        parameter: "enumValues",
        value: enumValues,
        message: "Enum values are not supported for no-schema output."
      });
    }
  }
  if (output === "object") {
    if (schema == null) {
      throw new InvalidArgumentError2({
        parameter: "schema",
        value: schema,
        message: "Schema is required for object output."
      });
    }
    if (enumValues != null) {
      throw new InvalidArgumentError2({
        parameter: "enumValues",
        value: enumValues,
        message: "Enum values are not supported for object output."
      });
    }
  }
  if (output === "array") {
    if (schema == null) {
      throw new InvalidArgumentError2({
        parameter: "schema",
        value: schema,
        message: "Element schema is required for array output."
      });
    }
    if (enumValues != null) {
      throw new InvalidArgumentError2({
        parameter: "enumValues",
        value: enumValues,
        message: "Enum values are not supported for array output."
      });
    }
  }
  if (output === "enum") {
    if (schema != null) {
      throw new InvalidArgumentError2({
        parameter: "schema",
        value: schema,
        message: "Schema is not supported for enum output."
      });
    }
    if (schemaDescription != null) {
      throw new InvalidArgumentError2({
        parameter: "schemaDescription",
        value: schemaDescription,
        message: "Schema description is not supported for enum output."
      });
    }
    if (schemaName != null) {
      throw new InvalidArgumentError2({
        parameter: "schemaName",
        value: schemaName,
        message: "Schema name is not supported for enum output."
      });
    }
    if (enumValues == null) {
      throw new InvalidArgumentError2({
        parameter: "enumValues",
        value: enumValues,
        message: "Enum values are required for enum output."
      });
    }
    for (const value of enumValues) {
      if (typeof value !== "string") {
        throw new InvalidArgumentError2({
          parameter: "enumValues",
          value,
          message: "Enum values must be strings."
        });
      }
    }
  }
}
function stringifyForTelemetry(prompt) {
  const processedPrompt = prompt.map((message) => {
    return {
      ...message,
      content: typeof message.content === "string" ? message.content : message.content.map(processPart)
    };
  });
  return JSON.stringify(processedPrompt);
}
function processPart(part) {
  if (part.type === "image") {
    return {
      ...part,
      image: part.image instanceof Uint8Array ? convertDataContentToBase64String(part.image) : part.image
    };
  }
  return part;
}
var originalGenerateId = createIdGenerator({ prefix: "aiobj", size: 24 });
async function generateObject({
  model,
  enum: enumValues,
  // rename bc enum is reserved by typescript
  schema: inputSchema,
  schemaName,
  schemaDescription,
  mode,
  output = "object",
  system,
  prompt,
  messages,
  maxRetries: maxRetriesArg,
  abortSignal,
  headers,
  experimental_repairText: repairText,
  experimental_telemetry: telemetry,
  experimental_providerMetadata,
  providerOptions = experimental_providerMetadata,
  _internal: {
    generateId: generateId3 = originalGenerateId,
    currentDate = () => /* @__PURE__ */ new Date()
  } = {},
  ...settings
}) {
  if (typeof model === "string" || model.specificationVersion !== "v1") {
    throw new UnsupportedModelVersionError();
  }
  validateObjectGenerationInput({
    output,
    mode,
    schema: inputSchema,
    schemaName,
    schemaDescription,
    enumValues
  });
  const { maxRetries, retry } = prepareRetries({ maxRetries: maxRetriesArg });
  const outputStrategy = getOutputStrategy({
    output,
    schema: inputSchema,
    enumValues
  });
  if (outputStrategy.type === "no-schema" && mode === void 0) {
    mode = "json";
  }
  const baseTelemetryAttributes = getBaseTelemetryAttributes({
    model,
    telemetry,
    headers,
    settings: { ...settings, maxRetries }
  });
  const tracer = getTracer(telemetry);
  return recordSpan({
    name: "ai.generateObject",
    attributes: selectTelemetryAttributes({
      telemetry,
      attributes: {
        ...assembleOperationName({
          operationId: "ai.generateObject",
          telemetry
        }),
        ...baseTelemetryAttributes,
        // specific settings that only make sense on the outer level:
        "ai.prompt": {
          input: () => JSON.stringify({ system, prompt, messages })
        },
        "ai.schema": outputStrategy.jsonSchema != null ? { input: () => JSON.stringify(outputStrategy.jsonSchema) } : void 0,
        "ai.schema.name": schemaName,
        "ai.schema.description": schemaDescription,
        "ai.settings.output": outputStrategy.type,
        "ai.settings.mode": mode
      }
    }),
    tracer,
    fn: async (span) => {
      var _a17, _b, _c, _d;
      if (mode === "auto" || mode == null) {
        mode = model.defaultObjectGenerationMode;
      }
      let result;
      let finishReason;
      let usage;
      let warnings;
      let rawResponse;
      let response;
      let request;
      let logprobs;
      let resultProviderMetadata;
      switch (mode) {
        case "json": {
          const standardizedPrompt = standardizePrompt({
            prompt: {
              system: outputStrategy.jsonSchema == null ? injectJsonInstruction({ prompt: system }) : model.supportsStructuredOutputs ? system : injectJsonInstruction({
                prompt: system,
                schema: outputStrategy.jsonSchema
              }),
              prompt,
              messages
            },
            tools: void 0
          });
          const promptMessages = await convertToLanguageModelPrompt({
            prompt: standardizedPrompt,
            modelSupportsImageUrls: model.supportsImageUrls,
            modelSupportsUrl: (_a17 = model.supportsUrl) == null ? void 0 : _a17.bind(model)
            // support 'this' context
          });
          const generateResult = await retry(
            () => recordSpan({
              name: "ai.generateObject.doGenerate",
              attributes: selectTelemetryAttributes({
                telemetry,
                attributes: {
                  ...assembleOperationName({
                    operationId: "ai.generateObject.doGenerate",
                    telemetry
                  }),
                  ...baseTelemetryAttributes,
                  "ai.prompt.format": {
                    input: () => standardizedPrompt.type
                  },
                  "ai.prompt.messages": {
                    input: () => JSON.stringify(promptMessages)
                  },
                  "ai.settings.mode": mode,
                  // standardized gen-ai llm span attributes:
                  "gen_ai.system": model.provider,
                  "gen_ai.request.model": model.modelId,
                  "gen_ai.request.frequency_penalty": settings.frequencyPenalty,
                  "gen_ai.request.max_tokens": settings.maxTokens,
                  "gen_ai.request.presence_penalty": settings.presencePenalty,
                  "gen_ai.request.temperature": settings.temperature,
                  "gen_ai.request.top_k": settings.topK,
                  "gen_ai.request.top_p": settings.topP
                }
              }),
              tracer,
              fn: async (span2) => {
                var _a18, _b2, _c2, _d2, _e, _f;
                const result2 = await model.doGenerate({
                  mode: {
                    type: "object-json",
                    schema: outputStrategy.jsonSchema,
                    name: schemaName,
                    description: schemaDescription
                  },
                  ...prepareCallSettings(settings),
                  inputFormat: standardizedPrompt.type,
                  prompt: promptMessages,
                  providerMetadata: providerOptions,
                  abortSignal,
                  headers
                });
                const responseData = {
                  id: (_b2 = (_a18 = result2.response) == null ? void 0 : _a18.id) != null ? _b2 : generateId3(),
                  timestamp: (_d2 = (_c2 = result2.response) == null ? void 0 : _c2.timestamp) != null ? _d2 : currentDate(),
                  modelId: (_f = (_e = result2.response) == null ? void 0 : _e.modelId) != null ? _f : model.modelId
                };
                if (result2.text === void 0) {
                  throw new NoObjectGeneratedError({
                    message: "No object generated: the model did not return a response.",
                    response: responseData,
                    usage: calculateLanguageModelUsage(result2.usage),
                    finishReason: result2.finishReason
                  });
                }
                span2.setAttributes(
                  selectTelemetryAttributes({
                    telemetry,
                    attributes: {
                      "ai.response.finishReason": result2.finishReason,
                      "ai.response.object": { output: () => result2.text },
                      "ai.response.id": responseData.id,
                      "ai.response.model": responseData.modelId,
                      "ai.response.timestamp": responseData.timestamp.toISOString(),
                      "ai.response.providerMetadata": JSON.stringify(
                        result2.providerMetadata
                      ),
                      "ai.usage.promptTokens": result2.usage.promptTokens,
                      "ai.usage.completionTokens": result2.usage.completionTokens,
                      // standardized gen-ai llm span attributes:
                      "gen_ai.response.finish_reasons": [result2.finishReason],
                      "gen_ai.response.id": responseData.id,
                      "gen_ai.response.model": responseData.modelId,
                      "gen_ai.usage.prompt_tokens": result2.usage.promptTokens,
                      "gen_ai.usage.completion_tokens": result2.usage.completionTokens
                    }
                  })
                );
                return { ...result2, objectText: result2.text, responseData };
              }
            })
          );
          result = generateResult.objectText;
          finishReason = generateResult.finishReason;
          usage = generateResult.usage;
          warnings = generateResult.warnings;
          rawResponse = generateResult.rawResponse;
          logprobs = generateResult.logprobs;
          resultProviderMetadata = generateResult.providerMetadata;
          request = (_b = generateResult.request) != null ? _b : {};
          response = generateResult.responseData;
          break;
        }
        case "tool": {
          const standardizedPrompt = standardizePrompt({
            prompt: { system, prompt, messages },
            tools: void 0
          });
          const promptMessages = await convertToLanguageModelPrompt({
            prompt: standardizedPrompt,
            modelSupportsImageUrls: model.supportsImageUrls,
            modelSupportsUrl: (_c = model.supportsUrl) == null ? void 0 : _c.bind(model)
            // support 'this' context,
          });
          const inputFormat = standardizedPrompt.type;
          const generateResult = await retry(
            () => recordSpan({
              name: "ai.generateObject.doGenerate",
              attributes: selectTelemetryAttributes({
                telemetry,
                attributes: {
                  ...assembleOperationName({
                    operationId: "ai.generateObject.doGenerate",
                    telemetry
                  }),
                  ...baseTelemetryAttributes,
                  "ai.prompt.format": {
                    input: () => inputFormat
                  },
                  "ai.prompt.messages": {
                    input: () => stringifyForTelemetry(promptMessages)
                  },
                  "ai.settings.mode": mode,
                  // standardized gen-ai llm span attributes:
                  "gen_ai.system": model.provider,
                  "gen_ai.request.model": model.modelId,
                  "gen_ai.request.frequency_penalty": settings.frequencyPenalty,
                  "gen_ai.request.max_tokens": settings.maxTokens,
                  "gen_ai.request.presence_penalty": settings.presencePenalty,
                  "gen_ai.request.temperature": settings.temperature,
                  "gen_ai.request.top_k": settings.topK,
                  "gen_ai.request.top_p": settings.topP
                }
              }),
              tracer,
              fn: async (span2) => {
                var _a18, _b2, _c2, _d2, _e, _f, _g, _h;
                const result2 = await model.doGenerate({
                  mode: {
                    type: "object-tool",
                    tool: {
                      type: "function",
                      name: schemaName != null ? schemaName : "json",
                      description: schemaDescription != null ? schemaDescription : "Respond with a JSON object.",
                      parameters: outputStrategy.jsonSchema
                    }
                  },
                  ...prepareCallSettings(settings),
                  inputFormat,
                  prompt: promptMessages,
                  providerMetadata: providerOptions,
                  abortSignal,
                  headers
                });
                const objectText = (_b2 = (_a18 = result2.toolCalls) == null ? void 0 : _a18[0]) == null ? void 0 : _b2.args;
                const responseData = {
                  id: (_d2 = (_c2 = result2.response) == null ? void 0 : _c2.id) != null ? _d2 : generateId3(),
                  timestamp: (_f = (_e = result2.response) == null ? void 0 : _e.timestamp) != null ? _f : currentDate(),
                  modelId: (_h = (_g = result2.response) == null ? void 0 : _g.modelId) != null ? _h : model.modelId
                };
                if (objectText === void 0) {
                  throw new NoObjectGeneratedError({
                    message: "No object generated: the tool was not called.",
                    response: responseData,
                    usage: calculateLanguageModelUsage(result2.usage),
                    finishReason: result2.finishReason
                  });
                }
                span2.setAttributes(
                  selectTelemetryAttributes({
                    telemetry,
                    attributes: {
                      "ai.response.finishReason": result2.finishReason,
                      "ai.response.object": { output: () => objectText },
                      "ai.response.id": responseData.id,
                      "ai.response.model": responseData.modelId,
                      "ai.response.timestamp": responseData.timestamp.toISOString(),
                      "ai.response.providerMetadata": JSON.stringify(
                        result2.providerMetadata
                      ),
                      "ai.usage.promptTokens": result2.usage.promptTokens,
                      "ai.usage.completionTokens": result2.usage.completionTokens,
                      // standardized gen-ai llm span attributes:
                      "gen_ai.response.finish_reasons": [result2.finishReason],
                      "gen_ai.response.id": responseData.id,
                      "gen_ai.response.model": responseData.modelId,
                      "gen_ai.usage.input_tokens": result2.usage.promptTokens,
                      "gen_ai.usage.output_tokens": result2.usage.completionTokens
                    }
                  })
                );
                return { ...result2, objectText, responseData };
              }
            })
          );
          result = generateResult.objectText;
          finishReason = generateResult.finishReason;
          usage = generateResult.usage;
          warnings = generateResult.warnings;
          rawResponse = generateResult.rawResponse;
          logprobs = generateResult.logprobs;
          resultProviderMetadata = generateResult.providerMetadata;
          request = (_d = generateResult.request) != null ? _d : {};
          response = generateResult.responseData;
          break;
        }
        case void 0: {
          throw new Error(
            "Model does not have a default object generation mode."
          );
        }
        default: {
          const _exhaustiveCheck = mode;
          throw new Error(`Unsupported mode: ${_exhaustiveCheck}`);
        }
      }
      function processResult(result2) {
        const parseResult = safeParseJSON({ text: result2 });
        if (!parseResult.success) {
          throw new NoObjectGeneratedError({
            message: "No object generated: could not parse the response.",
            cause: parseResult.error,
            text: result2,
            response,
            usage: calculateLanguageModelUsage(usage),
            finishReason
          });
        }
        const validationResult = outputStrategy.validateFinalResult(
          parseResult.value,
          {
            text: result2,
            response,
            usage: calculateLanguageModelUsage(usage)
          }
        );
        if (!validationResult.success) {
          throw new NoObjectGeneratedError({
            message: "No object generated: response did not match schema.",
            cause: validationResult.error,
            text: result2,
            response,
            usage: calculateLanguageModelUsage(usage),
            finishReason
          });
        }
        return validationResult.value;
      }
      let object2;
      try {
        object2 = processResult(result);
      } catch (error) {
        if (repairText != null && NoObjectGeneratedError.isInstance(error) && (JSONParseError.isInstance(error.cause) || TypeValidationError.isInstance(error.cause))) {
          const repairedText = await repairText({
            text: result,
            error: error.cause
          });
          if (repairedText === null) {
            throw error;
          }
          object2 = processResult(repairedText);
        } else {
          throw error;
        }
      }
      span.setAttributes(
        selectTelemetryAttributes({
          telemetry,
          attributes: {
            "ai.response.finishReason": finishReason,
            "ai.response.object": {
              output: () => JSON.stringify(object2)
            },
            "ai.usage.promptTokens": usage.promptTokens,
            "ai.usage.completionTokens": usage.completionTokens
          }
        })
      );
      return new DefaultGenerateObjectResult({
        object: object2,
        finishReason,
        usage: calculateLanguageModelUsage(usage),
        warnings,
        request,
        response: {
          ...response,
          headers: rawResponse == null ? void 0 : rawResponse.headers,
          body: rawResponse == null ? void 0 : rawResponse.body
        },
        logprobs,
        providerMetadata: resultProviderMetadata
      });
    }
  });
}
var DefaultGenerateObjectResult = class {
  constructor(options) {
    this.object = options.object;
    this.finishReason = options.finishReason;
    this.usage = options.usage;
    this.warnings = options.warnings;
    this.providerMetadata = options.providerMetadata;
    this.experimental_providerMetadata = options.providerMetadata;
    this.response = options.response;
    this.request = options.request;
    this.logprobs = options.logprobs;
  }
  toJsonResponse(init) {
    var _a17;
    return new Response(JSON.stringify(this.object), {
      status: (_a17 = init == null ? void 0 : init.status) != null ? _a17 : 200,
      headers: prepareResponseHeaders(init == null ? void 0 : init.headers, {
        contentType: "application/json; charset=utf-8"
      })
    });
  }
};
var originalGenerateId2 = createIdGenerator({ prefix: "aiobj", size: 24 });
var name92 = "AI_NoOutputSpecifiedError";
var marker92 = `vercel.ai.error.${name92}`;
var symbol92 = Symbol.for(marker92);
var _a92;
_a92 = symbol92;
var name102 = "AI_ToolExecutionError";
var marker102 = `vercel.ai.error.${name102}`;
var symbol102 = Symbol.for(marker102);
var _a102;
_a102 = symbol102;
var name112 = "AI_InvalidToolArgumentsError";
var marker112 = `vercel.ai.error.${name112}`;
var symbol112 = Symbol.for(marker112);
var _a112;
_a112 = symbol112;
var name122 = "AI_NoSuchToolError";
var marker122 = `vercel.ai.error.${name122}`;
var symbol122 = Symbol.for(marker122);
var _a122;
_a122 = symbol122;
var name132 = "AI_ToolCallRepairError";
var marker132 = `vercel.ai.error.${name132}`;
var symbol132 = Symbol.for(marker132);
var _a132;
_a132 = symbol132;
var originalGenerateId3 = createIdGenerator({
  prefix: "aitxt",
  size: 24
});
var originalGenerateMessageId = createIdGenerator({
  prefix: "msg",
  size: 24
});
var output_exports = {};
__export2(output_exports, {
  object: () => object,
  text: () => text
});
var name142 = "AI_InvalidStreamPartError";
var marker142 = `vercel.ai.error.${name142}`;
var symbol142 = Symbol.for(marker142);
var _a142;
_a142 = symbol142;
var name15 = "AI_MCPClientError";
var marker152 = `vercel.ai.error.${name15}`;
var symbol152 = Symbol.for(marker152);
var _a152;
_a152 = symbol152;
var text = () => ({
  type: "text",
  responseFormat: () => ({ type: "text" }),
  injectIntoSystemPrompt({ system }) {
    return system;
  },
  parsePartial({ text: text2 }) {
    return { partial: text2 };
  },
  parseOutput({ text: text2 }) {
    return text2;
  }
});
var object = ({
  schema: inputSchema
}) => {
  const schema = asSchema(inputSchema);
  return {
    type: "object",
    responseFormat: ({ model }) => ({
      type: "json",
      schema: model.supportsStructuredOutputs ? schema.jsonSchema : void 0
    }),
    injectIntoSystemPrompt({ system, model }) {
      return model.supportsStructuredOutputs ? system : injectJsonInstruction({
        prompt: system,
        schema: schema.jsonSchema
      });
    },
    parsePartial({ text: text2 }) {
      const result = parsePartialJson(text2);
      switch (result.state) {
        case "failed-parse":
        case "undefined-input":
          return void 0;
        case "repaired-parse":
        case "successful-parse":
          return {
            // Note: currently no validation of partial results:
            partial: result.value
          };
        default: {
          const _exhaustiveCheck = result.state;
          throw new Error(`Unsupported parse state: ${_exhaustiveCheck}`);
        }
      }
    },
    parseOutput({ text: text2 }, context) {
      const parseResult = safeParseJSON({ text: text2 });
      if (!parseResult.success) {
        throw new NoObjectGeneratedError({
          message: "No object generated: could not parse the response.",
          cause: parseResult.error,
          text: text2,
          response: context.response,
          usage: context.usage,
          finishReason: context.finishReason
        });
      }
      const validationResult = safeValidateTypes({
        value: parseResult.value,
        schema
      });
      if (!validationResult.success) {
        throw new NoObjectGeneratedError({
          message: "No object generated: response did not match schema.",
          cause: validationResult.error,
          text: text2,
          response: context.response,
          usage: context.usage,
          finishReason: context.finishReason
        });
      }
      return validationResult.value;
    }
  };
};
function mergeStreams(stream1, stream2) {
  const reader1 = stream1.getReader();
  const reader2 = stream2.getReader();
  let lastRead1 = void 0;
  let lastRead2 = void 0;
  let stream1Done = false;
  let stream2Done = false;
  async function readStream1(controller) {
    try {
      if (lastRead1 == null) {
        lastRead1 = reader1.read();
      }
      const result = await lastRead1;
      lastRead1 = void 0;
      if (!result.done) {
        controller.enqueue(result.value);
      } else {
        controller.close();
      }
    } catch (error) {
      controller.error(error);
    }
  }
  async function readStream2(controller) {
    try {
      if (lastRead2 == null) {
        lastRead2 = reader2.read();
      }
      const result = await lastRead2;
      lastRead2 = void 0;
      if (!result.done) {
        controller.enqueue(result.value);
      } else {
        controller.close();
      }
    } catch (error) {
      controller.error(error);
    }
  }
  return new ReadableStream({
    async pull(controller) {
      try {
        if (stream1Done) {
          await readStream2(controller);
          return;
        }
        if (stream2Done) {
          await readStream1(controller);
          return;
        }
        if (lastRead1 == null) {
          lastRead1 = reader1.read();
        }
        if (lastRead2 == null) {
          lastRead2 = reader2.read();
        }
        const { result, reader } = await Promise.race([
          lastRead1.then((result2) => ({ result: result2, reader: reader1 })),
          lastRead2.then((result2) => ({ result: result2, reader: reader2 }))
        ]);
        if (!result.done) {
          controller.enqueue(result.value);
        }
        if (reader === reader1) {
          lastRead1 = void 0;
          if (result.done) {
            await readStream2(controller);
            stream1Done = true;
          }
        } else {
          lastRead2 = void 0;
          if (result.done) {
            stream2Done = true;
            await readStream1(controller);
          }
        }
      } catch (error) {
        controller.error(error);
      }
    },
    cancel() {
      reader1.cancel();
      reader2.cancel();
    }
  });
}
var originalGenerateId4 = createIdGenerator({
  prefix: "aitxt",
  size: 24
});
var originalGenerateMessageId2 = createIdGenerator({
  prefix: "msg",
  size: 24
});
var name16 = "AI_NoSuchProviderError";
var marker16 = `vercel.ai.error.${name16}`;
var symbol16 = Symbol.for(marker16);
var _a16;
_a16 = symbol16;
var ClientOrServerImplementationSchema = z.object({
  name: z.string(),
  version: z.string()
}).passthrough();
var BaseParamsSchema = z.object({
  _meta: z.optional(z.object({}).passthrough())
}).passthrough();
var ResultSchema = BaseParamsSchema;
var RequestSchema = z.object({
  method: z.string(),
  params: z.optional(BaseParamsSchema)
});
var ServerCapabilitiesSchema = z.object({
  experimental: z.optional(z.object({}).passthrough()),
  logging: z.optional(z.object({}).passthrough()),
  prompts: z.optional(
    z.object({
      listChanged: z.optional(z.boolean())
    }).passthrough()
  ),
  resources: z.optional(
    z.object({
      subscribe: z.optional(z.boolean()),
      listChanged: z.optional(z.boolean())
    }).passthrough()
  ),
  tools: z.optional(
    z.object({
      listChanged: z.optional(z.boolean())
    }).passthrough()
  )
}).passthrough();
var InitializeResultSchema = ResultSchema.extend({
  protocolVersion: z.string(),
  capabilities: ServerCapabilitiesSchema,
  serverInfo: ClientOrServerImplementationSchema,
  instructions: z.optional(z.string())
});
var PaginatedResultSchema = ResultSchema.extend({
  nextCursor: z.optional(z.string())
});
var ToolSchema = z.object({
  name: z.string(),
  description: z.optional(z.string()),
  inputSchema: z.object({
    type: z.literal("object"),
    properties: z.optional(z.object({}).passthrough())
  }).passthrough()
}).passthrough();
var ListToolsResultSchema = PaginatedResultSchema.extend({
  tools: z.array(ToolSchema)
});
var TextContentSchema = z.object({
  type: z.literal("text"),
  text: z.string()
}).passthrough();
var ImageContentSchema = z.object({
  type: z.literal("image"),
  data: z.string().base64(),
  mimeType: z.string()
}).passthrough();
var ResourceContentsSchema = z.object({
  /**
   * The URI of this resource.
   */
  uri: z.string(),
  /**
   * The MIME type of this resource, if known.
   */
  mimeType: z.optional(z.string())
}).passthrough();
var TextResourceContentsSchema = ResourceContentsSchema.extend({
  text: z.string()
});
var BlobResourceContentsSchema = ResourceContentsSchema.extend({
  blob: z.string().base64()
});
var EmbeddedResourceSchema = z.object({
  type: z.literal("resource"),
  resource: z.union([TextResourceContentsSchema, BlobResourceContentsSchema])
}).passthrough();
var CallToolResultSchema = ResultSchema.extend({
  content: z.array(
    z.union([TextContentSchema, ImageContentSchema, EmbeddedResourceSchema])
  ),
  isError: z.boolean().default(false).optional()
}).or(
  ResultSchema.extend({
    toolResult: z.unknown()
  })
);
var JSONRPC_VERSION = "2.0";
var JSONRPCRequestSchema = z.object({
  jsonrpc: z.literal(JSONRPC_VERSION),
  id: z.union([z.string(), z.number().int()])
}).merge(RequestSchema).strict();
var JSONRPCResponseSchema = z.object({
  jsonrpc: z.literal(JSONRPC_VERSION),
  id: z.union([z.string(), z.number().int()]),
  result: ResultSchema
}).strict();
var JSONRPCErrorSchema = z.object({
  jsonrpc: z.literal(JSONRPC_VERSION),
  id: z.union([z.string(), z.number().int()]),
  error: z.object({
    code: z.number().int(),
    message: z.string(),
    data: z.optional(z.unknown())
  })
}).strict();
var JSONRPCNotificationSchema = z.object({
  jsonrpc: z.literal(JSONRPC_VERSION)
}).merge(
  z.object({
    method: z.string(),
    params: z.optional(BaseParamsSchema)
  })
).strict();
var JSONRPCMessageSchema = z.union([
  JSONRPCRequestSchema,
  JSONRPCNotificationSchema,
  JSONRPCResponseSchema,
  JSONRPCErrorSchema
]);
var langchain_adapter_exports = {};
__export2(langchain_adapter_exports, {
  mergeIntoDataStream: () => mergeIntoDataStream,
  toDataStream: () => toDataStream,
  toDataStreamResponse: () => toDataStreamResponse
});
function createCallbacksTransformer(callbacks = {}) {
  const textEncoder = new TextEncoder();
  let aggregatedResponse = "";
  return new TransformStream({
    async start() {
      if (callbacks.onStart)
        await callbacks.onStart();
    },
    async transform(message, controller) {
      controller.enqueue(textEncoder.encode(message));
      aggregatedResponse += message;
      if (callbacks.onToken)
        await callbacks.onToken(message);
      if (callbacks.onText && typeof message === "string") {
        await callbacks.onText(message);
      }
    },
    async flush() {
      if (callbacks.onCompletion) {
        await callbacks.onCompletion(aggregatedResponse);
      }
      if (callbacks.onFinal) {
        await callbacks.onFinal(aggregatedResponse);
      }
    }
  });
}
function toDataStreamInternal(stream, callbacks) {
  return stream.pipeThrough(
    new TransformStream({
      transform: async (value, controller) => {
        var _a17;
        if (typeof value === "string") {
          controller.enqueue(value);
          return;
        }
        if ("event" in value) {
          if (value.event === "on_chat_model_stream") {
            forwardAIMessageChunk(
              (_a17 = value.data) == null ? void 0 : _a17.chunk,
              controller
            );
          }
          return;
        }
        forwardAIMessageChunk(value, controller);
      }
    })
  ).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(new TextDecoderStream()).pipeThrough(
    new TransformStream({
      transform: async (chunk, controller) => {
        controller.enqueue(formatDataStreamPart("text", chunk));
      }
    })
  );
}
function toDataStream(stream, callbacks) {
  return toDataStreamInternal(stream, callbacks).pipeThrough(
    new TextEncoderStream()
  );
}
function toDataStreamResponse(stream, options) {
  var _a17;
  const dataStream = toDataStreamInternal(
    stream,
    options == null ? void 0 : options.callbacks
  ).pipeThrough(new TextEncoderStream());
  const data = options == null ? void 0 : options.data;
  const init = options == null ? void 0 : options.init;
  const responseStream = data ? mergeStreams(data.stream, dataStream) : dataStream;
  return new Response(responseStream, {
    status: (_a17 = init == null ? void 0 : init.status) != null ? _a17 : 200,
    statusText: init == null ? void 0 : init.statusText,
    headers: prepareResponseHeaders(init == null ? void 0 : init.headers, {
      contentType: "text/plain; charset=utf-8",
      dataStreamVersion: "v1"
    })
  });
}
function mergeIntoDataStream(stream, options) {
  options.dataStream.merge(toDataStreamInternal(stream, options.callbacks));
}
function forwardAIMessageChunk(chunk, controller) {
  if (typeof chunk.content === "string") {
    controller.enqueue(chunk.content);
  } else {
    const content = chunk.content;
    for (const item of content) {
      if (item.type === "text") {
        controller.enqueue(item.text);
      }
    }
  }
}
var llamaindex_adapter_exports = {};
__export2(llamaindex_adapter_exports, {
  mergeIntoDataStream: () => mergeIntoDataStream2,
  toDataStream: () => toDataStream2,
  toDataStreamResponse: () => toDataStreamResponse2
});
function toDataStreamInternal2(stream, callbacks) {
  const trimStart = trimStartOfStream();
  return convertAsyncIteratorToReadableStream(stream[Symbol.asyncIterator]()).pipeThrough(
    new TransformStream({
      async transform(message, controller) {
        controller.enqueue(trimStart(message.delta));
      }
    })
  ).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(new TextDecoderStream()).pipeThrough(
    new TransformStream({
      transform: async (chunk, controller) => {
        controller.enqueue(formatDataStreamPart("text", chunk));
      }
    })
  );
}
function toDataStream2(stream, callbacks) {
  return toDataStreamInternal2(stream, callbacks).pipeThrough(
    new TextEncoderStream()
  );
}
function toDataStreamResponse2(stream, options = {}) {
  var _a17;
  const { init, data, callbacks } = options;
  const dataStream = toDataStreamInternal2(stream, callbacks).pipeThrough(
    new TextEncoderStream()
  );
  const responseStream = data ? mergeStreams(data.stream, dataStream) : dataStream;
  return new Response(responseStream, {
    status: (_a17 = init == null ? void 0 : init.status) != null ? _a17 : 200,
    statusText: init == null ? void 0 : init.statusText,
    headers: prepareResponseHeaders(init == null ? void 0 : init.headers, {
      contentType: "text/plain; charset=utf-8",
      dataStreamVersion: "v1"
    })
  });
}
function mergeIntoDataStream2(stream, options) {
  options.dataStream.merge(toDataStreamInternal2(stream, options.callbacks));
}
function trimStartOfStream() {
  let isStreamStart = true;
  return (text2) => {
    if (isStreamStart) {
      text2 = text2.trimStart();
      if (text2)
        isStreamStart = false;
    }
    return text2;
  };
}
var HANGING_STREAM_WARNING_TIME_MS = 15 * 1e3;

// ../../node_modules/.pnpm/@ai-sdk+openai@1.3.23_zod@3.24.2/node_modules/@ai-sdk/openai/dist/index.mjs
init_esm();
function convertToOpenAIChatMessages({
  prompt,
  useLegacyFunctionCalling = false,
  systemMessageMode = "system"
}) {
  const messages = [];
  const warnings = [];
  for (const { role, content } of prompt) {
    switch (role) {
      case "system": {
        switch (systemMessageMode) {
          case "system": {
            messages.push({ role: "system", content });
            break;
          }
          case "developer": {
            messages.push({ role: "developer", content });
            break;
          }
          case "remove": {
            warnings.push({
              type: "other",
              message: "system messages are removed for this model"
            });
            break;
          }
          default: {
            const _exhaustiveCheck = systemMessageMode;
            throw new Error(
              `Unsupported system message mode: ${_exhaustiveCheck}`
            );
          }
        }
        break;
      }
      case "user": {
        if (content.length === 1 && content[0].type === "text") {
          messages.push({ role: "user", content: content[0].text });
          break;
        }
        messages.push({
          role: "user",
          content: content.map((part, index) => {
            var _a17, _b, _c, _d;
            switch (part.type) {
              case "text": {
                return { type: "text", text: part.text };
              }
              case "image": {
                return {
                  type: "image_url",
                  image_url: {
                    url: part.image instanceof URL ? part.image.toString() : `data:${(_a17 = part.mimeType) != null ? _a17 : "image/jpeg"};base64,${convertUint8ArrayToBase64(part.image)}`,
                    // OpenAI specific extension: image detail
                    detail: (_c = (_b = part.providerMetadata) == null ? void 0 : _b.openai) == null ? void 0 : _c.imageDetail
                  }
                };
              }
              case "file": {
                if (part.data instanceof URL) {
                  throw new UnsupportedFunctionalityError({
                    functionality: "'File content parts with URL data' functionality not supported."
                  });
                }
                switch (part.mimeType) {
                  case "audio/wav": {
                    return {
                      type: "input_audio",
                      input_audio: { data: part.data, format: "wav" }
                    };
                  }
                  case "audio/mp3":
                  case "audio/mpeg": {
                    return {
                      type: "input_audio",
                      input_audio: { data: part.data, format: "mp3" }
                    };
                  }
                  case "application/pdf": {
                    return {
                      type: "file",
                      file: {
                        filename: (_d = part.filename) != null ? _d : `part-${index}.pdf`,
                        file_data: `data:application/pdf;base64,${part.data}`
                      }
                    };
                  }
                  default: {
                    throw new UnsupportedFunctionalityError({
                      functionality: `File content part type ${part.mimeType} in user messages`
                    });
                  }
                }
              }
            }
          })
        });
        break;
      }
      case "assistant": {
        let text2 = "";
        const toolCalls = [];
        for (const part of content) {
          switch (part.type) {
            case "text": {
              text2 += part.text;
              break;
            }
            case "tool-call": {
              toolCalls.push({
                id: part.toolCallId,
                type: "function",
                function: {
                  name: part.toolName,
                  arguments: JSON.stringify(part.args)
                }
              });
              break;
            }
          }
        }
        if (useLegacyFunctionCalling) {
          if (toolCalls.length > 1) {
            throw new UnsupportedFunctionalityError({
              functionality: "useLegacyFunctionCalling with multiple tool calls in one message"
            });
          }
          messages.push({
            role: "assistant",
            content: text2,
            function_call: toolCalls.length > 0 ? toolCalls[0].function : void 0
          });
        } else {
          messages.push({
            role: "assistant",
            content: text2,
            tool_calls: toolCalls.length > 0 ? toolCalls : void 0
          });
        }
        break;
      }
      case "tool": {
        for (const toolResponse of content) {
          if (useLegacyFunctionCalling) {
            messages.push({
              role: "function",
              name: toolResponse.toolName,
              content: JSON.stringify(toolResponse.result)
            });
          } else {
            messages.push({
              role: "tool",
              tool_call_id: toolResponse.toolCallId,
              content: JSON.stringify(toolResponse.result)
            });
          }
        }
        break;
      }
      default: {
        const _exhaustiveCheck = role;
        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);
      }
    }
  }
  return { messages, warnings };
}
function mapOpenAIChatLogProbsOutput(logprobs) {
  var _a17, _b;
  return (_b = (_a17 = logprobs == null ? void 0 : logprobs.content) == null ? void 0 : _a17.map(({ token, logprob, top_logprobs }) => ({
    token,
    logprob,
    topLogprobs: top_logprobs ? top_logprobs.map(({ token: token2, logprob: logprob2 }) => ({
      token: token2,
      logprob: logprob2
    })) : []
  }))) != null ? _b : void 0;
}
function mapOpenAIFinishReason(finishReason) {
  switch (finishReason) {
    case "stop":
      return "stop";
    case "length":
      return "length";
    case "content_filter":
      return "content-filter";
    case "function_call":
    case "tool_calls":
      return "tool-calls";
    default:
      return "unknown";
  }
}
var openaiErrorDataSchema = z.object({
  error: z.object({
    message: z.string(),
    // The additional information below is handled loosely to support
    // OpenAI-compatible providers that have slightly different error
    // responses:
    type: z.string().nullish(),
    param: z.any().nullish(),
    code: z.union([z.string(), z.number()]).nullish()
  })
});
var openaiFailedResponseHandler = createJsonErrorResponseHandler({
  errorSchema: openaiErrorDataSchema,
  errorToMessage: (data) => data.error.message
});
function getResponseMetadata({
  id,
  model,
  created
}) {
  return {
    id: id != null ? id : void 0,
    modelId: model != null ? model : void 0,
    timestamp: created != null ? new Date(created * 1e3) : void 0
  };
}
function prepareTools({
  mode,
  useLegacyFunctionCalling = false,
  structuredOutputs
}) {
  var _a17;
  const tools = ((_a17 = mode.tools) == null ? void 0 : _a17.length) ? mode.tools : void 0;
  const toolWarnings = [];
  if (tools == null) {
    return { tools: void 0, tool_choice: void 0, toolWarnings };
  }
  const toolChoice = mode.toolChoice;
  if (useLegacyFunctionCalling) {
    const openaiFunctions = [];
    for (const tool of tools) {
      if (tool.type === "provider-defined") {
        toolWarnings.push({ type: "unsupported-tool", tool });
      } else {
        openaiFunctions.push({
          name: tool.name,
          description: tool.description,
          parameters: tool.parameters
        });
      }
    }
    if (toolChoice == null) {
      return {
        functions: openaiFunctions,
        function_call: void 0,
        toolWarnings
      };
    }
    const type2 = toolChoice.type;
    switch (type2) {
      case "auto":
      case "none":
      case void 0:
        return {
          functions: openaiFunctions,
          function_call: void 0,
          toolWarnings
        };
      case "required":
        throw new UnsupportedFunctionalityError({
          functionality: "useLegacyFunctionCalling and toolChoice: required"
        });
      default:
        return {
          functions: openaiFunctions,
          function_call: { name: toolChoice.toolName },
          toolWarnings
        };
    }
  }
  const openaiTools2 = [];
  for (const tool of tools) {
    if (tool.type === "provider-defined") {
      toolWarnings.push({ type: "unsupported-tool", tool });
    } else {
      openaiTools2.push({
        type: "function",
        function: {
          name: tool.name,
          description: tool.description,
          parameters: tool.parameters,
          strict: structuredOutputs ? true : void 0
        }
      });
    }
  }
  if (toolChoice == null) {
    return { tools: openaiTools2, tool_choice: void 0, toolWarnings };
  }
  const type = toolChoice.type;
  switch (type) {
    case "auto":
    case "none":
    case "required":
      return { tools: openaiTools2, tool_choice: type, toolWarnings };
    case "tool":
      return {
        tools: openaiTools2,
        tool_choice: {
          type: "function",
          function: {
            name: toolChoice.toolName
          }
        },
        toolWarnings
      };
    default: {
      const _exhaustiveCheck = type;
      throw new UnsupportedFunctionalityError({
        functionality: `Unsupported tool choice type: ${_exhaustiveCheck}`
      });
    }
  }
}
var OpenAIChatLanguageModel = class {
  constructor(modelId, settings, config) {
    this.specificationVersion = "v1";
    this.modelId = modelId;
    this.settings = settings;
    this.config = config;
  }
  get supportsStructuredOutputs() {
    var _a17;
    return (_a17 = this.settings.structuredOutputs) != null ? _a17 : isReasoningModel(this.modelId);
  }
  get defaultObjectGenerationMode() {
    if (isAudioModel(this.modelId)) {
      return "tool";
    }
    return this.supportsStructuredOutputs ? "json" : "tool";
  }
  get provider() {
    return this.config.provider;
  }
  get supportsImageUrls() {
    return !this.settings.downloadImages;
  }
  getArgs({
    mode,
    prompt,
    maxTokens,
    temperature,
    topP,
    topK,
    frequencyPenalty,
    presencePenalty,
    stopSequences,
    responseFormat,
    seed,
    providerMetadata
  }) {
    var _a17, _b, _c, _d, _e, _f, _g, _h;
    const type = mode.type;
    const warnings = [];
    if (topK != null) {
      warnings.push({
        type: "unsupported-setting",
        setting: "topK"
      });
    }
    if ((responseFormat == null ? void 0 : responseFormat.type) === "json" && responseFormat.schema != null && !this.supportsStructuredOutputs) {
      warnings.push({
        type: "unsupported-setting",
        setting: "responseFormat",
        details: "JSON response format schema is only supported with structuredOutputs"
      });
    }
    const useLegacyFunctionCalling = this.settings.useLegacyFunctionCalling;
    if (useLegacyFunctionCalling && this.settings.parallelToolCalls === true) {
      throw new UnsupportedFunctionalityError({
        functionality: "useLegacyFunctionCalling with parallelToolCalls"
      });
    }
    if (useLegacyFunctionCalling && this.supportsStructuredOutputs) {
      throw new UnsupportedFunctionalityError({
        functionality: "structuredOutputs with useLegacyFunctionCalling"
      });
    }
    const { messages, warnings: messageWarnings } = convertToOpenAIChatMessages(
      {
        prompt,
        useLegacyFunctionCalling,
        systemMessageMode: getSystemMessageMode(this.modelId)
      }
    );
    warnings.push(...messageWarnings);
    const baseArgs = {
      // model id:
      model: this.modelId,
      // model specific settings:
      logit_bias: this.settings.logitBias,
      logprobs: this.settings.logprobs === true || typeof this.settings.logprobs === "number" ? true : void 0,
      top_logprobs: typeof this.settings.logprobs === "number" ? this.settings.logprobs : typeof this.settings.logprobs === "boolean" ? this.settings.logprobs ? 0 : void 0 : void 0,
      user: this.settings.user,
      parallel_tool_calls: this.settings.parallelToolCalls,
      // standardized settings:
      max_tokens: maxTokens,
      temperature,
      top_p: topP,
      frequency_penalty: frequencyPenalty,
      presence_penalty: presencePenalty,
      response_format: (responseFormat == null ? void 0 : responseFormat.type) === "json" ? this.supportsStructuredOutputs && responseFormat.schema != null ? {
        type: "json_schema",
        json_schema: {
          schema: responseFormat.schema,
          strict: true,
          name: (_a17 = responseFormat.name) != null ? _a17 : "response",
          description: responseFormat.description
        }
      } : { type: "json_object" } : void 0,
      stop: stopSequences,
      seed,
      // openai specific settings:
      // TODO remove in next major version; we auto-map maxTokens now
      max_completion_tokens: (_b = providerMetadata == null ? void 0 : providerMetadata.openai) == null ? void 0 : _b.maxCompletionTokens,
      store: (_c = providerMetadata == null ? void 0 : providerMetadata.openai) == null ? void 0 : _c.store,
      metadata: (_d = providerMetadata == null ? void 0 : providerMetadata.openai) == null ? void 0 : _d.metadata,
      prediction: (_e = providerMetadata == null ? void 0 : providerMetadata.openai) == null ? void 0 : _e.prediction,
      reasoning_effort: (_g = (_f = providerMetadata == null ? void 0 : providerMetadata.openai) == null ? void 0 : _f.reasoningEffort) != null ? _g : this.settings.reasoningEffort,
      // messages:
      messages
    };
    if (isReasoningModel(this.modelId)) {
      if (baseArgs.temperature != null) {
        baseArgs.temperature = void 0;
        warnings.push({
          type: "unsupported-setting",
          setting: "temperature",
          details: "temperature is not supported for reasoning models"
        });
      }
      if (baseArgs.top_p != null) {
        baseArgs.top_p = void 0;
        warnings.push({
          type: "unsupported-setting",
          setting: "topP",
          details: "topP is not supported for reasoning models"
        });
      }
      if (baseArgs.frequency_penalty != null) {
        baseArgs.frequency_penalty = void 0;
        warnings.push({
          type: "unsupported-setting",
          setting: "frequencyPenalty",
          details: "frequencyPenalty is not supported for reasoning models"
        });
      }
      if (baseArgs.presence_penalty != null) {
        baseArgs.presence_penalty = void 0;
        warnings.push({
          type: "unsupported-setting",
          setting: "presencePenalty",
          details: "presencePenalty is not supported for reasoning models"
        });
      }
      if (baseArgs.logit_bias != null) {
        baseArgs.logit_bias = void 0;
        warnings.push({
          type: "other",
          message: "logitBias is not supported for reasoning models"
        });
      }
      if (baseArgs.logprobs != null) {
        baseArgs.logprobs = void 0;
        warnings.push({
          type: "other",
          message: "logprobs is not supported for reasoning models"
        });
      }
      if (baseArgs.top_logprobs != null) {
        baseArgs.top_logprobs = void 0;
        warnings.push({
          type: "other",
          message: "topLogprobs is not supported for reasoning models"
        });
      }
      if (baseArgs.max_tokens != null) {
        if (baseArgs.max_completion_tokens == null) {
          baseArgs.max_completion_tokens = baseArgs.max_tokens;
        }
        baseArgs.max_tokens = void 0;
      }
    } else if (this.modelId.startsWith("gpt-4o-search-preview") || this.modelId.startsWith("gpt-4o-mini-search-preview")) {
      if (baseArgs.temperature != null) {
        baseArgs.temperature = void 0;
        warnings.push({
          type: "unsupported-setting",
          setting: "temperature",
          details: "temperature is not supported for the search preview models and has been removed."
        });
      }
    }
    switch (type) {
      case "regular": {
        const { tools, tool_choice, functions, function_call, toolWarnings } = prepareTools({
          mode,
          useLegacyFunctionCalling,
          structuredOutputs: this.supportsStructuredOutputs
        });
        return {
          args: {
            ...baseArgs,
            tools,
            tool_choice,
            functions,
            function_call
          },
          warnings: [...warnings, ...toolWarnings]
        };
      }
      case "object-json": {
        return {
          args: {
            ...baseArgs,
            response_format: this.supportsStructuredOutputs && mode.schema != null ? {
              type: "json_schema",
              json_schema: {
                schema: mode.schema,
                strict: true,
                name: (_h = mode.name) != null ? _h : "response",
                description: mode.description
              }
            } : { type: "json_object" }
          },
          warnings
        };
      }
      case "object-tool": {
        return {
          args: useLegacyFunctionCalling ? {
            ...baseArgs,
            function_call: {
              name: mode.tool.name
            },
            functions: [
              {
                name: mode.tool.name,
                description: mode.tool.description,
                parameters: mode.tool.parameters
              }
            ]
          } : {
            ...baseArgs,
            tool_choice: {
              type: "function",
              function: { name: mode.tool.name }
            },
            tools: [
              {
                type: "function",
                function: {
                  name: mode.tool.name,
                  description: mode.tool.description,
                  parameters: mode.tool.parameters,
                  strict: this.supportsStructuredOutputs ? true : void 0
                }
              }
            ]
          },
          warnings
        };
      }
      default: {
        const _exhaustiveCheck = type;
        throw new Error(`Unsupported type: ${_exhaustiveCheck}`);
      }
    }
  }
  async doGenerate(options) {
    var _a17, _b, _c, _d, _e, _f, _g, _h;
    const { args: body, warnings } = this.getArgs(options);
    const {
      responseHeaders,
      value: response,
      rawValue: rawResponse
    } = await postJsonToApi({
      url: this.config.url({
        path: "/chat/completions",
        modelId: this.modelId
      }),
      headers: combineHeaders(this.config.headers(), options.headers),
      body,
      failedResponseHandler: openaiFailedResponseHandler,
      successfulResponseHandler: createJsonResponseHandler(
        openaiChatResponseSchema
      ),
      abortSignal: options.abortSignal,
      fetch: this.config.fetch
    });
    const { messages: rawPrompt, ...rawSettings } = body;
    const choice = response.choices[0];
    const completionTokenDetails = (_a17 = response.usage) == null ? void 0 : _a17.completion_tokens_details;
    const promptTokenDetails = (_b = response.usage) == null ? void 0 : _b.prompt_tokens_details;
    const providerMetadata = { openai: {} };
    if ((completionTokenDetails == null ? void 0 : completionTokenDetails.reasoning_tokens) != null) {
      providerMetadata.openai.reasoningTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.reasoning_tokens;
    }
    if ((completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens) != null) {
      providerMetadata.openai.acceptedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens;
    }
    if ((completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens) != null) {
      providerMetadata.openai.rejectedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens;
    }
    if ((promptTokenDetails == null ? void 0 : promptTokenDetails.cached_tokens) != null) {
      providerMetadata.openai.cachedPromptTokens = promptTokenDetails == null ? void 0 : promptTokenDetails.cached_tokens;
    }
    return {
      text: (_c = choice.message.content) != null ? _c : void 0,
      toolCalls: this.settings.useLegacyFunctionCalling && choice.message.function_call ? [
        {
          toolCallType: "function",
          toolCallId: generateId(),
          toolName: choice.message.function_call.name,
          args: choice.message.function_call.arguments
        }
      ] : (_d = choice.message.tool_calls) == null ? void 0 : _d.map((toolCall) => {
        var _a23;
        return {
          toolCallType: "function",
          toolCallId: (_a23 = toolCall.id) != null ? _a23 : generateId(),
          toolName: toolCall.function.name,
          args: toolCall.function.arguments
        };
      }),
      finishReason: mapOpenAIFinishReason(choice.finish_reason),
      usage: {
        promptTokens: (_f = (_e = response.usage) == null ? void 0 : _e.prompt_tokens) != null ? _f : NaN,
        completionTokens: (_h = (_g = response.usage) == null ? void 0 : _g.completion_tokens) != null ? _h : NaN
      },
      rawCall: { rawPrompt, rawSettings },
      rawResponse: { headers: responseHeaders, body: rawResponse },
      request: { body: JSON.stringify(body) },
      response: getResponseMetadata(response),
      warnings,
      logprobs: mapOpenAIChatLogProbsOutput(choice.logprobs),
      providerMetadata
    };
  }
  async doStream(options) {
    if (this.settings.simulateStreaming) {
      const result = await this.doGenerate(options);
      const simulatedStream = new ReadableStream({
        start(controller) {
          controller.enqueue({ type: "response-metadata", ...result.response });
          if (result.text) {
            controller.enqueue({
              type: "text-delta",
              textDelta: result.text
            });
          }
          if (result.toolCalls) {
            for (const toolCall of result.toolCalls) {
              controller.enqueue({
                type: "tool-call-delta",
                toolCallType: "function",
                toolCallId: toolCall.toolCallId,
                toolName: toolCall.toolName,
                argsTextDelta: toolCall.args
              });
              controller.enqueue({
                type: "tool-call",
                ...toolCall
              });
            }
          }
          controller.enqueue({
            type: "finish",
            finishReason: result.finishReason,
            usage: result.usage,
            logprobs: result.logprobs,
            providerMetadata: result.providerMetadata
          });
          controller.close();
        }
      });
      return {
        stream: simulatedStream,
        rawCall: result.rawCall,
        rawResponse: result.rawResponse,
        warnings: result.warnings
      };
    }
    const { args, warnings } = this.getArgs(options);
    const body = {
      ...args,
      stream: true,
      // only include stream_options when in strict compatibility mode:
      stream_options: this.config.compatibility === "strict" ? { include_usage: true } : void 0
    };
    const { responseHeaders, value: response } = await postJsonToApi({
      url: this.config.url({
        path: "/chat/completions",
        modelId: this.modelId
      }),
      headers: combineHeaders(this.config.headers(), options.headers),
      body,
      failedResponseHandler: openaiFailedResponseHandler,
      successfulResponseHandler: createEventSourceResponseHandler(
        openaiChatChunkSchema
      ),
      abortSignal: options.abortSignal,
      fetch: this.config.fetch
    });
    const { messages: rawPrompt, ...rawSettings } = args;
    const toolCalls = [];
    let finishReason = "unknown";
    let usage = {
      promptTokens: void 0,
      completionTokens: void 0
    };
    let logprobs;
    let isFirstChunk = true;
    const { useLegacyFunctionCalling } = this.settings;
    const providerMetadata = { openai: {} };
    return {
      stream: response.pipeThrough(
        new TransformStream({
          transform(chunk, controller) {
            var _a17, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
            if (!chunk.success) {
              finishReason = "error";
              controller.enqueue({ type: "error", error: chunk.error });
              return;
            }
            const value = chunk.value;
            if ("error" in value) {
              finishReason = "error";
              controller.enqueue({ type: "error", error: value.error });
              return;
            }
            if (isFirstChunk) {
              isFirstChunk = false;
              controller.enqueue({
                type: "response-metadata",
                ...getResponseMetadata(value)
              });
            }
            if (value.usage != null) {
              const {
                prompt_tokens,
                completion_tokens,
                prompt_tokens_details,
                completion_tokens_details
              } = value.usage;
              usage = {
                promptTokens: prompt_tokens != null ? prompt_tokens : void 0,
                completionTokens: completion_tokens != null ? completion_tokens : void 0
              };
              if ((completion_tokens_details == null ? void 0 : completion_tokens_details.reasoning_tokens) != null) {
                providerMetadata.openai.reasoningTokens = completion_tokens_details == null ? void 0 : completion_tokens_details.reasoning_tokens;
              }
              if ((completion_tokens_details == null ? void 0 : completion_tokens_details.accepted_prediction_tokens) != null) {
                providerMetadata.openai.acceptedPredictionTokens = completion_tokens_details == null ? void 0 : completion_tokens_details.accepted_prediction_tokens;
              }
              if ((completion_tokens_details == null ? void 0 : completion_tokens_details.rejected_prediction_tokens) != null) {
                providerMetadata.openai.rejectedPredictionTokens = completion_tokens_details == null ? void 0 : completion_tokens_details.rejected_prediction_tokens;
              }
              if ((prompt_tokens_details == null ? void 0 : prompt_tokens_details.cached_tokens) != null) {
                providerMetadata.openai.cachedPromptTokens = prompt_tokens_details == null ? void 0 : prompt_tokens_details.cached_tokens;
              }
            }
            const choice = value.choices[0];
            if ((choice == null ? void 0 : choice.finish_reason) != null) {
              finishReason = mapOpenAIFinishReason(choice.finish_reason);
            }
            if ((choice == null ? void 0 : choice.delta) == null) {
              return;
            }
            const delta = choice.delta;
            if (delta.content != null) {
              controller.enqueue({
                type: "text-delta",
                textDelta: delta.content
              });
            }
            const mappedLogprobs = mapOpenAIChatLogProbsOutput(
              choice == null ? void 0 : choice.logprobs
            );
            if (mappedLogprobs == null ? void 0 : mappedLogprobs.length) {
              if (logprobs === void 0) logprobs = [];
              logprobs.push(...mappedLogprobs);
            }
            const mappedToolCalls = useLegacyFunctionCalling && delta.function_call != null ? [
              {
                type: "function",
                id: generateId(),
                function: delta.function_call,
                index: 0
              }
            ] : delta.tool_calls;
            if (mappedToolCalls != null) {
              for (const toolCallDelta of mappedToolCalls) {
                const index = toolCallDelta.index;
                if (toolCalls[index] == null) {
                  if (toolCallDelta.type !== "function") {
                    throw new InvalidResponseDataError({
                      data: toolCallDelta,
                      message: `Expected 'function' type.`
                    });
                  }
                  if (toolCallDelta.id == null) {
                    throw new InvalidResponseDataError({
                      data: toolCallDelta,
                      message: `Expected 'id' to be a string.`
                    });
                  }
                  if (((_a17 = toolCallDelta.function) == null ? void 0 : _a17.name) == null) {
                    throw new InvalidResponseDataError({
                      data: toolCallDelta,
                      message: `Expected 'function.name' to be a string.`
                    });
                  }
                  toolCalls[index] = {
                    id: toolCallDelta.id,
                    type: "function",
                    function: {
                      name: toolCallDelta.function.name,
                      arguments: (_b = toolCallDelta.function.arguments) != null ? _b : ""
                    },
                    hasFinished: false
                  };
                  const toolCall2 = toolCalls[index];
                  if (((_c = toolCall2.function) == null ? void 0 : _c.name) != null && ((_d = toolCall2.function) == null ? void 0 : _d.arguments) != null) {
                    if (toolCall2.function.arguments.length > 0) {
                      controller.enqueue({
                        type: "tool-call-delta",
                        toolCallType: "function",
                        toolCallId: toolCall2.id,
                        toolName: toolCall2.function.name,
                        argsTextDelta: toolCall2.function.arguments
                      });
                    }
                    if (isParsableJson(toolCall2.function.arguments)) {
                      controller.enqueue({
                        type: "tool-call",
                        toolCallType: "function",
                        toolCallId: (_e = toolCall2.id) != null ? _e : generateId(),
                        toolName: toolCall2.function.name,
                        args: toolCall2.function.arguments
                      });
                      toolCall2.hasFinished = true;
                    }
                  }
                  continue;
                }
                const toolCall = toolCalls[index];
                if (toolCall.hasFinished) {
                  continue;
                }
                if (((_f = toolCallDelta.function) == null ? void 0 : _f.arguments) != null) {
                  toolCall.function.arguments += (_h = (_g = toolCallDelta.function) == null ? void 0 : _g.arguments) != null ? _h : "";
                }
                controller.enqueue({
                  type: "tool-call-delta",
                  toolCallType: "function",
                  toolCallId: toolCall.id,
                  toolName: toolCall.function.name,
                  argsTextDelta: (_i = toolCallDelta.function.arguments) != null ? _i : ""
                });
                if (((_j = toolCall.function) == null ? void 0 : _j.name) != null && ((_k = toolCall.function) == null ? void 0 : _k.arguments) != null && isParsableJson(toolCall.function.arguments)) {
                  controller.enqueue({
                    type: "tool-call",
                    toolCallType: "function",
                    toolCallId: (_l = toolCall.id) != null ? _l : generateId(),
                    toolName: toolCall.function.name,
                    args: toolCall.function.arguments
                  });
                  toolCall.hasFinished = true;
                }
              }
            }
          },
          flush(controller) {
            var _a17, _b;
            controller.enqueue({
              type: "finish",
              finishReason,
              logprobs,
              usage: {
                promptTokens: (_a17 = usage.promptTokens) != null ? _a17 : NaN,
                completionTokens: (_b = usage.completionTokens) != null ? _b : NaN
              },
              ...providerMetadata != null ? { providerMetadata } : {}
            });
          }
        })
      ),
      rawCall: { rawPrompt, rawSettings },
      rawResponse: { headers: responseHeaders },
      request: { body: JSON.stringify(body) },
      warnings
    };
  }
};
var openaiTokenUsageSchema = z.object({
  prompt_tokens: z.number().nullish(),
  completion_tokens: z.number().nullish(),
  prompt_tokens_details: z.object({
    cached_tokens: z.number().nullish()
  }).nullish(),
  completion_tokens_details: z.object({
    reasoning_tokens: z.number().nullish(),
    accepted_prediction_tokens: z.number().nullish(),
    rejected_prediction_tokens: z.number().nullish()
  }).nullish()
}).nullish();
var openaiChatResponseSchema = z.object({
  id: z.string().nullish(),
  created: z.number().nullish(),
  model: z.string().nullish(),
  choices: z.array(
    z.object({
      message: z.object({
        role: z.literal("assistant").nullish(),
        content: z.string().nullish(),
        function_call: z.object({
          arguments: z.string(),
          name: z.string()
        }).nullish(),
        tool_calls: z.array(
          z.object({
            id: z.string().nullish(),
            type: z.literal("function"),
            function: z.object({
              name: z.string(),
              arguments: z.string()
            })
          })
        ).nullish()
      }),
      index: z.number(),
      logprobs: z.object({
        content: z.array(
          z.object({
            token: z.string(),
            logprob: z.number(),
            top_logprobs: z.array(
              z.object({
                token: z.string(),
                logprob: z.number()
              })
            )
          })
        ).nullable()
      }).nullish(),
      finish_reason: z.string().nullish()
    })
  ),
  usage: openaiTokenUsageSchema
});
var openaiChatChunkSchema = z.union([
  z.object({
    id: z.string().nullish(),
    created: z.number().nullish(),
    model: z.string().nullish(),
    choices: z.array(
      z.object({
        delta: z.object({
          role: z.enum(["assistant"]).nullish(),
          content: z.string().nullish(),
          function_call: z.object({
            name: z.string().optional(),
            arguments: z.string().optional()
          }).nullish(),
          tool_calls: z.array(
            z.object({
              index: z.number(),
              id: z.string().nullish(),
              type: z.literal("function").nullish(),
              function: z.object({
                name: z.string().nullish(),
                arguments: z.string().nullish()
              })
            })
          ).nullish()
        }).nullish(),
        logprobs: z.object({
          content: z.array(
            z.object({
              token: z.string(),
              logprob: z.number(),
              top_logprobs: z.array(
                z.object({
                  token: z.string(),
                  logprob: z.number()
                })
              )
            })
          ).nullable()
        }).nullish(),
        finish_reason: z.string().nullish(),
        index: z.number()
      })
    ),
    usage: openaiTokenUsageSchema
  }),
  openaiErrorDataSchema
]);
function isReasoningModel(modelId) {
  return modelId.startsWith("o");
}
function isAudioModel(modelId) {
  return modelId.startsWith("gpt-4o-audio-preview");
}
function getSystemMessageMode(modelId) {
  var _a17, _b;
  if (!isReasoningModel(modelId)) {
    return "system";
  }
  return (_b = (_a17 = reasoningModels[modelId]) == null ? void 0 : _a17.systemMessageMode) != null ? _b : "developer";
}
var reasoningModels = {
  "o1-mini": {
    systemMessageMode: "remove"
  },
  "o1-mini-2024-09-12": {
    systemMessageMode: "remove"
  },
  "o1-preview": {
    systemMessageMode: "remove"
  },
  "o1-preview-2024-09-12": {
    systemMessageMode: "remove"
  },
  o3: {
    systemMessageMode: "developer"
  },
  "o3-2025-04-16": {
    systemMessageMode: "developer"
  },
  "o3-mini": {
    systemMessageMode: "developer"
  },
  "o3-mini-2025-01-31": {
    systemMessageMode: "developer"
  },
  "o4-mini": {
    systemMessageMode: "developer"
  },
  "o4-mini-2025-04-16": {
    systemMessageMode: "developer"
  }
};
function convertToOpenAICompletionPrompt({
  prompt,
  inputFormat,
  user = "user",
  assistant = "assistant"
}) {
  if (inputFormat === "prompt" && prompt.length === 1 && prompt[0].role === "user" && prompt[0].content.length === 1 && prompt[0].content[0].type === "text") {
    return { prompt: prompt[0].content[0].text };
  }
  let text2 = "";
  if (prompt[0].role === "system") {
    text2 += `${prompt[0].content}

`;
    prompt = prompt.slice(1);
  }
  for (const { role, content } of prompt) {
    switch (role) {
      case "system": {
        throw new InvalidPromptError({
          message: "Unexpected system message in prompt: ${content}",
          prompt
        });
      }
      case "user": {
        const userMessage = content.map((part) => {
          switch (part.type) {
            case "text": {
              return part.text;
            }
            case "image": {
              throw new UnsupportedFunctionalityError({
                functionality: "images"
              });
            }
          }
        }).join("");
        text2 += `${user}:
${userMessage}

`;
        break;
      }
      case "assistant": {
        const assistantMessage = content.map((part) => {
          switch (part.type) {
            case "text": {
              return part.text;
            }
            case "tool-call": {
              throw new UnsupportedFunctionalityError({
                functionality: "tool-call messages"
              });
            }
          }
        }).join("");
        text2 += `${assistant}:
${assistantMessage}

`;
        break;
      }
      case "tool": {
        throw new UnsupportedFunctionalityError({
          functionality: "tool messages"
        });
      }
      default: {
        const _exhaustiveCheck = role;
        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);
      }
    }
  }
  text2 += `${assistant}:
`;
  return {
    prompt: text2,
    stopSequences: [`
${user}:`]
  };
}
function mapOpenAICompletionLogProbs(logprobs) {
  return logprobs == null ? void 0 : logprobs.tokens.map((token, index) => ({
    token,
    logprob: logprobs.token_logprobs[index],
    topLogprobs: logprobs.top_logprobs ? Object.entries(logprobs.top_logprobs[index]).map(
      ([token2, logprob]) => ({
        token: token2,
        logprob
      })
    ) : []
  }));
}
var OpenAICompletionLanguageModel = class {
  constructor(modelId, settings, config) {
    this.specificationVersion = "v1";
    this.defaultObjectGenerationMode = void 0;
    this.modelId = modelId;
    this.settings = settings;
    this.config = config;
  }
  get provider() {
    return this.config.provider;
  }
  getArgs({
    mode,
    inputFormat,
    prompt,
    maxTokens,
    temperature,
    topP,
    topK,
    frequencyPenalty,
    presencePenalty,
    stopSequences: userStopSequences,
    responseFormat,
    seed
  }) {
    var _a17;
    const type = mode.type;
    const warnings = [];
    if (topK != null) {
      warnings.push({
        type: "unsupported-setting",
        setting: "topK"
      });
    }
    if (responseFormat != null && responseFormat.type !== "text") {
      warnings.push({
        type: "unsupported-setting",
        setting: "responseFormat",
        details: "JSON response format is not supported."
      });
    }
    const { prompt: completionPrompt, stopSequences } = convertToOpenAICompletionPrompt({ prompt, inputFormat });
    const stop = [...stopSequences != null ? stopSequences : [], ...userStopSequences != null ? userStopSequences : []];
    const baseArgs = {
      // model id:
      model: this.modelId,
      // model specific settings:
      echo: this.settings.echo,
      logit_bias: this.settings.logitBias,
      logprobs: typeof this.settings.logprobs === "number" ? this.settings.logprobs : typeof this.settings.logprobs === "boolean" ? this.settings.logprobs ? 0 : void 0 : void 0,
      suffix: this.settings.suffix,
      user: this.settings.user,
      // standardized settings:
      max_tokens: maxTokens,
      temperature,
      top_p: topP,
      frequency_penalty: frequencyPenalty,
      presence_penalty: presencePenalty,
      seed,
      // prompt:
      prompt: completionPrompt,
      // stop sequences:
      stop: stop.length > 0 ? stop : void 0
    };
    switch (type) {
      case "regular": {
        if ((_a17 = mode.tools) == null ? void 0 : _a17.length) {
          throw new UnsupportedFunctionalityError({
            functionality: "tools"
          });
        }
        if (mode.toolChoice) {
          throw new UnsupportedFunctionalityError({
            functionality: "toolChoice"
          });
        }
        return { args: baseArgs, warnings };
      }
      case "object-json": {
        throw new UnsupportedFunctionalityError({
          functionality: "object-json mode"
        });
      }
      case "object-tool": {
        throw new UnsupportedFunctionalityError({
          functionality: "object-tool mode"
        });
      }
      default: {
        const _exhaustiveCheck = type;
        throw new Error(`Unsupported type: ${_exhaustiveCheck}`);
      }
    }
  }
  async doGenerate(options) {
    const { args, warnings } = this.getArgs(options);
    const {
      responseHeaders,
      value: response,
      rawValue: rawResponse
    } = await postJsonToApi({
      url: this.config.url({
        path: "/completions",
        modelId: this.modelId
      }),
      headers: combineHeaders(this.config.headers(), options.headers),
      body: args,
      failedResponseHandler: openaiFailedResponseHandler,
      successfulResponseHandler: createJsonResponseHandler(
        openaiCompletionResponseSchema
      ),
      abortSignal: options.abortSignal,
      fetch: this.config.fetch
    });
    const { prompt: rawPrompt, ...rawSettings } = args;
    const choice = response.choices[0];
    return {
      text: choice.text,
      usage: {
        promptTokens: response.usage.prompt_tokens,
        completionTokens: response.usage.completion_tokens
      },
      finishReason: mapOpenAIFinishReason(choice.finish_reason),
      logprobs: mapOpenAICompletionLogProbs(choice.logprobs),
      rawCall: { rawPrompt, rawSettings },
      rawResponse: { headers: responseHeaders, body: rawResponse },
      response: getResponseMetadata(response),
      warnings,
      request: { body: JSON.stringify(args) }
    };
  }
  async doStream(options) {
    const { args, warnings } = this.getArgs(options);
    const body = {
      ...args,
      stream: true,
      // only include stream_options when in strict compatibility mode:
      stream_options: this.config.compatibility === "strict" ? { include_usage: true } : void 0
    };
    const { responseHeaders, value: response } = await postJsonToApi({
      url: this.config.url({
        path: "/completions",
        modelId: this.modelId
      }),
      headers: combineHeaders(this.config.headers(), options.headers),
      body,
      failedResponseHandler: openaiFailedResponseHandler,
      successfulResponseHandler: createEventSourceResponseHandler(
        openaiCompletionChunkSchema
      ),
      abortSignal: options.abortSignal,
      fetch: this.config.fetch
    });
    const { prompt: rawPrompt, ...rawSettings } = args;
    let finishReason = "unknown";
    let usage = {
      promptTokens: Number.NaN,
      completionTokens: Number.NaN
    };
    let logprobs;
    let isFirstChunk = true;
    return {
      stream: response.pipeThrough(
        new TransformStream({
          transform(chunk, controller) {
            if (!chunk.success) {
              finishReason = "error";
              controller.enqueue({ type: "error", error: chunk.error });
              return;
            }
            const value = chunk.value;
            if ("error" in value) {
              finishReason = "error";
              controller.enqueue({ type: "error", error: value.error });
              return;
            }
            if (isFirstChunk) {
              isFirstChunk = false;
              controller.enqueue({
                type: "response-metadata",
                ...getResponseMetadata(value)
              });
            }
            if (value.usage != null) {
              usage = {
                promptTokens: value.usage.prompt_tokens,
                completionTokens: value.usage.completion_tokens
              };
            }
            const choice = value.choices[0];
            if ((choice == null ? void 0 : choice.finish_reason) != null) {
              finishReason = mapOpenAIFinishReason(choice.finish_reason);
            }
            if ((choice == null ? void 0 : choice.text) != null) {
              controller.enqueue({
                type: "text-delta",
                textDelta: choice.text
              });
            }
            const mappedLogprobs = mapOpenAICompletionLogProbs(
              choice == null ? void 0 : choice.logprobs
            );
            if (mappedLogprobs == null ? void 0 : mappedLogprobs.length) {
              if (logprobs === void 0) logprobs = [];
              logprobs.push(...mappedLogprobs);
            }
          },
          flush(controller) {
            controller.enqueue({
              type: "finish",
              finishReason,
              logprobs,
              usage
            });
          }
        })
      ),
      rawCall: { rawPrompt, rawSettings },
      rawResponse: { headers: responseHeaders },
      warnings,
      request: { body: JSON.stringify(body) }
    };
  }
};
var openaiCompletionResponseSchema = z.object({
  id: z.string().nullish(),
  created: z.number().nullish(),
  model: z.string().nullish(),
  choices: z.array(
    z.object({
      text: z.string(),
      finish_reason: z.string(),
      logprobs: z.object({
        tokens: z.array(z.string()),
        token_logprobs: z.array(z.number()),
        top_logprobs: z.array(z.record(z.string(), z.number())).nullable()
      }).nullish()
    })
  ),
  usage: z.object({
    prompt_tokens: z.number(),
    completion_tokens: z.number()
  })
});
var openaiCompletionChunkSchema = z.union([
  z.object({
    id: z.string().nullish(),
    created: z.number().nullish(),
    model: z.string().nullish(),
    choices: z.array(
      z.object({
        text: z.string(),
        finish_reason: z.string().nullish(),
        index: z.number(),
        logprobs: z.object({
          tokens: z.array(z.string()),
          token_logprobs: z.array(z.number()),
          top_logprobs: z.array(z.record(z.string(), z.number())).nullable()
        }).nullish()
      })
    ),
    usage: z.object({
      prompt_tokens: z.number(),
      completion_tokens: z.number()
    }).nullish()
  }),
  openaiErrorDataSchema
]);
var OpenAIEmbeddingModel = class {
  constructor(modelId, settings, config) {
    this.specificationVersion = "v1";
    this.modelId = modelId;
    this.settings = settings;
    this.config = config;
  }
  get provider() {
    return this.config.provider;
  }
  get maxEmbeddingsPerCall() {
    var _a17;
    return (_a17 = this.settings.maxEmbeddingsPerCall) != null ? _a17 : 2048;
  }
  get supportsParallelCalls() {
    var _a17;
    return (_a17 = this.settings.supportsParallelCalls) != null ? _a17 : true;
  }
  async doEmbed({
    values,
    headers,
    abortSignal
  }) {
    if (values.length > this.maxEmbeddingsPerCall) {
      throw new TooManyEmbeddingValuesForCallError({
        provider: this.provider,
        modelId: this.modelId,
        maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,
        values
      });
    }
    const { responseHeaders, value: response } = await postJsonToApi({
      url: this.config.url({
        path: "/embeddings",
        modelId: this.modelId
      }),
      headers: combineHeaders(this.config.headers(), headers),
      body: {
        model: this.modelId,
        input: values,
        encoding_format: "float",
        dimensions: this.settings.dimensions,
        user: this.settings.user
      },
      failedResponseHandler: openaiFailedResponseHandler,
      successfulResponseHandler: createJsonResponseHandler(
        openaiTextEmbeddingResponseSchema
      ),
      abortSignal,
      fetch: this.config.fetch
    });
    return {
      embeddings: response.data.map((item) => item.embedding),
      usage: response.usage ? { tokens: response.usage.prompt_tokens } : void 0,
      rawResponse: { headers: responseHeaders }
    };
  }
};
var openaiTextEmbeddingResponseSchema = z.object({
  data: z.array(z.object({ embedding: z.array(z.number()) })),
  usage: z.object({ prompt_tokens: z.number() }).nullish()
});
var modelMaxImagesPerCall = {
  "dall-e-3": 1,
  "dall-e-2": 10,
  "gpt-image-1": 10
};
var hasDefaultResponseFormat = /* @__PURE__ */ new Set(["gpt-image-1"]);
var OpenAIImageModel = class {
  constructor(modelId, settings, config) {
    this.modelId = modelId;
    this.settings = settings;
    this.config = config;
    this.specificationVersion = "v1";
  }
  get maxImagesPerCall() {
    var _a17, _b;
    return (_b = (_a17 = this.settings.maxImagesPerCall) != null ? _a17 : modelMaxImagesPerCall[this.modelId]) != null ? _b : 1;
  }
  get provider() {
    return this.config.provider;
  }
  async doGenerate({
    prompt,
    n,
    size,
    aspectRatio,
    seed,
    providerOptions,
    headers,
    abortSignal
  }) {
    var _a17, _b, _c, _d;
    const warnings = [];
    if (aspectRatio != null) {
      warnings.push({
        type: "unsupported-setting",
        setting: "aspectRatio",
        details: "This model does not support aspect ratio. Use `size` instead."
      });
    }
    if (seed != null) {
      warnings.push({ type: "unsupported-setting", setting: "seed" });
    }
    const currentDate = (_c = (_b = (_a17 = this.config._internal) == null ? void 0 : _a17.currentDate) == null ? void 0 : _b.call(_a17)) != null ? _c : /* @__PURE__ */ new Date();
    const { value: response, responseHeaders } = await postJsonToApi({
      url: this.config.url({
        path: "/images/generations",
        modelId: this.modelId
      }),
      headers: combineHeaders(this.config.headers(), headers),
      body: {
        model: this.modelId,
        prompt,
        n,
        size,
        ...(_d = providerOptions.openai) != null ? _d : {},
        ...!hasDefaultResponseFormat.has(this.modelId) ? { response_format: "b64_json" } : {}
      },
      failedResponseHandler: openaiFailedResponseHandler,
      successfulResponseHandler: createJsonResponseHandler(
        openaiImageResponseSchema
      ),
      abortSignal,
      fetch: this.config.fetch
    });
    return {
      images: response.data.map((item) => item.b64_json),
      warnings,
      response: {
        timestamp: currentDate,
        modelId: this.modelId,
        headers: responseHeaders
      }
    };
  }
};
var openaiImageResponseSchema = z.object({
  data: z.array(z.object({ b64_json: z.string() }))
});
var openAIProviderOptionsSchema = z.object({
  include: z.array(z.string()).nullish(),
  language: z.string().nullish(),
  prompt: z.string().nullish(),
  temperature: z.number().min(0).max(1).nullish().default(0),
  timestampGranularities: z.array(z.enum(["word", "segment"])).nullish().default(["segment"])
});
var languageMap = {
  afrikaans: "af",
  arabic: "ar",
  armenian: "hy",
  azerbaijani: "az",
  belarusian: "be",
  bosnian: "bs",
  bulgarian: "bg",
  catalan: "ca",
  chinese: "zh",
  croatian: "hr",
  czech: "cs",
  danish: "da",
  dutch: "nl",
  english: "en",
  estonian: "et",
  finnish: "fi",
  french: "fr",
  galician: "gl",
  german: "de",
  greek: "el",
  hebrew: "he",
  hindi: "hi",
  hungarian: "hu",
  icelandic: "is",
  indonesian: "id",
  italian: "it",
  japanese: "ja",
  kannada: "kn",
  kazakh: "kk",
  korean: "ko",
  latvian: "lv",
  lithuanian: "lt",
  macedonian: "mk",
  malay: "ms",
  marathi: "mr",
  maori: "mi",
  nepali: "ne",
  norwegian: "no",
  persian: "fa",
  polish: "pl",
  portuguese: "pt",
  romanian: "ro",
  russian: "ru",
  serbian: "sr",
  slovak: "sk",
  slovenian: "sl",
  spanish: "es",
  swahili: "sw",
  swedish: "sv",
  tagalog: "tl",
  tamil: "ta",
  thai: "th",
  turkish: "tr",
  ukrainian: "uk",
  urdu: "ur",
  vietnamese: "vi",
  welsh: "cy"
};
var OpenAITranscriptionModel = class {
  constructor(modelId, config) {
    this.modelId = modelId;
    this.config = config;
    this.specificationVersion = "v1";
  }
  get provider() {
    return this.config.provider;
  }
  getArgs({
    audio,
    mediaType,
    providerOptions
  }) {
    var _a17, _b, _c, _d, _e;
    const warnings = [];
    const openAIOptions = parseProviderOptions({
      provider: "openai",
      providerOptions,
      schema: openAIProviderOptionsSchema
    });
    const formData = new FormData();
    const blob = audio instanceof Uint8Array ? new Blob([audio]) : new Blob([convertBase64ToUint8Array(audio)]);
    formData.append("model", this.modelId);
    formData.append("file", new File([blob], "audio", { type: mediaType }));
    if (openAIOptions) {
      const transcriptionModelOptions = {
        include: (_a17 = openAIOptions.include) != null ? _a17 : void 0,
        language: (_b = openAIOptions.language) != null ? _b : void 0,
        prompt: (_c = openAIOptions.prompt) != null ? _c : void 0,
        temperature: (_d = openAIOptions.temperature) != null ? _d : void 0,
        timestamp_granularities: (_e = openAIOptions.timestampGranularities) != null ? _e : void 0
      };
      for (const key in transcriptionModelOptions) {
        const value = transcriptionModelOptions[key];
        if (value !== void 0) {
          formData.append(key, String(value));
        }
      }
    }
    return {
      formData,
      warnings
    };
  }
  async doGenerate(options) {
    var _a17, _b, _c, _d, _e, _f;
    const currentDate = (_c = (_b = (_a17 = this.config._internal) == null ? void 0 : _a17.currentDate) == null ? void 0 : _b.call(_a17)) != null ? _c : /* @__PURE__ */ new Date();
    const { formData, warnings } = this.getArgs(options);
    const {
      value: response,
      responseHeaders,
      rawValue: rawResponse
    } = await postFormDataToApi({
      url: this.config.url({
        path: "/audio/transcriptions",
        modelId: this.modelId
      }),
      headers: combineHeaders(this.config.headers(), options.headers),
      formData,
      failedResponseHandler: openaiFailedResponseHandler,
      successfulResponseHandler: createJsonResponseHandler(
        openaiTranscriptionResponseSchema
      ),
      abortSignal: options.abortSignal,
      fetch: this.config.fetch
    });
    const language = response.language != null && response.language in languageMap ? languageMap[response.language] : void 0;
    return {
      text: response.text,
      segments: (_e = (_d = response.words) == null ? void 0 : _d.map((word) => ({
        text: word.word,
        startSecond: word.start,
        endSecond: word.end
      }))) != null ? _e : [],
      language,
      durationInSeconds: (_f = response.duration) != null ? _f : void 0,
      warnings,
      response: {
        timestamp: currentDate,
        modelId: this.modelId,
        headers: responseHeaders,
        body: rawResponse
      }
    };
  }
};
var openaiTranscriptionResponseSchema = z.object({
  text: z.string(),
  language: z.string().nullish(),
  duration: z.number().nullish(),
  words: z.array(
    z.object({
      word: z.string(),
      start: z.number(),
      end: z.number()
    })
  ).nullish()
});
function convertToOpenAIResponsesMessages({
  prompt,
  systemMessageMode
}) {
  const messages = [];
  const warnings = [];
  for (const { role, content } of prompt) {
    switch (role) {
      case "system": {
        switch (systemMessageMode) {
          case "system": {
            messages.push({ role: "system", content });
            break;
          }
          case "developer": {
            messages.push({ role: "developer", content });
            break;
          }
          case "remove": {
            warnings.push({
              type: "other",
              message: "system messages are removed for this model"
            });
            break;
          }
          default: {
            const _exhaustiveCheck = systemMessageMode;
            throw new Error(
              `Unsupported system message mode: ${_exhaustiveCheck}`
            );
          }
        }
        break;
      }
      case "user": {
        messages.push({
          role: "user",
          content: content.map((part, index) => {
            var _a17, _b, _c, _d;
            switch (part.type) {
              case "text": {
                return { type: "input_text", text: part.text };
              }
              case "image": {
                return {
                  type: "input_image",
                  image_url: part.image instanceof URL ? part.image.toString() : `data:${(_a17 = part.mimeType) != null ? _a17 : "image/jpeg"};base64,${convertUint8ArrayToBase64(part.image)}`,
                  // OpenAI specific extension: image detail
                  detail: (_c = (_b = part.providerMetadata) == null ? void 0 : _b.openai) == null ? void 0 : _c.imageDetail
                };
              }
              case "file": {
                if (part.data instanceof URL) {
                  throw new UnsupportedFunctionalityError({
                    functionality: "File URLs in user messages"
                  });
                }
                switch (part.mimeType) {
                  case "application/pdf": {
                    return {
                      type: "input_file",
                      filename: (_d = part.filename) != null ? _d : `part-${index}.pdf`,
                      file_data: `data:application/pdf;base64,${part.data}`
                    };
                  }
                  default: {
                    throw new UnsupportedFunctionalityError({
                      functionality: "Only PDF files are supported in user messages"
                    });
                  }
                }
              }
            }
          })
        });
        break;
      }
      case "assistant": {
        for (const part of content) {
          switch (part.type) {
            case "text": {
              messages.push({
                role: "assistant",
                content: [{ type: "output_text", text: part.text }]
              });
              break;
            }
            case "tool-call": {
              messages.push({
                type: "function_call",
                call_id: part.toolCallId,
                name: part.toolName,
                arguments: JSON.stringify(part.args)
              });
              break;
            }
          }
        }
        break;
      }
      case "tool": {
        for (const part of content) {
          messages.push({
            type: "function_call_output",
            call_id: part.toolCallId,
            output: JSON.stringify(part.result)
          });
        }
        break;
      }
      default: {
        const _exhaustiveCheck = role;
        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);
      }
    }
  }
  return { messages, warnings };
}
function mapOpenAIResponseFinishReason({
  finishReason,
  hasToolCalls
}) {
  switch (finishReason) {
    case void 0:
    case null:
      return hasToolCalls ? "tool-calls" : "stop";
    case "max_output_tokens":
      return "length";
    case "content_filter":
      return "content-filter";
    default:
      return hasToolCalls ? "tool-calls" : "unknown";
  }
}
function prepareResponsesTools({
  mode,
  strict
}) {
  var _a17;
  const tools = ((_a17 = mode.tools) == null ? void 0 : _a17.length) ? mode.tools : void 0;
  const toolWarnings = [];
  if (tools == null) {
    return { tools: void 0, tool_choice: void 0, toolWarnings };
  }
  const toolChoice = mode.toolChoice;
  const openaiTools2 = [];
  for (const tool of tools) {
    switch (tool.type) {
      case "function":
        openaiTools2.push({
          type: "function",
          name: tool.name,
          description: tool.description,
          parameters: tool.parameters,
          strict: strict ? true : void 0
        });
        break;
      case "provider-defined":
        switch (tool.id) {
          case "openai.web_search_preview":
            openaiTools2.push({
              type: "web_search_preview",
              search_context_size: tool.args.searchContextSize,
              user_location: tool.args.userLocation
            });
            break;
          default:
            toolWarnings.push({ type: "unsupported-tool", tool });
            break;
        }
        break;
      default:
        toolWarnings.push({ type: "unsupported-tool", tool });
        break;
    }
  }
  if (toolChoice == null) {
    return { tools: openaiTools2, tool_choice: void 0, toolWarnings };
  }
  const type = toolChoice.type;
  switch (type) {
    case "auto":
    case "none":
    case "required":
      return { tools: openaiTools2, tool_choice: type, toolWarnings };
    case "tool": {
      if (toolChoice.toolName === "web_search_preview") {
        return {
          tools: openaiTools2,
          tool_choice: {
            type: "web_search_preview"
          },
          toolWarnings
        };
      }
      return {
        tools: openaiTools2,
        tool_choice: {
          type: "function",
          name: toolChoice.toolName
        },
        toolWarnings
      };
    }
    default: {
      const _exhaustiveCheck = type;
      throw new UnsupportedFunctionalityError({
        functionality: `Unsupported tool choice type: ${_exhaustiveCheck}`
      });
    }
  }
}
var OpenAIResponsesLanguageModel = class {
  constructor(modelId, config) {
    this.specificationVersion = "v1";
    this.defaultObjectGenerationMode = "json";
    this.supportsStructuredOutputs = true;
    this.modelId = modelId;
    this.config = config;
  }
  get provider() {
    return this.config.provider;
  }
  getArgs({
    mode,
    maxTokens,
    temperature,
    stopSequences,
    topP,
    topK,
    presencePenalty,
    frequencyPenalty,
    seed,
    prompt,
    providerMetadata,
    responseFormat
  }) {
    var _a17, _b, _c;
    const warnings = [];
    const modelConfig = getResponsesModelConfig(this.modelId);
    const type = mode.type;
    if (topK != null) {
      warnings.push({
        type: "unsupported-setting",
        setting: "topK"
      });
    }
    if (seed != null) {
      warnings.push({
        type: "unsupported-setting",
        setting: "seed"
      });
    }
    if (presencePenalty != null) {
      warnings.push({
        type: "unsupported-setting",
        setting: "presencePenalty"
      });
    }
    if (frequencyPenalty != null) {
      warnings.push({
        type: "unsupported-setting",
        setting: "frequencyPenalty"
      });
    }
    if (stopSequences != null) {
      warnings.push({
        type: "unsupported-setting",
        setting: "stopSequences"
      });
    }
    const { messages, warnings: messageWarnings } = convertToOpenAIResponsesMessages({
      prompt,
      systemMessageMode: modelConfig.systemMessageMode
    });
    warnings.push(...messageWarnings);
    const openaiOptions = parseProviderOptions({
      provider: "openai",
      providerOptions: providerMetadata,
      schema: openaiResponsesProviderOptionsSchema
    });
    const isStrict = (_a17 = openaiOptions == null ? void 0 : openaiOptions.strictSchemas) != null ? _a17 : true;
    const baseArgs = {
      model: this.modelId,
      input: messages,
      temperature,
      top_p: topP,
      max_output_tokens: maxTokens,
      ...(responseFormat == null ? void 0 : responseFormat.type) === "json" && {
        text: {
          format: responseFormat.schema != null ? {
            type: "json_schema",
            strict: isStrict,
            name: (_b = responseFormat.name) != null ? _b : "response",
            description: responseFormat.description,
            schema: responseFormat.schema
          } : { type: "json_object" }
        }
      },
      // provider options:
      metadata: openaiOptions == null ? void 0 : openaiOptions.metadata,
      parallel_tool_calls: openaiOptions == null ? void 0 : openaiOptions.parallelToolCalls,
      previous_response_id: openaiOptions == null ? void 0 : openaiOptions.previousResponseId,
      store: openaiOptions == null ? void 0 : openaiOptions.store,
      user: openaiOptions == null ? void 0 : openaiOptions.user,
      instructions: openaiOptions == null ? void 0 : openaiOptions.instructions,
      // model-specific settings:
      ...modelConfig.isReasoningModel && ((openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null || (openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null) && {
        reasoning: {
          ...(openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null && {
            effort: openaiOptions.reasoningEffort
          },
          ...(openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null && {
            summary: openaiOptions.reasoningSummary
          }
        }
      },
      ...modelConfig.requiredAutoTruncation && {
        truncation: "auto"
      }
    };
    if (modelConfig.isReasoningModel) {
      if (baseArgs.temperature != null) {
        baseArgs.temperature = void 0;
        warnings.push({
          type: "unsupported-setting",
          setting: "temperature",
          details: "temperature is not supported for reasoning models"
        });
      }
      if (baseArgs.top_p != null) {
        baseArgs.top_p = void 0;
        warnings.push({
          type: "unsupported-setting",
          setting: "topP",
          details: "topP is not supported for reasoning models"
        });
      }
    }
    switch (type) {
      case "regular": {
        const { tools, tool_choice, toolWarnings } = prepareResponsesTools({
          mode,
          strict: isStrict
          // TODO support provider options on tools
        });
        return {
          args: {
            ...baseArgs,
            tools,
            tool_choice
          },
          warnings: [...warnings, ...toolWarnings]
        };
      }
      case "object-json": {
        return {
          args: {
            ...baseArgs,
            text: {
              format: mode.schema != null ? {
                type: "json_schema",
                strict: isStrict,
                name: (_c = mode.name) != null ? _c : "response",
                description: mode.description,
                schema: mode.schema
              } : { type: "json_object" }
            }
          },
          warnings
        };
      }
      case "object-tool": {
        return {
          args: {
            ...baseArgs,
            tool_choice: { type: "function", name: mode.tool.name },
            tools: [
              {
                type: "function",
                name: mode.tool.name,
                description: mode.tool.description,
                parameters: mode.tool.parameters,
                strict: isStrict
              }
            ]
          },
          warnings
        };
      }
      default: {
        const _exhaustiveCheck = type;
        throw new Error(`Unsupported type: ${_exhaustiveCheck}`);
      }
    }
  }
  async doGenerate(options) {
    var _a17, _b, _c, _d, _e, _f, _g;
    const { args: body, warnings } = this.getArgs(options);
    const url = this.config.url({
      path: "/responses",
      modelId: this.modelId
    });
    const {
      responseHeaders,
      value: response,
      rawValue: rawResponse
    } = await postJsonToApi({
      url,
      headers: combineHeaders(this.config.headers(), options.headers),
      body,
      failedResponseHandler: openaiFailedResponseHandler,
      successfulResponseHandler: createJsonResponseHandler(
        z.object({
          id: z.string(),
          created_at: z.number(),
          error: z.object({
            message: z.string(),
            code: z.string()
          }).nullish(),
          model: z.string(),
          output: z.array(
            z.discriminatedUnion("type", [
              z.object({
                type: z.literal("message"),
                role: z.literal("assistant"),
                content: z.array(
                  z.object({
                    type: z.literal("output_text"),
                    text: z.string(),
                    annotations: z.array(
                      z.object({
                        type: z.literal("url_citation"),
                        start_index: z.number(),
                        end_index: z.number(),
                        url: z.string(),
                        title: z.string()
                      })
                    )
                  })
                )
              }),
              z.object({
                type: z.literal("function_call"),
                call_id: z.string(),
                name: z.string(),
                arguments: z.string()
              }),
              z.object({
                type: z.literal("web_search_call")
              }),
              z.object({
                type: z.literal("computer_call")
              }),
              z.object({
                type: z.literal("reasoning"),
                summary: z.array(
                  z.object({
                    type: z.literal("summary_text"),
                    text: z.string()
                  })
                )
              })
            ])
          ),
          incomplete_details: z.object({ reason: z.string() }).nullable(),
          usage: usageSchema
        })
      ),
      abortSignal: options.abortSignal,
      fetch: this.config.fetch
    });
    if (response.error) {
      throw new APICallError({
        message: response.error.message,
        url,
        requestBodyValues: body,
        statusCode: 400,
        responseHeaders,
        responseBody: rawResponse,
        isRetryable: false
      });
    }
    const outputTextElements = response.output.filter((output) => output.type === "message").flatMap((output) => output.content).filter((content) => content.type === "output_text");
    const toolCalls = response.output.filter((output) => output.type === "function_call").map((output) => ({
      toolCallType: "function",
      toolCallId: output.call_id,
      toolName: output.name,
      args: output.arguments
    }));
    const reasoningSummary = (_b = (_a17 = response.output.find((item) => item.type === "reasoning")) == null ? void 0 : _a17.summary) != null ? _b : null;
    return {
      text: outputTextElements.map((content) => content.text).join("\n"),
      sources: outputTextElements.flatMap(
        (content) => content.annotations.map((annotation) => {
          var _a23, _b2, _c2;
          return {
            sourceType: "url",
            id: (_c2 = (_b2 = (_a23 = this.config).generateId) == null ? void 0 : _b2.call(_a23)) != null ? _c2 : generateId(),
            url: annotation.url,
            title: annotation.title
          };
        })
      ),
      finishReason: mapOpenAIResponseFinishReason({
        finishReason: (_c = response.incomplete_details) == null ? void 0 : _c.reason,
        hasToolCalls: toolCalls.length > 0
      }),
      toolCalls: toolCalls.length > 0 ? toolCalls : void 0,
      reasoning: reasoningSummary ? reasoningSummary.map((summary) => ({
        type: "text",
        text: summary.text
      })) : void 0,
      usage: {
        promptTokens: response.usage.input_tokens,
        completionTokens: response.usage.output_tokens
      },
      rawCall: {
        rawPrompt: void 0,
        rawSettings: {}
      },
      rawResponse: {
        headers: responseHeaders,
        body: rawResponse
      },
      request: {
        body: JSON.stringify(body)
      },
      response: {
        id: response.id,
        timestamp: new Date(response.created_at * 1e3),
        modelId: response.model
      },
      providerMetadata: {
        openai: {
          responseId: response.id,
          cachedPromptTokens: (_e = (_d = response.usage.input_tokens_details) == null ? void 0 : _d.cached_tokens) != null ? _e : null,
          reasoningTokens: (_g = (_f = response.usage.output_tokens_details) == null ? void 0 : _f.reasoning_tokens) != null ? _g : null
        }
      },
      warnings
    };
  }
  async doStream(options) {
    const { args: body, warnings } = this.getArgs(options);
    const { responseHeaders, value: response } = await postJsonToApi({
      url: this.config.url({
        path: "/responses",
        modelId: this.modelId
      }),
      headers: combineHeaders(this.config.headers(), options.headers),
      body: {
        ...body,
        stream: true
      },
      failedResponseHandler: openaiFailedResponseHandler,
      successfulResponseHandler: createEventSourceResponseHandler(
        openaiResponsesChunkSchema
      ),
      abortSignal: options.abortSignal,
      fetch: this.config.fetch
    });
    const self = this;
    let finishReason = "unknown";
    let promptTokens = NaN;
    let completionTokens = NaN;
    let cachedPromptTokens = null;
    let reasoningTokens = null;
    let responseId = null;
    const ongoingToolCalls = {};
    let hasToolCalls = false;
    return {
      stream: response.pipeThrough(
        new TransformStream({
          transform(chunk, controller) {
            var _a17, _b, _c, _d, _e, _f, _g, _h;
            if (!chunk.success) {
              finishReason = "error";
              controller.enqueue({ type: "error", error: chunk.error });
              return;
            }
            const value = chunk.value;
            if (isResponseOutputItemAddedChunk(value)) {
              if (value.item.type === "function_call") {
                ongoingToolCalls[value.output_index] = {
                  toolName: value.item.name,
                  toolCallId: value.item.call_id
                };
                controller.enqueue({
                  type: "tool-call-delta",
                  toolCallType: "function",
                  toolCallId: value.item.call_id,
                  toolName: value.item.name,
                  argsTextDelta: value.item.arguments
                });
              }
            } else if (isResponseFunctionCallArgumentsDeltaChunk(value)) {
              const toolCall = ongoingToolCalls[value.output_index];
              if (toolCall != null) {
                controller.enqueue({
                  type: "tool-call-delta",
                  toolCallType: "function",
                  toolCallId: toolCall.toolCallId,
                  toolName: toolCall.toolName,
                  argsTextDelta: value.delta
                });
              }
            } else if (isResponseCreatedChunk(value)) {
              responseId = value.response.id;
              controller.enqueue({
                type: "response-metadata",
                id: value.response.id,
                timestamp: new Date(value.response.created_at * 1e3),
                modelId: value.response.model
              });
            } else if (isTextDeltaChunk(value)) {
              controller.enqueue({
                type: "text-delta",
                textDelta: value.delta
              });
            } else if (isResponseReasoningSummaryTextDeltaChunk(value)) {
              controller.enqueue({
                type: "reasoning",
                textDelta: value.delta
              });
            } else if (isResponseOutputItemDoneChunk(value) && value.item.type === "function_call") {
              ongoingToolCalls[value.output_index] = void 0;
              hasToolCalls = true;
              controller.enqueue({
                type: "tool-call",
                toolCallType: "function",
                toolCallId: value.item.call_id,
                toolName: value.item.name,
                args: value.item.arguments
              });
            } else if (isResponseFinishedChunk(value)) {
              finishReason = mapOpenAIResponseFinishReason({
                finishReason: (_a17 = value.response.incomplete_details) == null ? void 0 : _a17.reason,
                hasToolCalls
              });
              promptTokens = value.response.usage.input_tokens;
              completionTokens = value.response.usage.output_tokens;
              cachedPromptTokens = (_c = (_b = value.response.usage.input_tokens_details) == null ? void 0 : _b.cached_tokens) != null ? _c : cachedPromptTokens;
              reasoningTokens = (_e = (_d = value.response.usage.output_tokens_details) == null ? void 0 : _d.reasoning_tokens) != null ? _e : reasoningTokens;
            } else if (isResponseAnnotationAddedChunk(value)) {
              controller.enqueue({
                type: "source",
                source: {
                  sourceType: "url",
                  id: (_h = (_g = (_f = self.config).generateId) == null ? void 0 : _g.call(_f)) != null ? _h : generateId(),
                  url: value.annotation.url,
                  title: value.annotation.title
                }
              });
            } else if (isErrorChunk(value)) {
              controller.enqueue({ type: "error", error: value });
            }
          },
          flush(controller) {
            controller.enqueue({
              type: "finish",
              finishReason,
              usage: { promptTokens, completionTokens },
              ...(cachedPromptTokens != null || reasoningTokens != null) && {
                providerMetadata: {
                  openai: {
                    responseId,
                    cachedPromptTokens,
                    reasoningTokens
                  }
                }
              }
            });
          }
        })
      ),
      rawCall: {
        rawPrompt: void 0,
        rawSettings: {}
      },
      rawResponse: { headers: responseHeaders },
      request: { body: JSON.stringify(body) },
      warnings
    };
  }
};
var usageSchema = z.object({
  input_tokens: z.number(),
  input_tokens_details: z.object({ cached_tokens: z.number().nullish() }).nullish(),
  output_tokens: z.number(),
  output_tokens_details: z.object({ reasoning_tokens: z.number().nullish() }).nullish()
});
var textDeltaChunkSchema = z.object({
  type: z.literal("response.output_text.delta"),
  delta: z.string()
});
var responseFinishedChunkSchema = z.object({
  type: z.enum(["response.completed", "response.incomplete"]),
  response: z.object({
    incomplete_details: z.object({ reason: z.string() }).nullish(),
    usage: usageSchema
  })
});
var responseCreatedChunkSchema = z.object({
  type: z.literal("response.created"),
  response: z.object({
    id: z.string(),
    created_at: z.number(),
    model: z.string()
  })
});
var responseOutputItemDoneSchema = z.object({
  type: z.literal("response.output_item.done"),
  output_index: z.number(),
  item: z.discriminatedUnion("type", [
    z.object({
      type: z.literal("message")
    }),
    z.object({
      type: z.literal("function_call"),
      id: z.string(),
      call_id: z.string(),
      name: z.string(),
      arguments: z.string(),
      status: z.literal("completed")
    })
  ])
});
var responseFunctionCallArgumentsDeltaSchema = z.object({
  type: z.literal("response.function_call_arguments.delta"),
  item_id: z.string(),
  output_index: z.number(),
  delta: z.string()
});
var responseOutputItemAddedSchema = z.object({
  type: z.literal("response.output_item.added"),
  output_index: z.number(),
  item: z.discriminatedUnion("type", [
    z.object({
      type: z.literal("message")
    }),
    z.object({
      type: z.literal("function_call"),
      id: z.string(),
      call_id: z.string(),
      name: z.string(),
      arguments: z.string()
    })
  ])
});
var responseAnnotationAddedSchema = z.object({
  type: z.literal("response.output_text.annotation.added"),
  annotation: z.object({
    type: z.literal("url_citation"),
    url: z.string(),
    title: z.string()
  })
});
var responseReasoningSummaryTextDeltaSchema = z.object({
  type: z.literal("response.reasoning_summary_text.delta"),
  item_id: z.string(),
  output_index: z.number(),
  summary_index: z.number(),
  delta: z.string()
});
var errorChunkSchema = z.object({
  type: z.literal("error"),
  code: z.string(),
  message: z.string(),
  param: z.string().nullish(),
  sequence_number: z.number()
});
var openaiResponsesChunkSchema = z.union([
  textDeltaChunkSchema,
  responseFinishedChunkSchema,
  responseCreatedChunkSchema,
  responseOutputItemDoneSchema,
  responseFunctionCallArgumentsDeltaSchema,
  responseOutputItemAddedSchema,
  responseAnnotationAddedSchema,
  responseReasoningSummaryTextDeltaSchema,
  errorChunkSchema,
  z.object({ type: z.string() }).passthrough()
  // fallback for unknown chunks
]);
function isTextDeltaChunk(chunk) {
  return chunk.type === "response.output_text.delta";
}
function isResponseOutputItemDoneChunk(chunk) {
  return chunk.type === "response.output_item.done";
}
function isResponseFinishedChunk(chunk) {
  return chunk.type === "response.completed" || chunk.type === "response.incomplete";
}
function isResponseCreatedChunk(chunk) {
  return chunk.type === "response.created";
}
function isResponseFunctionCallArgumentsDeltaChunk(chunk) {
  return chunk.type === "response.function_call_arguments.delta";
}
function isResponseOutputItemAddedChunk(chunk) {
  return chunk.type === "response.output_item.added";
}
function isResponseAnnotationAddedChunk(chunk) {
  return chunk.type === "response.output_text.annotation.added";
}
function isResponseReasoningSummaryTextDeltaChunk(chunk) {
  return chunk.type === "response.reasoning_summary_text.delta";
}
function isErrorChunk(chunk) {
  return chunk.type === "error";
}
function getResponsesModelConfig(modelId) {
  if (modelId.startsWith("o")) {
    if (modelId.startsWith("o1-mini") || modelId.startsWith("o1-preview")) {
      return {
        isReasoningModel: true,
        systemMessageMode: "remove",
        requiredAutoTruncation: false
      };
    }
    return {
      isReasoningModel: true,
      systemMessageMode: "developer",
      requiredAutoTruncation: false
    };
  }
  return {
    isReasoningModel: false,
    systemMessageMode: "system",
    requiredAutoTruncation: false
  };
}
var openaiResponsesProviderOptionsSchema = z.object({
  metadata: z.any().nullish(),
  parallelToolCalls: z.boolean().nullish(),
  previousResponseId: z.string().nullish(),
  store: z.boolean().nullish(),
  user: z.string().nullish(),
  reasoningEffort: z.string().nullish(),
  strictSchemas: z.boolean().nullish(),
  instructions: z.string().nullish(),
  reasoningSummary: z.string().nullish()
});
var WebSearchPreviewParameters = z.object({});
function webSearchPreviewTool({
  searchContextSize,
  userLocation
} = {}) {
  return {
    type: "provider-defined",
    id: "openai.web_search_preview",
    args: {
      searchContextSize,
      userLocation
    },
    parameters: WebSearchPreviewParameters
  };
}
var openaiTools = {
  webSearchPreview: webSearchPreviewTool
};
var OpenAIProviderOptionsSchema = z.object({
  instructions: z.string().nullish(),
  speed: z.number().min(0.25).max(4).default(1).nullish()
});
var OpenAISpeechModel = class {
  constructor(modelId, config) {
    this.modelId = modelId;
    this.config = config;
    this.specificationVersion = "v1";
  }
  get provider() {
    return this.config.provider;
  }
  getArgs({
    text: text2,
    voice = "alloy",
    outputFormat = "mp3",
    speed,
    instructions,
    providerOptions
  }) {
    const warnings = [];
    const openAIOptions = parseProviderOptions({
      provider: "openai",
      providerOptions,
      schema: OpenAIProviderOptionsSchema
    });
    const requestBody = {
      model: this.modelId,
      input: text2,
      voice,
      response_format: "mp3",
      speed,
      instructions
    };
    if (outputFormat) {
      if (["mp3", "opus", "aac", "flac", "wav", "pcm"].includes(outputFormat)) {
        requestBody.response_format = outputFormat;
      } else {
        warnings.push({
          type: "unsupported-setting",
          setting: "outputFormat",
          details: `Unsupported output format: ${outputFormat}. Using mp3 instead.`
        });
      }
    }
    if (openAIOptions) {
      const speechModelOptions = {};
      for (const key in speechModelOptions) {
        const value = speechModelOptions[key];
        if (value !== void 0) {
          requestBody[key] = value;
        }
      }
    }
    return {
      requestBody,
      warnings
    };
  }
  async doGenerate(options) {
    var _a17, _b, _c;
    const currentDate = (_c = (_b = (_a17 = this.config._internal) == null ? void 0 : _a17.currentDate) == null ? void 0 : _b.call(_a17)) != null ? _c : /* @__PURE__ */ new Date();
    const { requestBody, warnings } = this.getArgs(options);
    const {
      value: audio,
      responseHeaders,
      rawValue: rawResponse
    } = await postJsonToApi({
      url: this.config.url({
        path: "/audio/speech",
        modelId: this.modelId
      }),
      headers: combineHeaders(this.config.headers(), options.headers),
      body: requestBody,
      failedResponseHandler: openaiFailedResponseHandler,
      successfulResponseHandler: createBinaryResponseHandler(),
      abortSignal: options.abortSignal,
      fetch: this.config.fetch
    });
    return {
      audio,
      warnings,
      request: {
        body: JSON.stringify(requestBody)
      },
      response: {
        timestamp: currentDate,
        modelId: this.modelId,
        headers: responseHeaders,
        body: rawResponse
      }
    };
  }
};
function createOpenAI(options = {}) {
  var _a17, _b, _c;
  const baseURL = (_a17 = withoutTrailingSlash(options.baseURL)) != null ? _a17 : "https://api.openai.com/v1";
  const compatibility = (_b = options.compatibility) != null ? _b : "compatible";
  const providerName = (_c = options.name) != null ? _c : "openai";
  const getHeaders = () => ({
    Authorization: `Bearer ${loadApiKey({
      apiKey: options.apiKey,
      environmentVariableName: "OPENAI_API_KEY",
      description: "OpenAI"
    })}`,
    "OpenAI-Organization": options.organization,
    "OpenAI-Project": options.project,
    ...options.headers
  });
  const createChatModel = (modelId, settings = {}) => new OpenAIChatLanguageModel(modelId, settings, {
    provider: `${providerName}.chat`,
    url: ({ path }) => `${baseURL}${path}`,
    headers: getHeaders,
    compatibility,
    fetch: options.fetch
  });
  const createCompletionModel = (modelId, settings = {}) => new OpenAICompletionLanguageModel(modelId, settings, {
    provider: `${providerName}.completion`,
    url: ({ path }) => `${baseURL}${path}`,
    headers: getHeaders,
    compatibility,
    fetch: options.fetch
  });
  const createEmbeddingModel = (modelId, settings = {}) => new OpenAIEmbeddingModel(modelId, settings, {
    provider: `${providerName}.embedding`,
    url: ({ path }) => `${baseURL}${path}`,
    headers: getHeaders,
    fetch: options.fetch
  });
  const createImageModel = (modelId, settings = {}) => new OpenAIImageModel(modelId, settings, {
    provider: `${providerName}.image`,
    url: ({ path }) => `${baseURL}${path}`,
    headers: getHeaders,
    fetch: options.fetch
  });
  const createTranscriptionModel = (modelId) => new OpenAITranscriptionModel(modelId, {
    provider: `${providerName}.transcription`,
    url: ({ path }) => `${baseURL}${path}`,
    headers: getHeaders,
    fetch: options.fetch
  });
  const createSpeechModel = (modelId) => new OpenAISpeechModel(modelId, {
    provider: `${providerName}.speech`,
    url: ({ path }) => `${baseURL}${path}`,
    headers: getHeaders,
    fetch: options.fetch
  });
  const createLanguageModel = (modelId, settings) => {
    if (new.target) {
      throw new Error(
        "The OpenAI model function cannot be called with the new keyword."
      );
    }
    if (modelId === "gpt-3.5-turbo-instruct") {
      return createCompletionModel(
        modelId,
        settings
      );
    }
    return createChatModel(modelId, settings);
  };
  const createResponsesModel = (modelId) => {
    return new OpenAIResponsesLanguageModel(modelId, {
      provider: `${providerName}.responses`,
      url: ({ path }) => `${baseURL}${path}`,
      headers: getHeaders,
      fetch: options.fetch
    });
  };
  const provider = function(modelId, settings) {
    return createLanguageModel(modelId, settings);
  };
  provider.languageModel = createLanguageModel;
  provider.chat = createChatModel;
  provider.completion = createCompletionModel;
  provider.responses = createResponsesModel;
  provider.embedding = createEmbeddingModel;
  provider.textEmbedding = createEmbeddingModel;
  provider.textEmbeddingModel = createEmbeddingModel;
  provider.image = createImageModel;
  provider.imageModel = createImageModel;
  provider.transcription = createTranscriptionModel;
  provider.transcriptionModel = createTranscriptionModel;
  provider.speech = createSpeechModel;
  provider.speechModel = createSpeechModel;
  provider.tools = openaiTools;
  return provider;
}
var openai = createOpenAI({
  compatibility: "strict"
  // strict for OpenAI API
});

// src/utils/organize-tracks-with-ai.ts
async function organizeTracksWithAI(tracks, prompt) {
  const uniqueIds = Array.from(new Set(tracks.map((t) => t.id)));
  try {
    const { object: object2 } = await generateObject({
      model: openai("o4-mini"),
      schema: makePlaylistsSchema(tracks.map((t) => t.id)),
      prompt: `
      You are a Spotify playlist organizer AI.  
      Your task is to group the given tracks into playlists based exactly on the user's instruction.  

      Instructions:
      1. Use **only** the provided tracks—do not invent or alter any IDs, names, or artists.
      3. If the user's request specifies a single playlist, you **must** output exactly one playlist.  
      4. Create no more than the maximum number of playlists requested by the user.  
      5. Remove duplicates from the tracks in each playlist.

      Example valid response:
      {
        "playlists": [
          {
            "name": "Chill Hits",
            "description": "Músicas relaxantes",
            "tracks": ["123","456"]
          }
        ]
      }

      User's instruction:
      ${prompt}
     
      Tracks summary: ${JSON.stringify(tracks, null, 2)},
    `
    });
    return object2;
  } catch (error) {
    if (NoObjectGeneratedError.isInstance(error)) {
      console.log("NoObjectGeneratedError");
      console.log("Cause:", error.cause);
      console.log("Text:", error.text);
      console.log("Response:", error.response);
      console.log("Usage:", error.usage);
      console.log("Finish Reason:", error.finishReason);
    }
    throw new Error(
      `Failed to organize tracks with AI: ${error instanceof Error ? error.message : String(error)}`
    );
  }
}

// src/utils/create-playlists-on-spotify.ts
init_esm();
function chunkArray(arr, size) {
  const result = [];
  for (let i = 0; i < arr.length; i += size) {
    result.push(arr.slice(i, i + size));
  }
  return result;
}
async function createPlaylistsOnSpotify({
  accessToken,
  aiResult,
  userId
}) {
  const created = [];
  for (const p of aiResult.playlists) {
    try {
      const playlist = await fetch(
        `https://api.spotify.com/v1/users/${userId}/playlists`,
        {
          method: "POST",
          headers: { Authorization: `Bearer ${accessToken}` },
          body: JSON.stringify({
            name: p.name,
            description: p.description,
            public: false
          })
        }
      ).then((r) => r.json());
      if (!playlist.id) {
        console.error(`❌ Falha ao criar playlist: ${p.name}`, playlist);
        continue;
      }
      console.log(`✅ Criada playlist: ${p.name} (${playlist.id})`);
      const uris = p.tracks.map((t) => t && `spotify:track:${t}`).filter((u) => Boolean(u));
      if (uris.length === 0) {
        console.warn(`⚠️ Skipping playlist ${p.name}, nenhuma track válida`);
        continue;
      }
      const chunks = chunkArray(uris, 100);
      for (const [i, chunk] of chunks.entries()) {
        try {
          const res = await fetch(
            `https://api.spotify.com/v1/playlists/${playlist.id}/tracks`,
            {
              method: "POST",
              headers: {
                Authorization: `Bearer ${accessToken}`,
                "Content-Type": "application/json"
              },
              body: JSON.stringify({ uris: chunk })
            }
          ).then((r) => r.json());
          if (res.error) {
            console.error(
              `❌ Erro ao adicionar tracks (chunk ${i + 1}/${chunks.length}) na playlist ${p.name}`,
              res.error
            );
          } else {
            console.log(
              `✅ Adicionado chunk ${i + 1}/${chunks.length} na playlist ${p.name}`
            );
          }
        } catch (err) {
          console.error(
            `❌ Falha inesperada ao adicionar chunk na playlist ${p.name}`,
            err
          );
        }
      }
      created.push({
        id: playlist.id,
        name: p.name,
        description: p.description,
        totalTracks: p.tracks.length
      });
    } catch (err) {
      console.error(`❌ Erro geral na playlist ${p.name}`, err);
      continue;
    }
  }
  return created;
}

// src/trigger/playlist-organize.ts
var prisma2 = new prisma_exports.PrismaClient();
var playlistOrganize = schemaTask({
  id: "playlist-organize",
  schema: z.object({
    jobId: z.string()
  }),
  retry: {
    maxAttempts: 3,
    minTimeoutInMs: 1e3 * 60,
    // 1 minute,
    factor: 2
  },
  run: async ({ jobId }) => {
    const playlistJobExists = await prisma2.playlistJob.findUnique({
      where: {
        id: jobId
      },
      include: {
        inputs: true,
        user: {
          select: {
            id: true,
            accounts: {
              where: {
                providerId: "spotify"
              },
              select: {
                accountId: true,
                accessToken: true
              }
            }
          }
        }
      }
    });
    if (!playlistJobExists) {
      throw new Error(`Playlist job with ID ${jobId} does not exist`);
    }
    await prisma2.playlistJob.update({
      where: {
        id: jobId
      },
      data: {
        status: "PENDING"
      }
    });
    if (!playlistJobExists.user.accounts[0]?.accessToken) {
      throw new Error("No access token found for the user");
    }
    const tracks = await getTracksFromSpotify(
      playlistJobExists.inputs,
      playlistJobExists.user.accounts[0]?.accessToken
    );
    logger.info(`Fetched ${tracks.length} tracks from Spotify`);
    await prisma2.playlistJob.update({
      where: {
        id: jobId
      },
      data: {
        status: "PROCESSING"
      }
    });
    logger.info("Organizing tracks with AI...");
    const { playlists } = await organizeTracksWithAI(
      tracks,
      playlistJobExists.prompt || "Organize these tracks"
    );
    logger.info("Organized tracks with AI", {
      jobId,
      playlists
    });
    logger.info("Creating playlists on Spotify...");
    const createdPlaylists = await createPlaylistsOnSpotify({
      userId: playlistJobExists.user.accounts[0].accountId,
      accessToken: playlistJobExists.user.accounts[0].accessToken,
      aiResult: {
        playlists
      }
    });
    logger.info("Created playlists on Spotify", {
      jobId,
      createdPlaylists
    });
    logger.info("Playlists created successfully", {
      jobId
    });
    logger.info("Playlists created successfully");
    await prisma2.playlistJob.update({
      where: {
        id: jobId
      },
      data: {
        status: "COMPLETED",
        completedAt: /* @__PURE__ */ new Date(),
        playlistJobResults: {
          createMany: {
            data: createdPlaylists.map((p) => ({
              playlistId: p.id,
              name: p.name,
              totalTracks: p.totalTracks,
              description: p.description
            }))
          }
        }
      }
    });
  }
});

export {
  playlistOrganize
};
/*! Bundled license information:

undici/lib/web/fetch/body.js:
  (*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> *)

undici/lib/web/websocket/frame.js:
  (*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> *)

decimal.js/decimal.mjs:
  (*!
   *  decimal.js v10.5.0
   *  An arbitrary-precision Decimal type for JavaScript.
   *  https://github.com/MikeMcl/decimal.js
   *  Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>
   *  MIT Licence
   *)
*/
//# sourceMappingURL=chunk-EJ4LUL7J.mjs.map
